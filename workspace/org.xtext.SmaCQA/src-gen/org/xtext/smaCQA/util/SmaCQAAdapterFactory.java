/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.smaCQA.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.xtext.smaCQA.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.xtext.smaCQA.SmaCQAPackage
 * @generated
 */
public class SmaCQAAdapterFactory extends AdapterFactoryImpl
{
  /**
	 * The cached model package.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected static SmaCQAPackage modelPackage;

  /**
	 * Creates an instance of the adapter factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public SmaCQAAdapterFactory()
  {
		if (modelPackage == null) {
			modelPackage = SmaCQAPackage.eINSTANCE;
		}
	}

  /**
	 * Returns whether this factory is applicable for the type of the object.
	 * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
	 * @return whether this factory is applicable for the type of the object.
	 * @generated
	 */
  @Override
  public boolean isFactoryForType(Object object)
  {
		if (object == modelPackage) {
			return true;
		}
		if (object instanceof EObject) {
			return ((EObject)object).eClass().getEPackage() == modelPackage;
		}
		return false;
	}

  /**
	 * The switch that delegates to the <code>createXXX</code> methods.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected SmaCQASwitch<Adapter> modelSwitch =
    new SmaCQASwitch<Adapter>() {
			@Override
			public Adapter caseModel(Model object) {
				return createModelAdapter();
			}
			@Override
			public Adapter caseValueExchange(ValueExchange object) {
				return createValueExchangeAdapter();
			}
			@Override
			public Adapter caseDataQuestion(DataQuestion object) {
				return createDataQuestionAdapter();
			}
			@Override
			public Adapter caseShipmentQuestion(ShipmentQuestion object) {
				return createShipmentQuestionAdapter();
			}
			@Override
			public Adapter caseInsuranceQuestion(InsuranceQuestion object) {
				return createInsuranceQuestionAdapter();
			}
			@Override
			public Adapter caseAlimentaryQuestion(AlimentaryQuestion object) {
				return createAlimentaryQuestionAdapter();
			}
			@Override
			public Adapter caseValueObjectQuestion(ValueObjectQuestion object) {
				return createValueObjectQuestionAdapter();
			}
			@Override
			public Adapter caseValueObjectRightQuestion(ValueObjectRightQuestion object) {
				return createValueObjectRightQuestionAdapter();
			}
			@Override
			public Adapter caseValueObjectTokenQuestion(ValueObjectTokenQuestion object) {
				return createValueObjectTokenQuestionAdapter();
			}
			@Override
			public Adapter caseValueObjectTangibleQuestion(ValueObjectTangibleQuestion object) {
				return createValueObjectTangibleQuestionAdapter();
			}
			@Override
			public Adapter caseDataRegister(DataRegister object) {
				return createDataRegisterAdapter();
			}
			@Override
			public Adapter caseToken(Token object) {
				return createTokenAdapter();
			}
			@Override
			public Adapter caseTokenERC20(TokenERC20 object) {
				return createTokenERC20Adapter();
			}
			@Override
			public Adapter caseTokenERC223(TokenERC223 object) {
				return createTokenERC223Adapter();
			}
			@Override
			public Adapter caseTokenERC721(TokenERC721 object) {
				return createTokenERC721Adapter();
			}
			@Override
			public Adapter caseTimeValueExchangeDurationQuestion(TimeValueExchangeDurationQuestion object) {
				return createTimeValueExchangeDurationQuestionAdapter();
			}
			@Override
			public Adapter caseTimeStartValueExchangeQuestion(TimeStartValueExchangeQuestion object) {
				return createTimeStartValueExchangeQuestionAdapter();
			}
			@Override
			public Adapter caseRepeatValueExchangeQuestion(RepeatValueExchangeQuestion object) {
				return createRepeatValueExchangeQuestionAdapter();
			}
			@Override
			public Adapter caseConditionsValueExchangeQuestion(ConditionsValueExchangeQuestion object) {
				return createConditionsValueExchangeQuestionAdapter();
			}
			@Override
			public Adapter caseLegalQuestion(LegalQuestion object) {
				return createLegalQuestionAdapter();
			}
			@Override
			public Adapter caseAgeQuestion(AgeQuestion object) {
				return createAgeQuestionAdapter();
			}
			@Override
			public Adapter caseTaxQuestion(TaxQuestion object) {
				return createTaxQuestionAdapter();
			}
			@Override
			public Adapter caseAdditionalLegalDocumentQuestion(AdditionalLegalDocumentQuestion object) {
				return createAdditionalLegalDocumentQuestionAdapter();
			}
			@Override
			public Adapter caseRegulatoryComplianceQuestion(RegulatoryComplianceQuestion object) {
				return createRegulatoryComplianceQuestionAdapter();
			}
			@Override
			public Adapter caseEconomyQuestion(EconomyQuestion object) {
				return createEconomyQuestionAdapter();
			}
			@Override
			public Adapter caseMinimumAmountQuestion(MinimumAmountQuestion object) {
				return createMinimumAmountQuestionAdapter();
			}
			@Override
			public Adapter caseShipmentCostResponsibilityQuestion(ShipmentCostResponsibilityQuestion object) {
				return createShipmentCostResponsibilityQuestionAdapter();
			}
			@Override
			public Adapter caseShipmentDetailsQuestion(ShipmentDetailsQuestion object) {
				return createShipmentDetailsQuestionAdapter();
			}
			@Override
			public Adapter caseSanitaryControlQuestion(SanitaryControlQuestion object) {
				return createSanitaryControlQuestionAdapter();
			}
			@Override
			public Adapter caseCustomsQuestion(CustomsQuestion object) {
				return createCustomsQuestionAdapter();
			}
			@Override
			public Adapter caseImportTaxQuestion(ImportTaxQuestion object) {
				return createImportTaxQuestionAdapter();
			}
			@Override
			public Adapter caseTaxShipmentDetailsQuestion(TaxShipmentDetailsQuestion object) {
				return createTaxShipmentDetailsQuestionAdapter();
			}
			@Override
			public Adapter caseGeographicalQuestion(GeographicalQuestion object) {
				return createGeographicalQuestionAdapter();
			}
			@Override
			public Adapter caseGeographicalRestrictionQuestion(GeographicalRestrictionQuestion object) {
				return createGeographicalRestrictionQuestionAdapter();
			}
			@Override
			public Adapter caseAddressPickupQuestion(AddressPickupQuestion object) {
				return createAddressPickupQuestionAdapter();
			}
			@Override
			public Adapter caseAddressDeliveryQuestion(AddressDeliveryQuestion object) {
				return createAddressDeliveryQuestionAdapter();
			}
			@Override
			public Adapter caseShipmentTrackingNumberQuestion(ShipmentTrackingNumberQuestion object) {
				return createShipmentTrackingNumberQuestionAdapter();
			}
			@Override
			public Adapter caseDangerousLoadQuestion(DangerousLoadQuestion object) {
				return createDangerousLoadQuestionAdapter();
			}
			@Override
			public Adapter caseSpecialMeasuresQuestion(SpecialMeasuresQuestion object) {
				return createSpecialMeasuresQuestionAdapter();
			}
			@Override
			public Adapter casePerishableQuestion(PerishableQuestion object) {
				return createPerishableQuestionAdapter();
			}
			@Override
			public Adapter caseExpirationDateQuestion(ExpirationDateQuestion object) {
				return createExpirationDateQuestionAdapter();
			}
			@Override
			public Adapter caseCargoTypeQuestion(CargoTypeQuestion object) {
				return createCargoTypeQuestionAdapter();
			}
			@Override
			public Adapter caseCargoWeightQuestion(CargoWeightQuestion object) {
				return createCargoWeightQuestionAdapter();
			}
			@Override
			public Adapter caseCargoDimensionsQuestion(CargoDimensionsQuestion object) {
				return createCargoDimensionsQuestionAdapter();
			}
			@Override
			public Adapter caseSeaShipmentQuestion(SeaShipmentQuestion object) {
				return createSeaShipmentQuestionAdapter();
			}
			@Override
			public Adapter caseMaritimeQuestion(MaritimeQuestion object) {
				return createMaritimeQuestionAdapter();
			}
			@Override
			public Adapter caseVoyageQuestion(VoyageQuestion object) {
				return createVoyageQuestionAdapter();
			}
			@Override
			public Adapter caseMeansTransportQuestion(MeansTransportQuestion object) {
				return createMeansTransportQuestionAdapter();
			}
			@Override
			public Adapter caseCompanyQuestion(CompanyQuestion object) {
				return createCompanyQuestionAdapter();
			}
			@Override
			public Adapter caseDeliveryDeadlineQuestion(DeliveryDeadlineQuestion object) {
				return createDeliveryDeadlineQuestionAdapter();
			}
			@Override
			public Adapter caseUpdatesAndMonitoringQuestion(UpdatesAndMonitoringQuestion object) {
				return createUpdatesAndMonitoringQuestionAdapter();
			}
			@Override
			public Adapter caseExternalMediatorQuestion(ExternalMediatorQuestion object) {
				return createExternalMediatorQuestionAdapter();
			}
			@Override
			public Adapter caseMediatorNameQuestion(MediatorNameQuestion object) {
				return createMediatorNameQuestionAdapter();
			}
			@Override
			public Adapter caseShipmentInsuranceQuestion(ShipmentInsuranceQuestion object) {
				return createShipmentInsuranceQuestionAdapter();
			}
			@Override
			public Adapter caseInsuranceDetailsQuestion(InsuranceDetailsQuestion object) {
				return createInsuranceDetailsQuestionAdapter();
			}
			@Override
			public Adapter caseReturnsOrCancellationsQuestion(ReturnsOrCancellationsQuestion object) {
				return createReturnsOrCancellationsQuestionAdapter();
			}
			@Override
			public Adapter caseReturnsManagementQuestion(ReturnsManagementQuestion object) {
				return createReturnsManagementQuestionAdapter();
			}
			@Override
			public Adapter casePenaltyForNeglectQuestion(PenaltyForNeglectQuestion object) {
				return createPenaltyForNeglectQuestionAdapter();
			}
			@Override
			public Adapter caseAgreedPriceQuestion(AgreedPriceQuestion object) {
				return createAgreedPriceQuestionAdapter();
			}
			@Override
			public Adapter caseProductQualityQuestion(ProductQualityQuestion object) {
				return createProductQualityQuestionAdapter();
			}
			@Override
			public Adapter caseExpectedQualityQuestion(ExpectedQualityQuestion object) {
				return createExpectedQualityQuestionAdapter();
			}
			@Override
			public Adapter caseInternationalSealQuestion(InternationalSealQuestion object) {
				return createInternationalSealQuestionAdapter();
			}
			@Override
			public Adapter caseInternacionalSealNameQuestion(InternacionalSealNameQuestion object) {
				return createInternacionalSealNameQuestionAdapter();
			}
			@Override
			public Adapter caseHealthInspectionQuestion(HealthInspectionQuestion object) {
				return createHealthInspectionQuestionAdapter();
			}
			@Override
			public Adapter caseInspectionResultQuestion(InspectionResultQuestion object) {
				return createInspectionResultQuestionAdapter();
			}
			@Override
			public Adapter caseStorageConditionsQuestion(StorageConditionsQuestion object) {
				return createStorageConditionsQuestionAdapter();
			}
			@Override
			public Adapter defaultCase(EObject object) {
				return createEObjectAdapter();
			}
		};

  /**
	 * Creates an adapter for the <code>target</code>.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @param target the object to adapt.
	 * @return the adapter for the <code>target</code>.
	 * @generated
	 */
  @Override
  public Adapter createAdapter(Notifier target)
  {
		return modelSwitch.doSwitch((EObject)target);
	}


  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.Model <em>Model</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.Model
	 * @generated
	 */
  public Adapter createModelAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ValueExchange <em>Value Exchange</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ValueExchange
	 * @generated
	 */
  public Adapter createValueExchangeAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.DataQuestion <em>Data Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.DataQuestion
	 * @generated
	 */
  public Adapter createDataQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ShipmentQuestion <em>Shipment Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ShipmentQuestion
	 * @generated
	 */
  public Adapter createShipmentQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.InsuranceQuestion <em>Insurance Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.InsuranceQuestion
	 * @generated
	 */
  public Adapter createInsuranceQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.AlimentaryQuestion <em>Alimentary Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.AlimentaryQuestion
	 * @generated
	 */
  public Adapter createAlimentaryQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ValueObjectQuestion <em>Value Object Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ValueObjectQuestion
	 * @generated
	 */
  public Adapter createValueObjectQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ValueObjectRightQuestion <em>Value Object Right Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ValueObjectRightQuestion
	 * @generated
	 */
  public Adapter createValueObjectRightQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ValueObjectTokenQuestion <em>Value Object Token Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ValueObjectTokenQuestion
	 * @generated
	 */
  public Adapter createValueObjectTokenQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ValueObjectTangibleQuestion <em>Value Object Tangible Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ValueObjectTangibleQuestion
	 * @generated
	 */
  public Adapter createValueObjectTangibleQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.DataRegister <em>Data Register</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.DataRegister
	 * @generated
	 */
  public Adapter createDataRegisterAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.Token <em>Token</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.Token
	 * @generated
	 */
  public Adapter createTokenAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.TokenERC20 <em>Token ERC20</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.TokenERC20
	 * @generated
	 */
  public Adapter createTokenERC20Adapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.TokenERC223 <em>Token ERC223</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.TokenERC223
	 * @generated
	 */
  public Adapter createTokenERC223Adapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.TokenERC721 <em>Token ERC721</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.TokenERC721
	 * @generated
	 */
  public Adapter createTokenERC721Adapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.TimeValueExchangeDurationQuestion <em>Time Value Exchange Duration Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.TimeValueExchangeDurationQuestion
	 * @generated
	 */
  public Adapter createTimeValueExchangeDurationQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.TimeStartValueExchangeQuestion <em>Time Start Value Exchange Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.TimeStartValueExchangeQuestion
	 * @generated
	 */
  public Adapter createTimeStartValueExchangeQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.RepeatValueExchangeQuestion <em>Repeat Value Exchange Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.RepeatValueExchangeQuestion
	 * @generated
	 */
  public Adapter createRepeatValueExchangeQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ConditionsValueExchangeQuestion <em>Conditions Value Exchange Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ConditionsValueExchangeQuestion
	 * @generated
	 */
  public Adapter createConditionsValueExchangeQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.LegalQuestion <em>Legal Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.LegalQuestion
	 * @generated
	 */
  public Adapter createLegalQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.AgeQuestion <em>Age Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.AgeQuestion
	 * @generated
	 */
  public Adapter createAgeQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.TaxQuestion <em>Tax Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.TaxQuestion
	 * @generated
	 */
  public Adapter createTaxQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.AdditionalLegalDocumentQuestion <em>Additional Legal Document Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.AdditionalLegalDocumentQuestion
	 * @generated
	 */
  public Adapter createAdditionalLegalDocumentQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.RegulatoryComplianceQuestion <em>Regulatory Compliance Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.RegulatoryComplianceQuestion
	 * @generated
	 */
  public Adapter createRegulatoryComplianceQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.EconomyQuestion <em>Economy Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.EconomyQuestion
	 * @generated
	 */
  public Adapter createEconomyQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.MinimumAmountQuestion <em>Minimum Amount Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.MinimumAmountQuestion
	 * @generated
	 */
  public Adapter createMinimumAmountQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ShipmentCostResponsibilityQuestion <em>Shipment Cost Responsibility Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ShipmentCostResponsibilityQuestion
	 * @generated
	 */
  public Adapter createShipmentCostResponsibilityQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ShipmentDetailsQuestion <em>Shipment Details Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ShipmentDetailsQuestion
	 * @generated
	 */
  public Adapter createShipmentDetailsQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.SanitaryControlQuestion <em>Sanitary Control Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.SanitaryControlQuestion
	 * @generated
	 */
  public Adapter createSanitaryControlQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.CustomsQuestion <em>Customs Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.CustomsQuestion
	 * @generated
	 */
  public Adapter createCustomsQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ImportTaxQuestion <em>Import Tax Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ImportTaxQuestion
	 * @generated
	 */
  public Adapter createImportTaxQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.TaxShipmentDetailsQuestion <em>Tax Shipment Details Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.TaxShipmentDetailsQuestion
	 * @generated
	 */
  public Adapter createTaxShipmentDetailsQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.GeographicalQuestion <em>Geographical Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.GeographicalQuestion
	 * @generated
	 */
  public Adapter createGeographicalQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.GeographicalRestrictionQuestion <em>Geographical Restriction Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.GeographicalRestrictionQuestion
	 * @generated
	 */
  public Adapter createGeographicalRestrictionQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.AddressPickupQuestion <em>Address Pickup Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.AddressPickupQuestion
	 * @generated
	 */
  public Adapter createAddressPickupQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.AddressDeliveryQuestion <em>Address Delivery Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.AddressDeliveryQuestion
	 * @generated
	 */
  public Adapter createAddressDeliveryQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ShipmentTrackingNumberQuestion <em>Shipment Tracking Number Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ShipmentTrackingNumberQuestion
	 * @generated
	 */
  public Adapter createShipmentTrackingNumberQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.DangerousLoadQuestion <em>Dangerous Load Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.DangerousLoadQuestion
	 * @generated
	 */
  public Adapter createDangerousLoadQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.SpecialMeasuresQuestion <em>Special Measures Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.SpecialMeasuresQuestion
	 * @generated
	 */
  public Adapter createSpecialMeasuresQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.PerishableQuestion <em>Perishable Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.PerishableQuestion
	 * @generated
	 */
  public Adapter createPerishableQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ExpirationDateQuestion <em>Expiration Date Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ExpirationDateQuestion
	 * @generated
	 */
  public Adapter createExpirationDateQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.CargoTypeQuestion <em>Cargo Type Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.CargoTypeQuestion
	 * @generated
	 */
  public Adapter createCargoTypeQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.CargoWeightQuestion <em>Cargo Weight Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.CargoWeightQuestion
	 * @generated
	 */
  public Adapter createCargoWeightQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.CargoDimensionsQuestion <em>Cargo Dimensions Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.CargoDimensionsQuestion
	 * @generated
	 */
  public Adapter createCargoDimensionsQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.SeaShipmentQuestion <em>Sea Shipment Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.SeaShipmentQuestion
	 * @generated
	 */
  public Adapter createSeaShipmentQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.MaritimeQuestion <em>Maritime Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.MaritimeQuestion
	 * @generated
	 */
  public Adapter createMaritimeQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.VoyageQuestion <em>Voyage Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.VoyageQuestion
	 * @generated
	 */
  public Adapter createVoyageQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.MeansTransportQuestion <em>Means Transport Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.MeansTransportQuestion
	 * @generated
	 */
  public Adapter createMeansTransportQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.CompanyQuestion <em>Company Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.CompanyQuestion
	 * @generated
	 */
  public Adapter createCompanyQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.DeliveryDeadlineQuestion <em>Delivery Deadline Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.DeliveryDeadlineQuestion
	 * @generated
	 */
  public Adapter createDeliveryDeadlineQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.UpdatesAndMonitoringQuestion <em>Updates And Monitoring Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.UpdatesAndMonitoringQuestion
	 * @generated
	 */
  public Adapter createUpdatesAndMonitoringQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ExternalMediatorQuestion <em>External Mediator Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ExternalMediatorQuestion
	 * @generated
	 */
  public Adapter createExternalMediatorQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.MediatorNameQuestion <em>Mediator Name Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.MediatorNameQuestion
	 * @generated
	 */
  public Adapter createMediatorNameQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ShipmentInsuranceQuestion <em>Shipment Insurance Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ShipmentInsuranceQuestion
	 * @generated
	 */
  public Adapter createShipmentInsuranceQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.InsuranceDetailsQuestion <em>Insurance Details Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.InsuranceDetailsQuestion
	 * @generated
	 */
  public Adapter createInsuranceDetailsQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ReturnsOrCancellationsQuestion <em>Returns Or Cancellations Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ReturnsOrCancellationsQuestion
	 * @generated
	 */
  public Adapter createReturnsOrCancellationsQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ReturnsManagementQuestion <em>Returns Management Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ReturnsManagementQuestion
	 * @generated
	 */
  public Adapter createReturnsManagementQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.PenaltyForNeglectQuestion <em>Penalty For Neglect Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.PenaltyForNeglectQuestion
	 * @generated
	 */
  public Adapter createPenaltyForNeglectQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.AgreedPriceQuestion <em>Agreed Price Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.AgreedPriceQuestion
	 * @generated
	 */
  public Adapter createAgreedPriceQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ProductQualityQuestion <em>Product Quality Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ProductQualityQuestion
	 * @generated
	 */
  public Adapter createProductQualityQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.ExpectedQualityQuestion <em>Expected Quality Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.ExpectedQualityQuestion
	 * @generated
	 */
  public Adapter createExpectedQualityQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.InternationalSealQuestion <em>International Seal Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.InternationalSealQuestion
	 * @generated
	 */
  public Adapter createInternationalSealQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.InternacionalSealNameQuestion <em>Internacional Seal Name Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.InternacionalSealNameQuestion
	 * @generated
	 */
  public Adapter createInternacionalSealNameQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.HealthInspectionQuestion <em>Health Inspection Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.HealthInspectionQuestion
	 * @generated
	 */
  public Adapter createHealthInspectionQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.InspectionResultQuestion <em>Inspection Result Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.InspectionResultQuestion
	 * @generated
	 */
  public Adapter createInspectionResultQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for an object of class '{@link org.xtext.smaCQA.StorageConditionsQuestion <em>Storage Conditions Question</em>}'.
	 * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @see org.xtext.smaCQA.StorageConditionsQuestion
	 * @generated
	 */
  public Adapter createStorageConditionsQuestionAdapter()
  {
		return null;
	}

  /**
	 * Creates a new adapter for the default case.
	 * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
	 * @return the new adapter.
	 * @generated
	 */
  public Adapter createEObjectAdapter()
  {
		return null;
	}

} //SmaCQAAdapterFactory
