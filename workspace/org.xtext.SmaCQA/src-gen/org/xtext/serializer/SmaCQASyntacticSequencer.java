/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.services.SmaCQAGrammarAccess;

@SuppressWarnings("all")
public class SmaCQASyntacticSequencer extends AbstractSyntacticSequencer {

	protected SmaCQAGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ValueExchange_EOLINETerminalRuleCall_10_1_q;
	protected AbstractElementAlias match_ValueExchange_EOLINETerminalRuleCall_11_1_q;
	protected AbstractElementAlias match_ValueExchange_EOLINETerminalRuleCall_12_1_q;
	protected AbstractElementAlias match_ValueExchange_EOLINETerminalRuleCall_13_1_q;
	protected AbstractElementAlias match_ValueExchange_EOLINETerminalRuleCall_7_q;
	protected AbstractElementAlias match_ValueExchange_EOLINETerminalRuleCall_8_1_q;
	protected AbstractElementAlias match_ValueExchange_EOLINETerminalRuleCall_9_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SmaCQAGrammarAccess) access;
		match_ValueExchange_EOLINETerminalRuleCall_10_1_q = new TokenAlias(false, true, grammarAccess.getValueExchangeAccess().getEOLINETerminalRuleCall_10_1());
		match_ValueExchange_EOLINETerminalRuleCall_11_1_q = new TokenAlias(false, true, grammarAccess.getValueExchangeAccess().getEOLINETerminalRuleCall_11_1());
		match_ValueExchange_EOLINETerminalRuleCall_12_1_q = new TokenAlias(false, true, grammarAccess.getValueExchangeAccess().getEOLINETerminalRuleCall_12_1());
		match_ValueExchange_EOLINETerminalRuleCall_13_1_q = new TokenAlias(false, true, grammarAccess.getValueExchangeAccess().getEOLINETerminalRuleCall_13_1());
		match_ValueExchange_EOLINETerminalRuleCall_7_q = new TokenAlias(false, true, grammarAccess.getValueExchangeAccess().getEOLINETerminalRuleCall_7());
		match_ValueExchange_EOLINETerminalRuleCall_8_1_q = new TokenAlias(false, true, grammarAccess.getValueExchangeAccess().getEOLINETerminalRuleCall_8_1());
		match_ValueExchange_EOLINETerminalRuleCall_9_1_q = new TokenAlias(false, true, grammarAccess.getValueExchangeAccess().getEOLINETerminalRuleCall_9_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getEOLINERule())
			return getEOLINEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal EOLINE returns ecore::EString:
	 * 	"/n"
	 * ;
	 */
	protected String getEOLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "/n";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ValueExchange_EOLINETerminalRuleCall_10_1_q.equals(syntax))
				emit_ValueExchange_EOLINETerminalRuleCall_10_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueExchange_EOLINETerminalRuleCall_11_1_q.equals(syntax))
				emit_ValueExchange_EOLINETerminalRuleCall_11_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueExchange_EOLINETerminalRuleCall_12_1_q.equals(syntax))
				emit_ValueExchange_EOLINETerminalRuleCall_12_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueExchange_EOLINETerminalRuleCall_13_1_q.equals(syntax))
				emit_ValueExchange_EOLINETerminalRuleCall_13_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueExchange_EOLINETerminalRuleCall_7_q.equals(syntax))
				emit_ValueExchange_EOLINETerminalRuleCall_7_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueExchange_EOLINETerminalRuleCall_8_1_q.equals(syntax))
				emit_ValueExchange_EOLINETerminalRuleCall_8_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ValueExchange_EOLINETerminalRuleCall_9_1_q.equals(syntax))
				emit_ValueExchange_EOLINETerminalRuleCall_9_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     EOLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     dataQuestion=DataQuestion '--------- 3.Economy Questions: -----------' (ambiguity) economyQuestion=EconomyQuestion
	 *     legalQuestion=LegalQuestion '--------- 3.Economy Questions: -----------' (ambiguity) economyQuestion=EconomyQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' EOLINE? '--------- 3.Economy Questions: -----------' (ambiguity) economyQuestion=EconomyQuestion
	 */
	protected void emit_ValueExchange_EOLINETerminalRuleCall_10_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EOLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     dataQuestion=DataQuestion '--------- 4. Shipment Questions:-----------' (ambiguity) shipmentQuestion=ShipmentQuestion
	 *     economyQuestion=EconomyQuestion '--------- 4. Shipment Questions:-----------' (ambiguity) shipmentQuestion=ShipmentQuestion
	 *     legalQuestion=LegalQuestion '--------- 4. Shipment Questions:-----------' (ambiguity) shipmentQuestion=ShipmentQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' EOLINE? '--------- 4. Shipment Questions:-----------' (ambiguity) shipmentQuestion=ShipmentQuestion
	 */
	protected void emit_ValueExchange_EOLINETerminalRuleCall_11_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EOLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     dataQuestion=DataQuestion '--------- 5. Insurance shipment Questions:-----------' (ambiguity) insuranceQuestion=InsuranceQuestion
	 *     economyQuestion=EconomyQuestion '--------- 5. Insurance shipment Questions:-----------' (ambiguity) insuranceQuestion=InsuranceQuestion
	 *     legalQuestion=LegalQuestion '--------- 5. Insurance shipment Questions:-----------' (ambiguity) insuranceQuestion=InsuranceQuestion
	 *     shipmentQuestion=ShipmentQuestion '--------- 5. Insurance shipment Questions:-----------' (ambiguity) insuranceQuestion=InsuranceQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' EOLINE? '--------- 5. Insurance shipment Questions:-----------' (ambiguity) insuranceQuestion=InsuranceQuestion
	 */
	protected void emit_ValueExchange_EOLINETerminalRuleCall_12_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EOLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     dataQuestion=DataQuestion '--------- 6. Alimentary Cargo Questions:-----------' (ambiguity) alimentaryQuestion=AlimentaryQuestion
	 *     economyQuestion=EconomyQuestion '--------- 6. Alimentary Cargo Questions:-----------' (ambiguity) alimentaryQuestion=AlimentaryQuestion
	 *     insuranceQuestion=InsuranceQuestion '--------- 6. Alimentary Cargo Questions:-----------' (ambiguity) alimentaryQuestion=AlimentaryQuestion
	 *     legalQuestion=LegalQuestion '--------- 6. Alimentary Cargo Questions:-----------' (ambiguity) alimentaryQuestion=AlimentaryQuestion
	 *     shipmentQuestion=ShipmentQuestion '--------- 6. Alimentary Cargo Questions:-----------' (ambiguity) alimentaryQuestion=AlimentaryQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' EOLINE? '--------- 6. Alimentary Cargo Questions:-----------' (ambiguity) alimentaryQuestion=AlimentaryQuestion
	 */
	protected void emit_ValueExchange_EOLINETerminalRuleCall_13_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EOLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     valueObject=ID 'has the following associated questions and answers: ' (ambiguity) '--------- 1.Data Questions: -----------' EOLINE? dataQuestion=DataQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' (ambiguity) '--------- 2.Legal Questions: -----------' EOLINE? legalQuestion=LegalQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' (ambiguity) '--------- 3.Economy Questions: -----------' EOLINE? economyQuestion=EconomyQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' (ambiguity) '--------- 4. Shipment Questions:-----------' EOLINE? shipmentQuestion=ShipmentQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' (ambiguity) '--------- 5. Insurance shipment Questions:-----------' EOLINE? insuranceQuestion=InsuranceQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' (ambiguity) '--------- 6. Alimentary Cargo Questions:-----------' EOLINE? alimentaryQuestion=AlimentaryQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' (ambiguity) '================= Completion of the question process for this value exchange =================' (rule end)
	 */
	protected void emit_ValueExchange_EOLINETerminalRuleCall_7_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EOLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     valueObject=ID 'has the following associated questions and answers: ' EOLINE? '--------- 1.Data Questions: -----------' (ambiguity) dataQuestion=DataQuestion
	 */
	protected void emit_ValueExchange_EOLINETerminalRuleCall_8_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     EOLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     dataQuestion=DataQuestion '--------- 2.Legal Questions: -----------' (ambiguity) legalQuestion=LegalQuestion
	 *     valueObject=ID 'has the following associated questions and answers: ' EOLINE? '--------- 2.Legal Questions: -----------' (ambiguity) legalQuestion=LegalQuestion
	 */
	protected void emit_ValueExchange_EOLINETerminalRuleCall_9_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
