/*
 * generated by Xtext 2.12.0
 */
package org.xtext.ui.labeling

import com.google.inject.Inject
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.xtext.smaCQA.impl.ValueExchangeImpl
import org.xtext.smaCQA.impl.AgeQuestionImpl
import org.xtext.smaCQA.impl.TaxQuestionImpl
import org.xtext.smaCQA.impl.EconomyQuestionImpl
import org.xtext.smaCQA.impl.MinimumAmountQuestionImpl
import org.xtext.smaCQA.impl.RepeatValueExchangeQuestionImpl
import org.xtext.smaCQA.impl.TimeValueExchangeDurationQuestionImpl
import org.xtext.smaCQA.impl.ConditionsValueExchangeQuestionImpl
import org.xtext.smaCQA.TokenERC20
import org.xtext.smaCQA.TokenERC223
import org.xtext.smaCQA.impl.DataRegisterImpl
import org.xtext.smaCQA.impl.TimeStartValueExchangeQuestionImpl
import org.xtext.smaCQA.ValueObjectTokenQuestion
import org.xtext.smaCQA.impl.ValueObjectTokenQuestionImpl
import org.xtext.smaCQA.impl.ValueObjectTangibleQuestionImpl
import org.xtext.smaCQA.TokenERC721
import org.xtext.smaCQA.impl.ShipmentDetailsQuestionImpl
import org.xtext.smaCQA.impl.SanitaryControlQuestionImpl
import org.xtext.smaCQA.impl.CustomsQuestionImpl
import org.xtext.smaCQA.impl.ImportTaxQuestionImpl
import org.xtext.smaCQA.impl.GeographicalQuestionImpl
import org.xtext.smaCQA.impl.AddressPickupQuestionImpl
import org.xtext.smaCQA.impl.AddressDeliveryQuestionImpl
import org.xtext.smaCQA.impl.ShipmentTrackingNumberQuestionImpl
import org.xtext.smaCQA.impl.DangerousLoadQuestionImpl
import org.xtext.smaCQA.impl.PerishableQuestionImpl
import org.xtext.smaCQA.impl.CargoWeightQuestionImpl
import org.xtext.smaCQA.impl.CargoTypeQuestionImpl
import org.xtext.smaCQA.impl.CargoDimensionsQuestionImpl
import org.xtext.smaCQA.impl.SeaShipmentQuestionImpl
import org.xtext.smaCQA.impl.MeansTransportQuestionImpl
import org.xtext.smaCQA.impl.DeliveryDeadlineQuestionImpl
import org.xtext.smaCQA.impl.CompanyQuestionImpl
import org.xtext.smaCQA.impl.UpdatesAndMonitoringQuestionImpl
import org.xtext.smaCQA.impl.ExternalMediatorQuestionImpl
import org.xtext.smaCQA.impl.ShipmentInsuranceQuestionImpl
import org.xtext.smaCQA.impl.InsuranceDetailsQuestionImpl
import org.xtext.smaCQA.impl.ReturnsOrCancellationsQuestionImpl
import org.xtext.smaCQA.impl.PenaltyForNeglectQuestionImpl
import org.xtext.smaCQA.impl.AgreedPriceQuestionImpl
import org.xtext.smaCQA.impl.ProductQualityQuestionImpl
import org.xtext.smaCQA.impl.InternationalSealQuestionImpl
import org.xtext.smaCQA.impl.HealthInspectionQuestionImpl
import org.xtext.smaCQA.impl.StorageConditionsQuestionImpl
import org.xtext.smaCQA.impl.MaritimeQuestionImpl
import org.xtext.smaCQA.impl.ExpectedQualityQuestionImpl

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class SmaCQALabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	// Labels and icons can be computed like this:	
	
    //Labels added for the SmaCQA expansion question
    //4.1
    def text(ShipmentDetailsQuestionImpl shipmentDetailsQuestionImpl){
        "Shipment Details Question: " + shipmentDetailsQuestionImpl.name+ " -> " + shipmentDetailsQuestionImpl.answer.toString 
    }
	//4.2
    def text(SanitaryControlQuestionImpl sanitaryControlQuestionImpl){
        "Sanitary Control Question: " + sanitaryControlQuestionImpl.name+ " -> " + sanitaryControlQuestionImpl.answer.toString 
    }
	//4.3
    def text(CustomsQuestionImpl customsQuestionmpl){
        "Customs Question: " + customsQuestionmpl.name+ " -> " + customsQuestionmpl.answer.toString
    }
	//4.4=>4.4.1
    def text(ImportTaxQuestionImpl importTaxQuestionImpl){
	    var s="Import Tax Question: " + importTaxQuestionImpl.name+ " -> " + importTaxQuestionImpl.answer.toString 
	    if(importTaxQuestionImpl.subSentence !== null &&importTaxQuestionImpl.subSentence.name.toString.length>5)
	    	s+=" (Amount: "+importTaxQuestionImpl.subSentence.answer +" "+importTaxQuestionImpl.subSentence.answerUnitCoin.literal+")"
	   	s.toString
    }

	/*
	
	means=MeansTransportQuestion?
	company=CompanyQuestion
	deliveryDeadline = DeliveryDeadlineQuestion?
	updatesAndMonitoring = UpdatesAndMonitoringQuestion?
	externalMediator = ExternalMediatorQuestion?*/
	
	//4.5=>4.5.1
    def text(GeographicalQuestionImpl geographicalQuestionImpl){
        var s="Geographic Restriction Question: " + geographicalQuestionImpl.name+ " -> " + geographicalQuestionImpl.answer.toString 
        if(geographicalQuestionImpl.subSentenceRestriction !== null && geographicalQuestionImpl.subSentenceRestriction.name.toString.length>5)
	    	s+=" (Restriction: "+geographicalQuestionImpl.subSentenceRestriction.answer.toString+")"
	   	s.toString
    }
	
	//4.6
    def text(AddressPickupQuestionImpl addressPickupQuestionImpl){
        "Address Pickup Question: " + addressPickupQuestionImpl.name+ " -> " + addressPickupQuestionImpl.answer.toString 
    }
    //4.7
	def text(AddressDeliveryQuestionImpl addressDeliveryQuestionImpl){
        "Address Delivery Question: " + addressDeliveryQuestionImpl.name+ " -> " + addressDeliveryQuestionImpl.answer.toString 
    }
    //4.8
	def text(ShipmentTrackingNumberQuestionImpl shipmentTrackingNumberQuestionImpl){
        "Shipment Tracking Number Question: " + shipmentTrackingNumberQuestionImpl.name+ " -> " + shipmentTrackingNumberQuestionImpl.answer.toString
    }
    
    
    //4.9=>4.9.1
	def text(DangerousLoadQuestionImpl dangerousLoadQuestionImpl){
        var s="Dangerous Load Question: " + dangerousLoadQuestionImpl.name+ " -> " + dangerousLoadQuestionImpl.answer.toString
         if(dangerousLoadQuestionImpl.subSentenceSpecialMeasures !== null && dangerousLoadQuestionImpl.subSentenceSpecialMeasures.name.toString.length>5)
	    	s+=" (Special Measure: "+dangerousLoadQuestionImpl.subSentenceSpecialMeasures.answer.toString+")"
	   	s.toString
    }
    //4.10=>4.10.1
	def text(PerishableQuestionImpl perishableQuestionImpl){
        var s="Perishable Question : " + perishableQuestionImpl.name+ " -> " + perishableQuestionImpl.answer.toString
         if(perishableQuestionImpl.subSentencePerishable !== null && perishableQuestionImpl.subSentencePerishable.name.toString.length>5 )
	    	s+=" (Expiration Date Question: "+perishableQuestionImpl.subSentencePerishable.answer.toString+")"
	   	s.toString
    }
    
    
    //4.11
	def text(CargoTypeQuestionImpl cargoTypeQuestion){
        "Cargo Type Question: " + cargoTypeQuestion.name+ " -> " + cargoTypeQuestion.answer.toString
    }
    //4.12
	def text(CargoWeightQuestionImpl cargoWeightQuestionImpl){
        "Cargo Weight Question: " + cargoWeightQuestionImpl.name+ " -> " + cargoWeightQuestionImpl.answer.toString
    }
    //4.13
	def text(CargoDimensionsQuestionImpl cargoDimensionsQuestionImpl){
        "Cargo Dimensions Question: " + cargoDimensionsQuestionImpl.name+ " -> " + cargoDimensionsQuestionImpl.length.toString+" cm " + cargoDimensionsQuestionImpl.width.toString+" cm" + cargoDimensionsQuestionImpl.depth.toString+" cm"
    }
    
    //ESTO FALLA TIENEN QUE ESTAR TODAS LAS SUBPREGUNTAS PARA QUE SALGA LA PRINCIPAL Y LUEGO NO SALEN LAS SUB PREGUNTAS
     //4.14=>4.14.1  14.4.2  14.4.3  14.4.4  14.4.4.1
	def text(SeaShipmentQuestionImpl seaShipmentQuestionImpl){
        var s="Sea Shipment Question: " + seaShipmentQuestionImpl.name+ " -> " + seaShipmentQuestionImpl.answer.toString
  
	   	s.toString
    }
    def text(MaritimeQuestionImpl maritimeQuestionImpl){
    	var s=""
		if(maritimeQuestionImpl.q1.toString.length>5 )
	    	s+="(Origin Port: "+maritimeQuestionImpl.answer1.toString+")"
	    if(maritimeQuestionImpl.q2.toString.length>5)
	    	s+=" (Destiny Port: "+maritimeQuestionImpl.answer2.toString+")"
	    if(maritimeQuestionImpl.q3.toString.length>5)
	    	s+=" (Agent Port Key Decisions Question: "+maritimeQuestionImpl.answer3.toString+")"
	    if(maritimeQuestionImpl.q4.toString.length>5){
	    	s+=" (Voyage Type Decisions: "+maritimeQuestionImpl.answer4.toString+")"
	    if(maritimeQuestionImpl.subSentence !== null)
	    	s+=" ->How long: "+maritimeQuestionImpl.subSentence.answerSubSentence.toString+" "+maritimeQuestionImpl.subSentence.answerUnitTime.literal+")"
	    }
		 s.toString
    }
    

	//4.15
	def text(MeansTransportQuestionImpl meansTransportQuestionImpl){
        "Means  Transport Question: " + meansTransportQuestionImpl.name+ " -> " + meansTransportQuestionImpl.answer.toString       
      }
    //4.16
	def text(CompanyQuestionImpl companyeQuestionImpl){
        "Company Name  Question: " + companyeQuestionImpl.name+ " -> " + companyeQuestionImpl.answer.toString       
      }
    //4.17
	def text(DeliveryDeadlineQuestionImpl deliveryDeadlineQuestionImpl){
        "Delivery Deadline Question: " + deliveryDeadlineQuestionImpl.name+ " -> " + deliveryDeadlineQuestionImpl.answer.toString       
      }
    //4.18
	def text(UpdatesAndMonitoringQuestionImpl updatesAndMonitoringQuestionImpl){
        "Updates & Monitoring Question: " + updatesAndMonitoringQuestionImpl.name+ " -> " + updatesAndMonitoringQuestionImpl.answer.toString       
      }
    //4.19=>4.19.1
	def text(ExternalMediatorQuestionImpl externalMeditorQuestionImpl){
         var s="External Mediator Question : " + externalMeditorQuestionImpl.name+ " -> " + externalMeditorQuestionImpl.answer.toString
         if(externalMeditorQuestionImpl.subsentence !== null && externalMeditorQuestionImpl.subsentence.name.toString.length>5 )
	    	s+=" (External Mediator Name: "+externalMeditorQuestionImpl.subsentence.answer.toString+")"
	   	s.toString
    }
    //Insurance Questions
    //5.1=>5.1.1  ,5.1.2,  5.1.3
	def text(ShipmentInsuranceQuestionImpl shipmentInsuranceQuestionImpl){
         var s="Shipment Insurance Question : " + shipmentInsuranceQuestionImpl.name+ " -> " + shipmentInsuranceQuestionImpl.answer.toString
        s.toString    
    }
     //5.1.1  ,5.1.2,  5.1.3
	def text(InsuranceDetailsQuestionImpl insuranceDetailsQuestionImpl){
    	var s=""
		if(insuranceDetailsQuestionImpl.q1.toString.length>5 )
	    	s+="(Insurance Cost : "+insuranceDetailsQuestionImpl.answer1.toString+" "+insuranceDetailsQuestionImpl.answerUnitCoin1.literal+")"
	    if(insuranceDetailsQuestionImpl.q2.toString.length>5)
	    	s+=" (Insurance clauses : "+insuranceDetailsQuestionImpl.answer2.toString+")"
	    if(insuranceDetailsQuestionImpl.q3.toString.length>5)
	    	s+="(Refund  : "+insuranceDetailsQuestionImpl.answer3.toString+" "+insuranceDetailsQuestionImpl.answerUnitCoin3.literal+")"
		 s.toString	     
    }
    
    //5.2=>5.2.1
    def text(ReturnsOrCancellationsQuestionImpl returnsOrCancellationsQuestionImpl){
         var s="Returns & Cancellations Question : " + returnsOrCancellationsQuestionImpl.name+ " -> " + returnsOrCancellationsQuestionImpl.answer.toString
         if(returnsOrCancellationsQuestionImpl.subsentence !== null && returnsOrCancellationsQuestionImpl.subsentence.name.toString.length>5 )
	    	s+=" (Management: "+returnsOrCancellationsQuestionImpl.subsentence.answer.toString+")"
	   	s.toString
    }
    //5.3
    def text(PenaltyForNeglectQuestionImpl penaltyForNeglectQuestionImpl){
        "Penalty For Neglect Question : " + penaltyForNeglectQuestionImpl.name+ " -> " + penaltyForNeglectQuestionImpl.answer.toString
    }
    //Alimentary Cargo Questions
    //6.1
    def text(AgreedPriceQuestionImpl agreedPriceQuestionImpl){
        "Agreed Price Per Unit Question : " + agreedPriceQuestionImpl.name+ " -> " + agreedPriceQuestionImpl.answer.toString
    } 
    //6.2=>6.2.1  ,6.2.2
	def text(ProductQualityQuestionImpl productQualityQuestionImpl){
         var s="Product Quality Question : " + productQualityQuestionImpl.name+ " -> " + productQualityQuestionImpl.answer.toString
         if(productQualityQuestionImpl.expectedQuality !== null){
	    		s+="\n (Insurance Cost : "+productQualityQuestionImpl.expectedQuality.answer1.toString+") (Insurance clauses : "+productQualityQuestionImpl.expectedQuality.answer2.toString+")\r\n"
	    	
         }
         s.toString
        
    }   
    def text(ExpectedQualityQuestionImpl expectedQualityQuestionImpl){
    	var s=""
    	if(expectedQualityQuestionImpl.q1.toString.length>5 )
	    	s+="(How would be determined  : "+expectedQualityQuestionImpl.answer1.toString+")"
	    if(expectedQualityQuestionImpl.q2.toString.length>5)
	    	s+=" (Consequences : "+expectedQualityQuestionImpl.answer2.toString+")"
	   
    	
    	s.toString
    }
    //6.3=>6.3.1
    def text(InternationalSealQuestionImpl internationalSealQuestionImpl){
        var s="International Seal Question : " + internationalSealQuestionImpl.name+ " -> " + internationalSealQuestionImpl.answer.toString
        if(internationalSealQuestionImpl.subsentence !== null && internationalSealQuestionImpl.subsentence.name.toString.length>5 )
	    	s+=" (Seal Name: "+internationalSealQuestionImpl.subsentence.answer.toString+")"
	   	s.toString
    }      
	
    //6.4=>6.4.1
    def text(HealthInspectionQuestionImpl healthInspectionQuestionImpl){
        var s="Health Inspection Question : " + healthInspectionQuestionImpl.name+ " -> " + healthInspectionQuestionImpl.answer.toString
        if(healthInspectionQuestionImpl.subsentence !== null && healthInspectionQuestionImpl.subsentence.name.toString.length>5 )
	    	s+=" (Result: "+healthInspectionQuestionImpl.subsentence.answer.toString+")"
	   	s.toString
    }      
    //6.5
    def text(StorageConditionsQuestionImpl storageConditionsQuestionImpl){
        "Storage Conditions Question : " + storageConditionsQuestionImpl.name+ " -> " + storageConditionsQuestionImpl.answer.toString
    } 
//Fin de la parte de la expansion de preguntas



	def text(ValueExchangeImpl valueExchange) {
		"Value Exchange: " + valueExchange.actorSend " -> " + valueExchange.actorReceipt + " (Value Object: " + valueExchange.valueObject + ")"
	}
	
	
	def text(TimeValueExchangeDurationQuestionImpl  timeValueExchangeQuestionImpl) {
		"Time Value Exchange Question: " + timeValueExchangeQuestionImpl.name +  " -> " + timeValueExchangeQuestionImpl.answer.toString + " " + timeValueExchangeQuestionImpl.answerUnitTime.literal
	}
	
	def text(TimeStartValueExchangeQuestionImpl  timeValueExchangeQuestionImpl) {
		"Time Start Value Exchange Question: " + timeValueExchangeQuestionImpl.name +  " -> " + timeValueExchangeQuestionImpl.answer.toString + " " + timeValueExchangeQuestionImpl.answerUnitTime.literal
	}
	
	def text(ConditionsValueExchangeQuestionImpl  conditionsValueExchangeQuestionImpl) {
		"Condition Value Exchange Question: " + conditionsValueExchangeQuestionImpl.name +  " -> " + conditionsValueExchangeQuestionImpl.answer.toString 
	}
	
	def text(RepeatValueExchangeQuestionImpl  repeatValueExchangeQuestionImpl) {
		"Repeat Value Exchange Question: " + repeatValueExchangeQuestionImpl.name +  " -> " + repeatValueExchangeQuestionImpl.answer.toString 
	}
	
	def text(AgeQuestionImpl ageQuestionImpl) {
		"Age Question: " + ageQuestionImpl.name +  " -> " + ageQuestionImpl.answer.toString
	}
	
	def text(TaxQuestionImpl taxQuestionImpl) {
		"Tax Question: " + taxQuestionImpl.name +  " -> " + taxQuestionImpl.answer.toString + "(Collected by: " + taxQuestionImpl.answerSubSentence.toString + ")"
	}
	
	def text(MinimumAmountQuestionImpl minimumAmountQuestionImpl) {
		"Minimum Amount Question: " + minimumAmountQuestionImpl.name +  " -> " + minimumAmountQuestionImpl.answer.toString 
	}
	
	def text(ValueObjectTokenQuestionImpl tokenQuestion) {
		"Token Question: " + tokenQuestion.name;
	}
	
	def text(ValueObjectTangibleQuestionImpl tokenQuestion) {
		"Value Object Tangible Question: " + tokenQuestion.name;
	}
	
	def text(TokenERC20 erc20){
		if(erc20.answerMintSentence.equals("yes")){
		"Token ERC20 name: " + erc20.name + ", symbol: " + erc20.symbol + " decimals: " + erc20.decimals + " supply: " + erc20.supply + "(Minted:yes)"
		}
		else{
		"Token ERC20 name: " + erc20.name + ", symbol: " + erc20.symbol + " decimals: " + erc20.decimals + " supply: " + erc20.supply + "(Minted:no)"			
		}
	}
	
	def text(TokenERC223 erc223){
		if(erc223.answerMintSentence.equals("yes")){
		"Token ERC223 name: " + erc223.name + ", symbol: " + erc223.symbol + " decimals: " + erc223.decimals + " supply: " + erc223.supply + "(Minted:yes)"
		}
		else{
		"Token ERC223 name: " + erc223.name + ", symbol: " + erc223.symbol + " decimals: " + erc223.decimals + " supply: " + erc223.supply	+ "(Minted:no)"
		}
	}
	
	def text(TokenERC721 erc721){
		if(erc721.answerMetadataSentence.equals("yes")){
		"Token ERC721 name: " + erc721.name + ", symbol: " + erc721.symbol  + " supply: " + erc721.supply + "(Uri Storage:yes)"
		}
		else{
		"Token ERC721 name: " + erc721.name + ", symbol: " + erc721.symbol  + " supply: " + erc721.supply + "(Uri Storage:no)"	
		}
	}
//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}

