/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.smaCQA.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.smaCQA.EconomyQuestion;
import org.xtext.smaCQA.MinimumAmountQuestion;
import org.xtext.smaCQA.ShipmentCostResponsibilityQuestion;
import org.xtext.smaCQA.SmaCQAPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Economy Question</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaCQA.impl.EconomyQuestionImpl#getMinimumAmountQuestion <em>Minimum Amount Question</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.EconomyQuestionImpl#getShipmentCostResponsibility <em>Shipment Cost Responsibility</em>}</li>
 * </ul>
 *
 * @generated
 */
public class EconomyQuestionImpl extends MinimalEObjectImpl.Container implements EconomyQuestion
{
  /**
	 * The cached value of the '{@link #getMinimumAmountQuestion() <em>Minimum Amount Question</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getMinimumAmountQuestion()
	 * @generated
	 * @ordered
	 */
  protected MinimumAmountQuestion minimumAmountQuestion;

  /**
	 * The cached value of the '{@link #getShipmentCostResponsibility() <em>Shipment Cost Responsibility</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getShipmentCostResponsibility()
	 * @generated
	 * @ordered
	 */
  protected ShipmentCostResponsibilityQuestion shipmentCostResponsibility;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected EconomyQuestionImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return SmaCQAPackage.Literals.ECONOMY_QUESTION;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public MinimumAmountQuestion getMinimumAmountQuestion()
  {
		return minimumAmountQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetMinimumAmountQuestion(MinimumAmountQuestion newMinimumAmountQuestion, NotificationChain msgs)
  {
		MinimumAmountQuestion oldMinimumAmountQuestion = minimumAmountQuestion;
		minimumAmountQuestion = newMinimumAmountQuestion;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION, oldMinimumAmountQuestion, newMinimumAmountQuestion);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setMinimumAmountQuestion(MinimumAmountQuestion newMinimumAmountQuestion)
  {
		if (newMinimumAmountQuestion != minimumAmountQuestion) {
			NotificationChain msgs = null;
			if (minimumAmountQuestion != null)
				msgs = ((InternalEObject)minimumAmountQuestion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION, null, msgs);
			if (newMinimumAmountQuestion != null)
				msgs = ((InternalEObject)newMinimumAmountQuestion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION, null, msgs);
			msgs = basicSetMinimumAmountQuestion(newMinimumAmountQuestion, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION, newMinimumAmountQuestion, newMinimumAmountQuestion));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ShipmentCostResponsibilityQuestion getShipmentCostResponsibility()
  {
		return shipmentCostResponsibility;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetShipmentCostResponsibility(ShipmentCostResponsibilityQuestion newShipmentCostResponsibility, NotificationChain msgs)
  {
		ShipmentCostResponsibilityQuestion oldShipmentCostResponsibility = shipmentCostResponsibility;
		shipmentCostResponsibility = newShipmentCostResponsibility;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY, oldShipmentCostResponsibility, newShipmentCostResponsibility);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setShipmentCostResponsibility(ShipmentCostResponsibilityQuestion newShipmentCostResponsibility)
  {
		if (newShipmentCostResponsibility != shipmentCostResponsibility) {
			NotificationChain msgs = null;
			if (shipmentCostResponsibility != null)
				msgs = ((InternalEObject)shipmentCostResponsibility).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY, null, msgs);
			if (newShipmentCostResponsibility != null)
				msgs = ((InternalEObject)newShipmentCostResponsibility).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY, null, msgs);
			msgs = basicSetShipmentCostResponsibility(newShipmentCostResponsibility, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY, newShipmentCostResponsibility, newShipmentCostResponsibility));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION:
				return basicSetMinimumAmountQuestion(null, msgs);
			case SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY:
				return basicSetShipmentCostResponsibility(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION:
				return getMinimumAmountQuestion();
			case SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY:
				return getShipmentCostResponsibility();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION:
				setMinimumAmountQuestion((MinimumAmountQuestion)newValue);
				return;
			case SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY:
				setShipmentCostResponsibility((ShipmentCostResponsibilityQuestion)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION:
				setMinimumAmountQuestion((MinimumAmountQuestion)null);
				return;
			case SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY:
				setShipmentCostResponsibility((ShipmentCostResponsibilityQuestion)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.ECONOMY_QUESTION__MINIMUM_AMOUNT_QUESTION:
				return minimumAmountQuestion != null;
			case SmaCQAPackage.ECONOMY_QUESTION__SHIPMENT_COST_RESPONSIBILITY:
				return shipmentCostResponsibility != null;
		}
		return super.eIsSet(featureID);
	}

} //EconomyQuestionImpl
