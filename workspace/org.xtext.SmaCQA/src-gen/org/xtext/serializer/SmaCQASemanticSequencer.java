/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.services.SmaCQAGrammarAccess;
import org.xtext.smaCQA.AdditionalLegalDocumentQuestion;
import org.xtext.smaCQA.AddressDeliveryQuestion;
import org.xtext.smaCQA.AddressPickupQuestion;
import org.xtext.smaCQA.AgeQuestion;
import org.xtext.smaCQA.AgreedPriceQuestion;
import org.xtext.smaCQA.AlimentaryQuestion;
import org.xtext.smaCQA.CargoDimensionsQuestion;
import org.xtext.smaCQA.CargoTypeQuestion;
import org.xtext.smaCQA.CargoWeightQuestion;
import org.xtext.smaCQA.CompanyQuestion;
import org.xtext.smaCQA.ConditionsValueExchangeQuestion;
import org.xtext.smaCQA.CustomsQuestion;
import org.xtext.smaCQA.DangerousLoadQuestion;
import org.xtext.smaCQA.DataQuestion;
import org.xtext.smaCQA.DataRegister;
import org.xtext.smaCQA.DeliveryDeadlineQuestion;
import org.xtext.smaCQA.EconomyQuestion;
import org.xtext.smaCQA.ExpectedQualityQuestion;
import org.xtext.smaCQA.ExpirationDateQuestion;
import org.xtext.smaCQA.ExternalMediatorQuestion;
import org.xtext.smaCQA.GeographicalQuestion;
import org.xtext.smaCQA.GeographicalRestrictionQuestion;
import org.xtext.smaCQA.HealthInspectionQuestion;
import org.xtext.smaCQA.ImportTaxQuestion;
import org.xtext.smaCQA.InspectionResultQuestion;
import org.xtext.smaCQA.InsuranceDetailsQuestion;
import org.xtext.smaCQA.InsuranceQuestion;
import org.xtext.smaCQA.InternacionalSealNameQuestion;
import org.xtext.smaCQA.InternationalSealQuestion;
import org.xtext.smaCQA.LegalQuestion;
import org.xtext.smaCQA.MaritimeQuestion;
import org.xtext.smaCQA.MeansTransportQuestion;
import org.xtext.smaCQA.MediatorNameQuestion;
import org.xtext.smaCQA.MinimumAmountQuestion;
import org.xtext.smaCQA.Model;
import org.xtext.smaCQA.PenaltyForNeglectQuestion;
import org.xtext.smaCQA.PerishableQuestion;
import org.xtext.smaCQA.ProductQualityQuestion;
import org.xtext.smaCQA.RegulatoryComplianceQuestion;
import org.xtext.smaCQA.RepeatValueExchangeQuestion;
import org.xtext.smaCQA.ReturnsManagementQuestion;
import org.xtext.smaCQA.ReturnsOrCancellationsQuestion;
import org.xtext.smaCQA.SanitaryControlQuestion;
import org.xtext.smaCQA.SeaShipmentQuestion;
import org.xtext.smaCQA.ShipmentCostResponsibilityQuestion;
import org.xtext.smaCQA.ShipmentDetailsQuestion;
import org.xtext.smaCQA.ShipmentInsuranceQuestion;
import org.xtext.smaCQA.ShipmentQuestion;
import org.xtext.smaCQA.ShipmentTrackingNumberQuestion;
import org.xtext.smaCQA.SmaCQAPackage;
import org.xtext.smaCQA.SpecialMeasuresQuestion;
import org.xtext.smaCQA.StorageConditionsQuestion;
import org.xtext.smaCQA.TaxQuestion;
import org.xtext.smaCQA.TaxShipmentDetailsQuestion;
import org.xtext.smaCQA.TimeStartValueExchangeQuestion;
import org.xtext.smaCQA.TimeValueExchangeDurationQuestion;
import org.xtext.smaCQA.TokenERC20;
import org.xtext.smaCQA.TokenERC223;
import org.xtext.smaCQA.TokenERC721;
import org.xtext.smaCQA.UpdatesAndMonitoringQuestion;
import org.xtext.smaCQA.ValueExchange;
import org.xtext.smaCQA.ValueObjectRightQuestion;
import org.xtext.smaCQA.ValueObjectTangibleQuestion;
import org.xtext.smaCQA.ValueObjectTokenQuestion;
import org.xtext.smaCQA.VoyageQuestion;

@SuppressWarnings("all")
public class SmaCQASemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SmaCQAGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SmaCQAPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SmaCQAPackage.ADDITIONAL_LEGAL_DOCUMENT_QUESTION:
				sequence_AdditionalLegalDocumentQuestion(context, (AdditionalLegalDocumentQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.ADDRESS_DELIVERY_QUESTION:
				sequence_AddressDeliveryQuestion(context, (AddressDeliveryQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.ADDRESS_PICKUP_QUESTION:
				sequence_AddressPickupQuestion(context, (AddressPickupQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.AGE_QUESTION:
				sequence_AgeQuestion(context, (AgeQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.AGREED_PRICE_QUESTION:
				sequence_AgreedPriceQuestion(context, (AgreedPriceQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.ALIMENTARY_QUESTION:
				sequence_AlimentaryQuestion(context, (AlimentaryQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.CARGO_DIMENSIONS_QUESTION:
				sequence_CargoDimensionsQuestion(context, (CargoDimensionsQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.CARGO_TYPE_QUESTION:
				sequence_CargoTypeQuestion(context, (CargoTypeQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.CARGO_WEIGHT_QUESTION:
				sequence_CargoWeightQuestion(context, (CargoWeightQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.COMPANY_QUESTION:
				sequence_CompanyQuestion(context, (CompanyQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.CONDITIONS_VALUE_EXCHANGE_QUESTION:
				sequence_ConditionsValueExchangeQuestion(context, (ConditionsValueExchangeQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.CUSTOMS_QUESTION:
				sequence_CustomsQuestion(context, (CustomsQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.DANGEROUS_LOAD_QUESTION:
				sequence_DangerousLoadQuestion(context, (DangerousLoadQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.DATA_QUESTION:
				sequence_DataQuestion(context, (DataQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.DATA_REGISTER:
				sequence_DataRegister(context, (DataRegister) semanticObject); 
				return; 
			case SmaCQAPackage.DELIVERY_DEADLINE_QUESTION:
				sequence_DeliveryDeadlineQuestion(context, (DeliveryDeadlineQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.ECONOMY_QUESTION:
				sequence_EconomyQuestion(context, (EconomyQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.EXPECTED_QUALITY_QUESTION:
				sequence_ExpectedQualityQuestion(context, (ExpectedQualityQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.EXPIRATION_DATE_QUESTION:
				sequence_ExpirationDateQuestion(context, (ExpirationDateQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.EXTERNAL_MEDIATOR_QUESTION:
				sequence_ExternalMediatorQuestion(context, (ExternalMediatorQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.GEOGRAPHICAL_QUESTION:
				sequence_GeographicalQuestion(context, (GeographicalQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.GEOGRAPHICAL_RESTRICTION_QUESTION:
				sequence_GeographicalRestrictionQuestion(context, (GeographicalRestrictionQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.HEALTH_INSPECTION_QUESTION:
				sequence_HealthInspectionQuestion(context, (HealthInspectionQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.IMPORT_TAX_QUESTION:
				sequence_ImportTaxQuestion(context, (ImportTaxQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.INSPECTION_RESULT_QUESTION:
				sequence_InspectionResultQuestion(context, (InspectionResultQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.INSURANCE_DETAILS_QUESTION:
				sequence_InsuranceDetailsQuestion(context, (InsuranceDetailsQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.INSURANCE_QUESTION:
				sequence_InsuranceQuestion(context, (InsuranceQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.INTERNACIONAL_SEAL_NAME_QUESTION:
				sequence_InternacionalSealNameQuestion(context, (InternacionalSealNameQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.INTERNATIONAL_SEAL_QUESTION:
				sequence_InternationalSealQuestion(context, (InternationalSealQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.LEGAL_QUESTION:
				sequence_LegalQuestion(context, (LegalQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.MARITIME_QUESTION:
				sequence_MaritimeQuestion(context, (MaritimeQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.MEANS_TRANSPORT_QUESTION:
				sequence_MeansTransportQuestion(context, (MeansTransportQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.MEDIATOR_NAME_QUESTION:
				sequence_MediatorNameQuestion(context, (MediatorNameQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.MINIMUM_AMOUNT_QUESTION:
				sequence_MinimumAmountQuestion(context, (MinimumAmountQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case SmaCQAPackage.PENALTY_FOR_NEGLECT_QUESTION:
				sequence_PenaltyForNeglectQuestion(context, (PenaltyForNeglectQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.PERISHABLE_QUESTION:
				sequence_PerishableQuestion(context, (PerishableQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.PRODUCT_QUALITY_QUESTION:
				sequence_ProductQualityQuestion(context, (ProductQualityQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.REGULATORY_COMPLIANCE_QUESTION:
				sequence_RegulatoryComplianceQuestion(context, (RegulatoryComplianceQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.REPEAT_VALUE_EXCHANGE_QUESTION:
				sequence_RepeatValueExchangeQuestion(context, (RepeatValueExchangeQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.RETURNS_MANAGEMENT_QUESTION:
				sequence_ReturnsManagementQuestion(context, (ReturnsManagementQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.RETURNS_OR_CANCELLATIONS_QUESTION:
				sequence_ReturnsOrCancellationsQuestion(context, (ReturnsOrCancellationsQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.SANITARY_CONTROL_QUESTION:
				sequence_SanitaryControlQuestion(context, (SanitaryControlQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.SEA_SHIPMENT_QUESTION:
				sequence_SeaShipmentQuestion(context, (SeaShipmentQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.SHIPMENT_COST_RESPONSIBILITY_QUESTION:
				sequence_ShipmentCostResponsibilityQuestion(context, (ShipmentCostResponsibilityQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.SHIPMENT_DETAILS_QUESTION:
				sequence_ShipmentDetailsQuestion(context, (ShipmentDetailsQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.SHIPMENT_INSURANCE_QUESTION:
				sequence_ShipmentInsuranceQuestion(context, (ShipmentInsuranceQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.SHIPMENT_QUESTION:
				sequence_ShipmentQuestion(context, (ShipmentQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.SHIPMENT_TRACKING_NUMBER_QUESTION:
				sequence_ShipmentTrackingNumberQuestion(context, (ShipmentTrackingNumberQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.SPECIAL_MEASURES_QUESTION:
				sequence_SpecialMeasuresQuestion(context, (SpecialMeasuresQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.STORAGE_CONDITIONS_QUESTION:
				sequence_StorageConditionsQuestion(context, (StorageConditionsQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.TAX_QUESTION:
				sequence_TaxQuestion(context, (TaxQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.TAX_SHIPMENT_DETAILS_QUESTION:
				sequence_TaxShipmentDetailsQuestion(context, (TaxShipmentDetailsQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION:
				sequence_TimeStartValueExchangeQuestion(context, (TimeStartValueExchangeQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.TIME_VALUE_EXCHANGE_DURATION_QUESTION:
				sequence_TimeValueExchangeDurationQuestion(context, (TimeValueExchangeDurationQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.TOKEN_ERC20:
				sequence_TokenERC20(context, (TokenERC20) semanticObject); 
				return; 
			case SmaCQAPackage.TOKEN_ERC223:
				sequence_TokenERC223(context, (TokenERC223) semanticObject); 
				return; 
			case SmaCQAPackage.TOKEN_ERC721:
				sequence_TokenERC721(context, (TokenERC721) semanticObject); 
				return; 
			case SmaCQAPackage.UPDATES_AND_MONITORING_QUESTION:
				sequence_UpdatesAndMonitoringQuestion(context, (UpdatesAndMonitoringQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.VALUE_EXCHANGE:
				sequence_ValueExchange(context, (ValueExchange) semanticObject); 
				return; 
			case SmaCQAPackage.VALUE_OBJECT_RIGHT_QUESTION:
				sequence_ValueObjectRightQuestion(context, (ValueObjectRightQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.VALUE_OBJECT_TANGIBLE_QUESTION:
				sequence_ValueObjectTangibleQuestion(context, (ValueObjectTangibleQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.VALUE_OBJECT_TOKEN_QUESTION:
				sequence_ValueObjectTokenQuestion(context, (ValueObjectTokenQuestion) semanticObject); 
				return; 
			case SmaCQAPackage.VOYAGE_QUESTION:
				sequence_VoyageQuestion(context, (VoyageQuestion) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AdditionalLegalDocumentQuestion returns AdditionalLegalDocumentQuestion
	 *
	 * Constraint:
	 *     (name='2.3 Is another legal document complementary to this SmartContract necessary?' (answer='yes' | answer='no'))
	 */
	protected void sequence_AdditionalLegalDocumentQuestion(ISerializationContext context, AdditionalLegalDocumentQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AddressDeliveryQuestion returns AddressDeliveryQuestion
	 *
	 * Constraint:
	 *     (name='4.7 What is the delivery address?' answer=STRING)
	 */
	protected void sequence_AddressDeliveryQuestion(ISerializationContext context, AddressDeliveryQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.ADDRESS_DELIVERY_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.ADDRESS_DELIVERY_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.ADDRESS_DELIVERY_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.ADDRESS_DELIVERY_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddressDeliveryQuestionAccess().getName47WhatIsTheDeliveryAddressKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAddressDeliveryQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AddressPickupQuestion returns AddressPickupQuestion
	 *
	 * Constraint:
	 *     (name='4.6 What is the pickup address for the cargo?' answer=STRING)
	 */
	protected void sequence_AddressPickupQuestion(ISerializationContext context, AddressPickupQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.ADDRESS_PICKUP_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.ADDRESS_PICKUP_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.ADDRESS_PICKUP_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.ADDRESS_PICKUP_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAddressPickupQuestionAccess().getName46WhatIsThePickupAddressForTheCargoKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAddressPickupQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AgeQuestion returns AgeQuestion
	 *
	 * Constraint:
	 *     (name='2.1  What would be the minimum legal age if necessary in this exchange?' answer=INT)
	 */
	protected void sequence_AgeQuestion(ISerializationContext context, AgeQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.AGE_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.AGE_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.AGE_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.AGE_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgeQuestionAccess().getName21WhatWouldBeTheMinimumLegalAgeIfNecessaryInThisExchangeKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAgeQuestionAccess().getAnswerINTTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AgreedPriceQuestion returns AgreedPriceQuestion
	 *
	 * Constraint:
	 *     (name='6.1 What is the agreed price per unit of product ?' answer=INT answerUnitCoin=UnitCoin)
	 */
	protected void sequence_AgreedPriceQuestion(ISerializationContext context, AgreedPriceQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.AGREED_PRICE_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.AGREED_PRICE_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.AGREED_PRICE_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.AGREED_PRICE_QUESTION__ANSWER));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.AGREED_PRICE_QUESTION__ANSWER_UNIT_COIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.AGREED_PRICE_QUESTION__ANSWER_UNIT_COIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAgreedPriceQuestionAccess().getName61WhatIsTheAgreedPricePerUnitOfProductKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAgreedPriceQuestionAccess().getAnswerINTTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.accept(grammarAccess.getAgreedPriceQuestionAccess().getAnswerUnitCoinUnitCoinEnumRuleCall_4_0(), semanticObject.getAnswerUnitCoin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     AlimentaryQuestion returns AlimentaryQuestion
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             agreedPrice=AgreedPriceQuestion 
	 *             ((internationalSeal=InternationalSealQuestion storageConditions=StorageConditionsQuestion) | storageConditions=StorageConditionsQuestion)
	 *         ) | 
	 *         (
	 *             ((agreedPrice=AgreedPriceQuestion productQuality=ProductQualityQuestion) | productQuality=ProductQualityQuestion) 
	 *             ((internationalSeal=InternationalSealQuestion storageConditions=StorageConditionsQuestion) | storageConditions=StorageConditionsQuestion)
	 *         ) | 
	 *         (
	 *             (
	 *                 (
	 *                     agreedPrice=AgreedPriceQuestion 
	 *                     ((productQuality=ProductQualityQuestion internationalSeal=InternationalSealQuestion) | internationalSeal=InternationalSealQuestion)
	 *                 ) | 
	 *                 (productQuality=ProductQualityQuestion internationalSeal=InternationalSealQuestion) | 
	 *                 internationalSeal=InternationalSealQuestion
	 *             )? 
	 *             healthInspection=HealthInspectionQuestion 
	 *             storageConditions=StorageConditionsQuestion
	 *         ) | 
	 *         (internationalSeal=InternationalSealQuestion storageConditions=StorageConditionsQuestion) | 
	 *         storageConditions=StorageConditionsQuestion
	 *     )?
	 */
	protected void sequence_AlimentaryQuestion(ISerializationContext context, AlimentaryQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CargoDimensionsQuestion returns CargoDimensionsQuestion
	 *
	 * Constraint:
	 *     (name='4.13 What are the dimensions of the cargo (length x width x depth in cm)?' length=INT width=INT depth=INT)
	 */
	protected void sequence_CargoDimensionsQuestion(ISerializationContext context, CargoDimensionsQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__LENGTH));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__WIDTH));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__DEPTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__DEPTH));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCargoDimensionsQuestionAccess().getName413WhatAreTheDimensionsOfTheCargoLengthXWidthXDepthInCmKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCargoDimensionsQuestionAccess().getLengthINTTerminalRuleCall_2_0(), semanticObject.getLength());
		feeder.accept(grammarAccess.getCargoDimensionsQuestionAccess().getWidthINTTerminalRuleCall_4_0(), semanticObject.getWidth());
		feeder.accept(grammarAccess.getCargoDimensionsQuestionAccess().getDepthINTTerminalRuleCall_6_0(), semanticObject.getDepth());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CargoTypeQuestion returns CargoTypeQuestion
	 *
	 * Constraint:
	 *     (name='4.11 What is the type of cargo?' answer=STRING)
	 */
	protected void sequence_CargoTypeQuestion(ISerializationContext context, CargoTypeQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.CARGO_TYPE_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.CARGO_TYPE_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.CARGO_TYPE_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.CARGO_TYPE_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCargoTypeQuestionAccess().getName411WhatIsTheTypeOfCargoKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCargoTypeQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CargoWeightQuestion returns CargoWeightQuestion
	 *
	 * Constraint:
	 *     (name='4.12 How much does the cargo weight (kg)?' answer=INT)
	 */
	protected void sequence_CargoWeightQuestion(ISerializationContext context, CargoWeightQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.CARGO_WEIGHT_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.CARGO_WEIGHT_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.CARGO_WEIGHT_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.CARGO_WEIGHT_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCargoWeightQuestionAccess().getName412HowMuchDoesTheCargoWeightKgKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCargoWeightQuestionAccess().getAnswerINTTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     CompanyQuestion returns CompanyQuestion
	 *
	 * Constraint:
	 *     (name='4.16 What is the name of the transport company?' answer=STRING)
	 */
	protected void sequence_CompanyQuestion(ISerializationContext context, CompanyQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.COMPANY_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.COMPANY_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.COMPANY_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.COMPANY_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompanyQuestionAccess().getName416WhatIsTheNameOfTheTransportCompanyKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCompanyQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ConditionsValueExchangeQuestion returns ConditionsValueExchangeQuestion
	 *
	 * Constraint:
	 *     (name='1.4 Are the same conditions always maintained when exchanging value?' (answer='yes' | answer='no'))
	 */
	protected void sequence_ConditionsValueExchangeQuestion(ISerializationContext context, ConditionsValueExchangeQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     CustomsQuestion returns CustomsQuestion
	 *
	 * Constraint:
	 *     (name='4.3 Does the shipment have to go through customs?' (answer='yes' | answer='no'))
	 */
	protected void sequence_CustomsQuestion(ISerializationContext context, CustomsQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DangerousLoadQuestion returns DangerousLoadQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='4.9 Does the physical good represent a dangerous load or have special transportation needs?' 
	 *         (answer='yes' | answer='no') 
	 *         subSentenceSpecialMeasures=SpecialMeasuresQuestion?
	 *     )
	 */
	protected void sequence_DangerousLoadQuestion(ISerializationContext context, DangerousLoadQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataQuestion returns DataQuestion
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             timeDurationValueExchange=TimeValueExchangeDurationQuestion 
	 *             (
	 *                 (repeatValueExchange=RepeatValueExchangeQuestion valueObjectTypeValueExchange=ValueObjectQuestion) | 
	 *                 valueObjectTypeValueExchange=ValueObjectQuestion
	 *             )
	 *         ) | 
	 *         (
	 *             (
	 *                 (timeDurationValueExchange=TimeValueExchangeDurationQuestion timeStartValueExchange=TimeStartValueExchangeQuestion) | 
	 *                 timeStartValueExchange=TimeStartValueExchangeQuestion
	 *             ) 
	 *             (
	 *                 (repeatValueExchange=RepeatValueExchangeQuestion valueObjectTypeValueExchange=ValueObjectQuestion) | 
	 *                 valueObjectTypeValueExchange=ValueObjectQuestion
	 *             )
	 *         ) | 
	 *         (
	 *             (
	 *                 (
	 *                     timeDurationValueExchange=TimeValueExchangeDurationQuestion 
	 *                     (
	 *                         (timeStartValueExchange=TimeStartValueExchangeQuestion repeatValueExchange=RepeatValueExchangeQuestion) | 
	 *                         repeatValueExchange=RepeatValueExchangeQuestion
	 *                     )
	 *                 ) | 
	 *                 (timeStartValueExchange=TimeStartValueExchangeQuestion repeatValueExchange=RepeatValueExchangeQuestion) | 
	 *                 repeatValueExchange=RepeatValueExchangeQuestion
	 *             )? 
	 *             conditionValueExchange=ConditionsValueExchangeQuestion 
	 *             valueObjectTypeValueExchange=ValueObjectQuestion
	 *         ) | 
	 *         (repeatValueExchange=RepeatValueExchangeQuestion valueObjectTypeValueExchange=ValueObjectQuestion) | 
	 *         valueObjectTypeValueExchange=ValueObjectQuestion
	 *     )?
	 */
	protected void sequence_DataQuestion(ISerializationContext context, DataQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataRegister returns DataRegister
	 *
	 * Constraint:
	 *     (name=ID type=Type)
	 */
	protected void sequence_DataRegister(ISerializationContext context, DataRegister semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.DATA_REGISTER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.DATA_REGISTER__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.DATA_REGISTER__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.DATA_REGISTER__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataRegisterAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDataRegisterAccess().getTypeTypeEnumRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeliveryDeadlineQuestion returns DeliveryDeadlineQuestion
	 *
	 * Constraint:
	 *     (name='4.17 What is the deadline for delivery?' answer=STRING)
	 */
	protected void sequence_DeliveryDeadlineQuestion(ISerializationContext context, DeliveryDeadlineQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.DELIVERY_DEADLINE_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.DELIVERY_DEADLINE_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.DELIVERY_DEADLINE_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.DELIVERY_DEADLINE_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDeliveryDeadlineQuestionAccess().getName417WhatIsTheDeadlineForDeliveryKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDeliveryDeadlineQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     EconomyQuestion returns EconomyQuestion
	 *
	 * Constraint:
	 *     (
	 *         (minimumAmountQuestion=MinimumAmountQuestion shipmentCostResponsibility=ShipmentCostResponsibilityQuestion) | 
	 *         shipmentCostResponsibility=ShipmentCostResponsibilityQuestion
	 *     )?
	 */
	protected void sequence_EconomyQuestion(ISerializationContext context, EconomyQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ExpectedQualityQuestion returns ExpectedQualityQuestion
	 *
	 * Constraint:
	 *     (
	 *         q1='6.2.1 How will the quality of the product be determined?' 
	 *         answer1=STRING 
	 *         q2='6.2.2 What happens if the delivered product does not meet the agreed quality?' 
	 *         answer2=STRING
	 *     )
	 */
	protected void sequence_ExpectedQualityQuestion(ISerializationContext context, ExpectedQualityQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.EXPECTED_QUALITY_QUESTION__Q1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.EXPECTED_QUALITY_QUESTION__Q1));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.EXPECTED_QUALITY_QUESTION__ANSWER1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.EXPECTED_QUALITY_QUESTION__ANSWER1));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.EXPECTED_QUALITY_QUESTION__Q2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.EXPECTED_QUALITY_QUESTION__Q2));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.EXPECTED_QUALITY_QUESTION__ANSWER2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.EXPECTED_QUALITY_QUESTION__ANSWER2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpectedQualityQuestionAccess().getQ1621HowWillTheQualityOfTheProductBeDeterminedKeyword_0_0(), semanticObject.getQ1());
		feeder.accept(grammarAccess.getExpectedQualityQuestionAccess().getAnswer1STRINGTerminalRuleCall_2_0(), semanticObject.getAnswer1());
		feeder.accept(grammarAccess.getExpectedQualityQuestionAccess().getQ2622WhatHappensIfTheDeliveredProductDoesNotMeetTheAgreedQualityKeyword_3_0(), semanticObject.getQ2());
		feeder.accept(grammarAccess.getExpectedQualityQuestionAccess().getAnswer2STRINGTerminalRuleCall_5_0(), semanticObject.getAnswer2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExpirationDateQuestion returns ExpirationDateQuestion
	 *
	 * Constraint:
	 *     (name='4.10.1 What is its expiration date?' answer=STRING)
	 */
	protected void sequence_ExpirationDateQuestion(ISerializationContext context, ExpirationDateQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.EXPIRATION_DATE_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.EXPIRATION_DATE_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.EXPIRATION_DATE_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.EXPIRATION_DATE_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getExpirationDateQuestionAccess().getName4101WhatIsItsExpirationDateKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getExpirationDateQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ExternalMediatorQuestion returns ExternalMediatorQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='4.19 In case of dispute, is it considered to appoint an external mediator?' 
	 *         (answer='yes' | answer='no') 
	 *         subsentence=MediatorNameQuestion?
	 *     )
	 */
	protected void sequence_ExternalMediatorQuestion(ISerializationContext context, ExternalMediatorQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GeographicalQuestion returns GeographicalQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='4.5 Are there geographical restrictions for the exchange?' 
	 *         (answer='yes' | answer='no') 
	 *         subSentenceRestriction=GeographicalRestrictionQuestion?
	 *     )
	 */
	protected void sequence_GeographicalQuestion(ISerializationContext context, GeographicalQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GeographicalRestrictionQuestion returns GeographicalRestrictionQuestion
	 *
	 * Constraint:
	 *     (name='4.5.1 What are the geographical restrictions?' answer=STRING)
	 */
	protected void sequence_GeographicalRestrictionQuestion(ISerializationContext context, GeographicalRestrictionQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.GEOGRAPHICAL_RESTRICTION_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.GEOGRAPHICAL_RESTRICTION_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.GEOGRAPHICAL_RESTRICTION_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.GEOGRAPHICAL_RESTRICTION_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGeographicalRestrictionQuestionAccess().getName451WhatAreTheGeographicalRestrictionsKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getGeographicalRestrictionQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HealthInspectionQuestion returns HealthInspectionQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='6.4 Has any health check or inspection been carried out at the production or storage site?' 
	 *         (answer='yes' | answer='no') 
	 *         subsentence=InspectionResultQuestion?
	 *     )
	 */
	protected void sequence_HealthInspectionQuestion(ISerializationContext context, HealthInspectionQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ImportTaxQuestion returns ImportTaxQuestion
	 *
	 * Constraint:
	 *     (name='4.4 Does it have to pay any import tax to the destination country?' (answer='yes' | answer='no') subSentence=TaxShipmentDetailsQuestion?)
	 */
	protected void sequence_ImportTaxQuestion(ISerializationContext context, ImportTaxQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InspectionResultQuestion returns InspectionResultQuestion
	 *
	 * Constraint:
	 *     (name='6.4.1 What was the result of the inspection?' answer=inspectionResult)
	 */
	protected void sequence_InspectionResultQuestion(ISerializationContext context, InspectionResultQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.INSPECTION_RESULT_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.INSPECTION_RESULT_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.INSPECTION_RESULT_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.INSPECTION_RESULT_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInspectionResultQuestionAccess().getName641WhatWasTheResultOfTheInspectionKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInspectionResultQuestionAccess().getAnswerInspectionResultEnumRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InsuranceDetailsQuestion returns InsuranceDetailsQuestion
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             (
	 *                 (
	 *                     q1='5.1.1 What is the cost of insurance (per unit asset)?' 
	 *                     answer1=INT 
	 *                     answerUnitCoin1=UnitCoin 
	 *                     (q2='5.1.2 What cases are covered by the insurance (insurance clauses)?' answer2=STRING)
	 *                 ) | 
	 *                 (q2='5.1.2 What cases are covered by the insurance (insurance clauses)?' answer2=STRING)
	 *             )? 
	 *             (q3='5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?' answer3=INT answerUnitCoin3=UnitCoin)
	 *         ) | 
	 *         (q3='5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?' answer3=INT answerUnitCoin3=UnitCoin)
	 *     )?
	 */
	protected void sequence_InsuranceDetailsQuestion(ISerializationContext context, InsuranceDetailsQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InsuranceQuestion returns InsuranceQuestion
	 *
	 * Constraint:
	 *     (
	 *         shipmentInsurance=ShipmentInsuranceQuestion? 
	 *         insuranceDetails=InsuranceDetailsQuestion 
	 *         returnsOrCancellations=ReturnsOrCancellationsQuestion? 
	 *         penaltyForNeglect=PenaltyForNeglectQuestion?
	 *     )
	 */
	protected void sequence_InsuranceQuestion(ISerializationContext context, InsuranceQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InternacionalSealNameQuestion returns InternacionalSealNameQuestion
	 *
	 * Constraint:
	 *     (name='6.3.1 What international seal or distinction does the cargo have?' answer=STRING)
	 */
	protected void sequence_InternacionalSealNameQuestion(ISerializationContext context, InternacionalSealNameQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.INTERNACIONAL_SEAL_NAME_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.INTERNACIONAL_SEAL_NAME_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.INTERNACIONAL_SEAL_NAME_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.INTERNACIONAL_SEAL_NAME_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInternacionalSealNameQuestionAccess().getName631WhatInternationalSealOrDistinctionDoesTheCargoHaveKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInternacionalSealNameQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     InternationalSealQuestion returns InternationalSealQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='6.3 Does the merchandise have any international seal or distinction?' 
	 *         (answer='yes' | answer='no') 
	 *         subsentence=InternacionalSealNameQuestion?
	 *     )
	 */
	protected void sequence_InternationalSealQuestion(ISerializationContext context, InternationalSealQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LegalQuestion returns LegalQuestion
	 *
	 * Constraint:
	 *     (
	 *         (
	 *             ageQuestion=AgeQuestion 
	 *             ((taxQuestion=TaxQuestion regulatoryCompliance=RegulatoryComplianceQuestion) | regulatoryCompliance=RegulatoryComplianceQuestion)
	 *         ) | 
	 *         (
	 *             ((ageQuestion=AgeQuestion taxQuestion=TaxQuestion) | taxQuestion=TaxQuestion)? 
	 *             additionalLegalDocument=AdditionalLegalDocumentQuestion 
	 *             regulatoryCompliance=RegulatoryComplianceQuestion
	 *         ) | 
	 *         (taxQuestion=TaxQuestion regulatoryCompliance=RegulatoryComplianceQuestion) | 
	 *         regulatoryCompliance=RegulatoryComplianceQuestion
	 *     )?
	 */
	protected void sequence_LegalQuestion(ISerializationContext context, LegalQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MaritimeQuestion returns MaritimeQuestion
	 *
	 * Constraint:
	 *     (
	 *         q1='4.14.1 What is the name of the origin port?' 
	 *         answer1=STRING 
	 *         q2='4.14.2 What is the name of the destination port?' 
	 *         answer2=STRING 
	 *         (q3='4.14.3 In case of need, does it leave the port agent the power to make key decisions?' (answer3='yes' | answer3='no'))? 
	 *         q4='4.14.4 Is it a voyage charter or time charter party?' 
	 *         answer4=Voyagetype 
	 *         subSentence=VoyageQuestion?
	 *     )
	 */
	protected void sequence_MaritimeQuestion(ISerializationContext context, MaritimeQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MeansTransportQuestion returns MeansTransportQuestion
	 *
	 * Constraint:
	 *     (name='4.15 What is the means of transport?' answer=STRING)
	 */
	protected void sequence_MeansTransportQuestion(ISerializationContext context, MeansTransportQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.MEANS_TRANSPORT_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.MEANS_TRANSPORT_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.MEANS_TRANSPORT_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.MEANS_TRANSPORT_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMeansTransportQuestionAccess().getName415WhatIsTheMeansOfTransportKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMeansTransportQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MediatorNameQuestion returns MediatorNameQuestion
	 *
	 * Constraint:
	 *     (name='4.19.1 What is the name of the individual or company mediating external to the two parties?' answer=ID)
	 */
	protected void sequence_MediatorNameQuestion(ISerializationContext context, MediatorNameQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.MEDIATOR_NAME_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.MEDIATOR_NAME_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.MEDIATOR_NAME_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.MEDIATOR_NAME_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMediatorNameQuestionAccess().getName4191WhatIsTheNameOfTheIndividualOrCompanyMediatingExternalToTheTwoPartiesKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMediatorNameQuestionAccess().getAnswerIDTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MinimumAmountQuestion returns MinimumAmountQuestion
	 *
	 * Constraint:
	 *     (name='3.1 Which would be the minimum amount if necessary in this exchange?' answer=INT)
	 */
	protected void sequence_MinimumAmountQuestion(ISerializationContext context, MinimumAmountQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.MINIMUM_AMOUNT_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.MINIMUM_AMOUNT_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.MINIMUM_AMOUNT_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.MINIMUM_AMOUNT_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMinimumAmountQuestionAccess().getName31WhichWouldBeTheMinimumAmountIfNecessaryInThisExchangeKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMinimumAmountQuestionAccess().getAnswerINTTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     valueExchanges+=ValueExchange+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PenaltyForNeglectQuestion returns PenaltyForNeglectQuestion
	 *
	 * Constraint:
	 *     (name='5.3 What is the penalty in case of neglect or abandonment of duties?' answer=STRING)
	 */
	protected void sequence_PenaltyForNeglectQuestion(ISerializationContext context, PenaltyForNeglectQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.PENALTY_FOR_NEGLECT_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.PENALTY_FOR_NEGLECT_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.PENALTY_FOR_NEGLECT_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.PENALTY_FOR_NEGLECT_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPenaltyForNeglectQuestionAccess().getName53WhatIsThePenaltyInCaseOfNeglectOrAbandonmentOfDutiesKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getPenaltyForNeglectQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PerishableQuestion returns PerishableQuestion
	 *
	 * Constraint:
	 *     (name='4.10 Is it a perishable product?' (answer='yes' | answer='no') subSentencePerishable=ExpirationDateQuestion?)
	 */
	protected void sequence_PerishableQuestion(ISerializationContext context, PerishableQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ProductQualityQuestion returns ProductQualityQuestion
	 *
	 * Constraint:
	 *     (name='6.2 What is the expected quality of the product?' answer=STRING expectedQuality=ExpectedQualityQuestion?)
	 */
	protected void sequence_ProductQualityQuestion(ISerializationContext context, ProductQualityQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RegulatoryComplianceQuestion returns RegulatoryComplianceQuestion
	 *
	 * Constraint:
	 *     (name='2.4 Who is responsible for ensuring compliance with regulations?' answer=ID)
	 */
	protected void sequence_RegulatoryComplianceQuestion(ISerializationContext context, RegulatoryComplianceQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.REGULATORY_COMPLIANCE_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.REGULATORY_COMPLIANCE_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.REGULATORY_COMPLIANCE_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.REGULATORY_COMPLIANCE_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRegulatoryComplianceQuestionAccess().getName24WhoIsResponsibleForEnsuringComplianceWithRegulationsKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRegulatoryComplianceQuestionAccess().getAnswerIDTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RepeatValueExchangeQuestion returns RepeatValueExchangeQuestion
	 *
	 * Constraint:
	 *     (name='1.3 Can the value exchange be repeated over time?' (answer='yes' | answer='no'))
	 */
	protected void sequence_RepeatValueExchangeQuestion(ISerializationContext context, RepeatValueExchangeQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ReturnsManagementQuestion returns ReturnsManagementQuestion
	 *
	 * Constraint:
	 *     (name='5.2.1 How would returns or cancellations be managed according to the terms of the contract?' answer=STRING)
	 */
	protected void sequence_ReturnsManagementQuestion(ISerializationContext context, ReturnsManagementQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.RETURNS_MANAGEMENT_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.RETURNS_MANAGEMENT_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.RETURNS_MANAGEMENT_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.RETURNS_MANAGEMENT_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getReturnsManagementQuestionAccess().getName521HowWouldReturnsOrCancellationsBeManagedAccordingToTheTermsOfTheContractKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getReturnsManagementQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ReturnsOrCancellationsQuestion returns ReturnsOrCancellationsQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='5.2 Is the possibility of returns or cancellations in the exchange foreseen?' 
	 *         (answer='yes' | answer='no') 
	 *         subsentence=ReturnsManagementQuestion?
	 *     )
	 */
	protected void sequence_ReturnsOrCancellationsQuestion(ISerializationContext context, ReturnsOrCancellationsQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SanitaryControlQuestion returns SanitaryControlQuestion
	 *
	 * Constraint:
	 *     (name='4.2 Is the product subject to any sanitary control upon arrival at the destination country?' (answer='yes' | answer='no'))
	 */
	protected void sequence_SanitaryControlQuestion(ISerializationContext context, SanitaryControlQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SeaShipmentQuestion returns SeaShipmentQuestion
	 *
	 * Constraint:
	 *     (name='4.14 Is the shipment made by sea route?' (answer='yes' | answer='no') maritime=MaritimeQuestion?)
	 */
	protected void sequence_SeaShipmentQuestion(ISerializationContext context, SeaShipmentQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShipmentCostResponsibilityQuestion returns ShipmentCostResponsibilityQuestion
	 *
	 * Constraint:
	 *     (
	 *         q1='3.2 Who is responsible for the transportation cost?' 
	 *         answer1=ID 
	 *         (q2='3.3 What is the freight rate?' answer2=INT answerUnitCoinFreightRate=UnitCoin)? 
	 *         (q3='3.4 What is the loading fee (on the ship)?' answer3=INT loadingFeeAnswerUnitCoin=UnitCoin)? 
	 *         (q4='3.5 What is the unloading fee?' answer4=INT unloadingFeeAnswerUnitCoin=UnitCoin)? 
	 *         (q5='3.6 What is the transport rate?' answer5=INT transportRateAnswerUnitCoin=UnitCoin)?
	 *     )
	 */
	protected void sequence_ShipmentCostResponsibilityQuestion(ISerializationContext context, ShipmentCostResponsibilityQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShipmentDetailsQuestion returns ShipmentDetailsQuestion
	 *
	 * Constraint:
	 *     (name='4.1 Is it an international shipment?' (answer='yes' | answer='no'))
	 */
	protected void sequence_ShipmentDetailsQuestion(ISerializationContext context, ShipmentDetailsQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShipmentInsuranceQuestion returns ShipmentInsuranceQuestion
	 *
	 * Constraint:
	 *     (name='5.1 Is the cargo insured?' (answer='yes' | answer='no'))
	 */
	protected void sequence_ShipmentInsuranceQuestion(ISerializationContext context, ShipmentInsuranceQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShipmentQuestion returns ShipmentQuestion
	 *
	 * Constraint:
	 *     (
	 *         shipmentDetails=ShipmentDetailsQuestion 
	 *         sanitaryControl=SanitaryControlQuestion 
	 *         customs=CustomsQuestion? 
	 *         importTax=ImportTaxQuestion? 
	 *         geographicalQuestion=GeographicalQuestion? 
	 *         addressPickup=AddressPickupQuestion 
	 *         addressDelivery=AddressDeliveryQuestion 
	 *         shipmentTrackingNumber=ShipmentTrackingNumberQuestion? 
	 *         dangerousLoad=DangerousLoadQuestion? 
	 *         perishable=PerishableQuestion? 
	 *         cargoType=CargoTypeQuestion 
	 *         cargoWeight=CargoWeightQuestion 
	 *         cargoDimensions=CargoDimensionsQuestion 
	 *         seaShipment=SeaShipmentQuestion? 
	 *         means=MeansTransportQuestion? 
	 *         company=CompanyQuestion 
	 *         deliveryDeadline=DeliveryDeadlineQuestion? 
	 *         updatesAndMonitoring=UpdatesAndMonitoringQuestion? 
	 *         externalMediator=ExternalMediatorQuestion?
	 *     )
	 */
	protected void sequence_ShipmentQuestion(ISerializationContext context, ShipmentQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ShipmentTrackingNumberQuestion returns ShipmentTrackingNumberQuestion
	 *
	 * Constraint:
	 *     (name='4.8 What is the shipment tracking number?' answer=INT)
	 */
	protected void sequence_ShipmentTrackingNumberQuestion(ISerializationContext context, ShipmentTrackingNumberQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.SHIPMENT_TRACKING_NUMBER_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.SHIPMENT_TRACKING_NUMBER_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.SHIPMENT_TRACKING_NUMBER_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.SHIPMENT_TRACKING_NUMBER_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getShipmentTrackingNumberQuestionAccess().getName48WhatIsTheShipmentTrackingNumberKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getShipmentTrackingNumberQuestionAccess().getAnswerINTTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SpecialMeasuresQuestion returns SpecialMeasuresQuestion
	 *
	 * Constraint:
	 *     (name='4.9.1 What special measures are needed for its proper transport?' answer=STRING)
	 */
	protected void sequence_SpecialMeasuresQuestion(ISerializationContext context, SpecialMeasuresQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.SPECIAL_MEASURES_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.SPECIAL_MEASURES_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.SPECIAL_MEASURES_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.SPECIAL_MEASURES_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSpecialMeasuresQuestionAccess().getName491WhatSpecialMeasuresAreNeededForItsProperTransportKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getSpecialMeasuresQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     StorageConditionsQuestion returns StorageConditionsQuestion
	 *
	 * Constraint:
	 *     (name='6.5 Has the merchandise been stored at all times in optimal humidity and temperature conditions?' (answer='yes' | answer='no'))
	 */
	protected void sequence_StorageConditionsQuestion(ISerializationContext context, StorageConditionsQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TaxQuestion returns TaxQuestion
	 *
	 * Constraint:
	 *     (name='2.2 What is the name of the tax?' answer=ID subSentence='2.2.1 Who collects the tax?' answerSubSentence=ID)
	 */
	protected void sequence_TaxQuestion(ISerializationContext context, TaxQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TAX_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TAX_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TAX_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TAX_QUESTION__ANSWER));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TAX_QUESTION__SUB_SENTENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TAX_QUESTION__SUB_SENTENCE));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TAX_QUESTION__ANSWER_SUB_SENTENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TAX_QUESTION__ANSWER_SUB_SENTENCE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaxQuestionAccess().getName22WhatIsTheNameOfTheTaxKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTaxQuestionAccess().getAnswerIDTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.accept(grammarAccess.getTaxQuestionAccess().getSubSentence221WhoCollectsTheTaxKeyword_3_0(), semanticObject.getSubSentence());
		feeder.accept(grammarAccess.getTaxQuestionAccess().getAnswerSubSentenceIDTerminalRuleCall_5_0(), semanticObject.getAnswerSubSentence());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TaxShipmentDetailsQuestion returns TaxShipmentDetailsQuestion
	 *
	 * Constraint:
	 *     (name='4.4.1 How much does it have to pay in taxes?' answer=INT answerUnitCoin=UnitCoin)
	 */
	protected void sequence_TaxShipmentDetailsQuestion(ISerializationContext context, TaxShipmentDetailsQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TAX_SHIPMENT_DETAILS_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TAX_SHIPMENT_DETAILS_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TAX_SHIPMENT_DETAILS_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TAX_SHIPMENT_DETAILS_QUESTION__ANSWER));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TAX_SHIPMENT_DETAILS_QUESTION__ANSWER_UNIT_COIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TAX_SHIPMENT_DETAILS_QUESTION__ANSWER_UNIT_COIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTaxShipmentDetailsQuestionAccess().getName441HowMuchDoesItHaveToPayInTaxesKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTaxShipmentDetailsQuestionAccess().getAnswerINTTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.accept(grammarAccess.getTaxShipmentDetailsQuestionAccess().getAnswerUnitCoinUnitCoinEnumRuleCall_3_0(), semanticObject.getAnswerUnitCoin());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeStartValueExchangeQuestion returns TimeStartValueExchangeQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='1.2 If the exchange of value could only take place after a certain time. What would this be?(indicated in minutes,days,weeks or years)' 
	 *         answer=INT 
	 *         answerUnitTime=UnitTime
	 *     )
	 */
	protected void sequence_TimeStartValueExchangeQuestion(ISerializationContext context, TimeStartValueExchangeQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TIME_START_VALUE_EXCHANGE_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TIME_START_VALUE_EXCHANGE_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER_UNIT_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER_UNIT_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeStartValueExchangeQuestionAccess().getName12IfTheExchangeOfValueCouldOnlyTakePlaceAfterACertainTimeWhatWouldThisBeIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTimeStartValueExchangeQuestionAccess().getAnswerINTTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.accept(grammarAccess.getTimeStartValueExchangeQuestionAccess().getAnswerUnitTimeUnitTimeEnumRuleCall_4_0(), semanticObject.getAnswerUnitTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TimeValueExchangeDurationQuestion returns TimeValueExchangeDurationQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='1.1 If the exchange of value is subject to a duration of time. What would this be?(indicated in minutes,days,weeks or years)' 
	 *         answer=INT 
	 *         answerUnitTime=UnitTime
	 *     )
	 */
	protected void sequence_TimeValueExchangeDurationQuestion(ISerializationContext context, TimeValueExchangeDurationQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TIME_VALUE_EXCHANGE_DURATION_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TIME_VALUE_EXCHANGE_DURATION_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TIME_VALUE_EXCHANGE_DURATION_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TIME_VALUE_EXCHANGE_DURATION_QUESTION__ANSWER));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.TIME_VALUE_EXCHANGE_DURATION_QUESTION__ANSWER_UNIT_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.TIME_VALUE_EXCHANGE_DURATION_QUESTION__ANSWER_UNIT_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeValueExchangeDurationQuestionAccess().getName11IfTheExchangeOfValueIsSubjectToADurationOfTimeWhatWouldThisBeIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTimeValueExchangeDurationQuestionAccess().getAnswerINTTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.accept(grammarAccess.getTimeValueExchangeDurationQuestionAccess().getAnswerUnitTimeUnitTimeEnumRuleCall_4_0(), semanticObject.getAnswerUnitTime());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Token returns TokenERC20
	 *     TokenERC20 returns TokenERC20
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         symbol=ID 
	 *         decimals=INT 
	 *         supply=INT 
	 *         (answerMintSentence='yes' | answerMintSentence='no') 
	 *         (answerBurnSentence='yes' | answerBurnSentence='no')
	 *     )
	 */
	protected void sequence_TokenERC20(ISerializationContext context, TokenERC20 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Token returns TokenERC223
	 *     TokenERC223 returns TokenERC223
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         symbol=ID 
	 *         decimals=INT 
	 *         supply=INT 
	 *         (answerMintSentence='yes' | answerMintSentence='no') 
	 *         (answerBurnSentence='yes' | answerBurnSentence='no')
	 *     )
	 */
	protected void sequence_TokenERC223(ISerializationContext context, TokenERC223 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Token returns TokenERC721
	 *     TokenERC721 returns TokenERC721
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         symbol=ID 
	 *         (answerMintSentence='yes' | answerMintSentence='no') 
	 *         (answerBurnSentence='yes' | answerBurnSentence='no') 
	 *         answerUnitPrice=INT 
	 *         answerUnitCoin=UnitCoin 
	 *         (answerMetadataSentence='yes' | answerMetadataSentence='no') 
	 *         answer+=DataRegister* 
	 *         supply=INT?
	 *     )
	 */
	protected void sequence_TokenERC721(ISerializationContext context, TokenERC721 semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     UpdatesAndMonitoringQuestion returns UpdatesAndMonitoringQuestion
	 *
	 * Constraint:
	 *     (name='4.18 Through what means will updates and monitoring data be received?' answer=STRING)
	 */
	protected void sequence_UpdatesAndMonitoringQuestion(ISerializationContext context, UpdatesAndMonitoringQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.UPDATES_AND_MONITORING_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.UPDATES_AND_MONITORING_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.UPDATES_AND_MONITORING_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.UPDATES_AND_MONITORING_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdatesAndMonitoringQuestionAccess().getName418ThroughWhatMeansWillUpdatesAndMonitoringDataBeReceivedKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getUpdatesAndMonitoringQuestionAccess().getAnswerSTRINGTerminalRuleCall_2_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ValueExchange returns ValueExchange
	 *
	 * Constraint:
	 *     (
	 *         actorSend=ID 
	 *         actorReceipt=ID 
	 *         valueObject=ID 
	 *         dataQuestion=DataQuestion? 
	 *         legalQuestion=LegalQuestion? 
	 *         economyQuestion=EconomyQuestion? 
	 *         shipmentQuestion=ShipmentQuestion? 
	 *         insuranceQuestion=InsuranceQuestion? 
	 *         alimentaryQuestion=AlimentaryQuestion?
	 *     )
	 */
	protected void sequence_ValueExchange(ISerializationContext context, ValueExchange semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueObjectQuestion returns ValueObjectRightQuestion
	 *     ValueObjectRightQuestion returns ValueObjectRightQuestion
	 *
	 * Constraint:
	 *     (name='1.5 Is the object of value a right that can be reflected as active or inactive?' (answer='yes' | answer='no'))
	 */
	protected void sequence_ValueObjectRightQuestion(ISerializationContext context, ValueObjectRightQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueObjectQuestion returns ValueObjectTangibleQuestion
	 *     ValueObjectTangibleQuestion returns ValueObjectTangibleQuestion
	 *
	 * Constraint:
	 *     (
	 *         name='1.5 If the object of value negotiated in the value exchange is a tangible entity that can be represented as a digital entity (not a token). What are the properties of that object?' 
	 *         answer+=DataRegister+
	 *     )
	 */
	protected void sequence_ValueObjectTangibleQuestion(ISerializationContext context, ValueObjectTangibleQuestion semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueObjectQuestion returns ValueObjectTokenQuestion
	 *     ValueObjectTokenQuestion returns ValueObjectTokenQuestion
	 *
	 * Constraint:
	 *     (name='1.5 If the object of value traded on the value exchange is a digital token. What are the properties of said token?' answer=Token)
	 */
	protected void sequence_ValueObjectTokenQuestion(ISerializationContext context, ValueObjectTokenQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.VALUE_OBJECT_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.VALUE_OBJECT_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.VALUE_OBJECT_TOKEN_QUESTION__ANSWER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.VALUE_OBJECT_TOKEN_QUESTION__ANSWER));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueObjectTokenQuestionAccess().getName15IfTheObjectOfValueTradedOnTheValueExchangeIsADigitalTokenWhatAreThePropertiesOfSaidTokenKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getValueObjectTokenQuestionAccess().getAnswerTokenParserRuleCall_1_0(), semanticObject.getAnswer());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VoyageQuestion returns VoyageQuestion
	 *
	 * Constraint:
	 *     (name='4.14.4.1 For how long is the ship rented (indicated in minutes,days,weeks or years)' answerSubSentence=INT answerUnitTime=UnitTime)
	 */
	protected void sequence_VoyageQuestion(ISerializationContext context, VoyageQuestion semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.VOYAGE_QUESTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.VOYAGE_QUESTION__NAME));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.VOYAGE_QUESTION__ANSWER_SUB_SENTENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.VOYAGE_QUESTION__ANSWER_SUB_SENTENCE));
			if (transientValues.isValueTransient(semanticObject, SmaCQAPackage.Literals.VOYAGE_QUESTION__ANSWER_UNIT_TIME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SmaCQAPackage.Literals.VOYAGE_QUESTION__ANSWER_UNIT_TIME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVoyageQuestionAccess().getName41441ForHowLongIsTheShipRentedIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVoyageQuestionAccess().getAnswerSubSentenceINTTerminalRuleCall_2_0(), semanticObject.getAnswerSubSentence());
		feeder.accept(grammarAccess.getVoyageQuestionAccess().getAnswerUnitTimeUnitTimeEnumRuleCall_4_0(), semanticObject.getAnswerUnitTime());
		feeder.finish();
	}
	
	
}
