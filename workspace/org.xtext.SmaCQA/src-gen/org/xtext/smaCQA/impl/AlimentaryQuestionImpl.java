/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.smaCQA.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.smaCQA.AgreedPriceQuestion;
import org.xtext.smaCQA.AlimentaryQuestion;
import org.xtext.smaCQA.HealthInspectionQuestion;
import org.xtext.smaCQA.InternationalSealQuestion;
import org.xtext.smaCQA.ProductQualityQuestion;
import org.xtext.smaCQA.SmaCQAPackage;
import org.xtext.smaCQA.StorageConditionsQuestion;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Alimentary Question</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaCQA.impl.AlimentaryQuestionImpl#getAgreedPrice <em>Agreed Price</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.AlimentaryQuestionImpl#getProductQuality <em>Product Quality</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.AlimentaryQuestionImpl#getInternationalSeal <em>International Seal</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.AlimentaryQuestionImpl#getHealthInspection <em>Health Inspection</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.AlimentaryQuestionImpl#getStorageConditions <em>Storage Conditions</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AlimentaryQuestionImpl extends MinimalEObjectImpl.Container implements AlimentaryQuestion
{
  /**
	 * The cached value of the '{@link #getAgreedPrice() <em>Agreed Price</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAgreedPrice()
	 * @generated
	 * @ordered
	 */
  protected AgreedPriceQuestion agreedPrice;

  /**
	 * The cached value of the '{@link #getProductQuality() <em>Product Quality</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getProductQuality()
	 * @generated
	 * @ordered
	 */
  protected ProductQualityQuestion productQuality;

  /**
	 * The cached value of the '{@link #getInternationalSeal() <em>International Seal</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getInternationalSeal()
	 * @generated
	 * @ordered
	 */
  protected InternationalSealQuestion internationalSeal;

  /**
	 * The cached value of the '{@link #getHealthInspection() <em>Health Inspection</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getHealthInspection()
	 * @generated
	 * @ordered
	 */
  protected HealthInspectionQuestion healthInspection;

  /**
	 * The cached value of the '{@link #getStorageConditions() <em>Storage Conditions</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getStorageConditions()
	 * @generated
	 * @ordered
	 */
  protected StorageConditionsQuestion storageConditions;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected AlimentaryQuestionImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return SmaCQAPackage.Literals.ALIMENTARY_QUESTION;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public AgreedPriceQuestion getAgreedPrice()
  {
		return agreedPrice;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetAgreedPrice(AgreedPriceQuestion newAgreedPrice, NotificationChain msgs)
  {
		AgreedPriceQuestion oldAgreedPrice = agreedPrice;
		agreedPrice = newAgreedPrice;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE, oldAgreedPrice, newAgreedPrice);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setAgreedPrice(AgreedPriceQuestion newAgreedPrice)
  {
		if (newAgreedPrice != agreedPrice) {
			NotificationChain msgs = null;
			if (agreedPrice != null)
				msgs = ((InternalEObject)agreedPrice).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE, null, msgs);
			if (newAgreedPrice != null)
				msgs = ((InternalEObject)newAgreedPrice).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE, null, msgs);
			msgs = basicSetAgreedPrice(newAgreedPrice, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE, newAgreedPrice, newAgreedPrice));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ProductQualityQuestion getProductQuality()
  {
		return productQuality;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetProductQuality(ProductQualityQuestion newProductQuality, NotificationChain msgs)
  {
		ProductQualityQuestion oldProductQuality = productQuality;
		productQuality = newProductQuality;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY, oldProductQuality, newProductQuality);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setProductQuality(ProductQualityQuestion newProductQuality)
  {
		if (newProductQuality != productQuality) {
			NotificationChain msgs = null;
			if (productQuality != null)
				msgs = ((InternalEObject)productQuality).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY, null, msgs);
			if (newProductQuality != null)
				msgs = ((InternalEObject)newProductQuality).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY, null, msgs);
			msgs = basicSetProductQuality(newProductQuality, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY, newProductQuality, newProductQuality));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public InternationalSealQuestion getInternationalSeal()
  {
		return internationalSeal;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetInternationalSeal(InternationalSealQuestion newInternationalSeal, NotificationChain msgs)
  {
		InternationalSealQuestion oldInternationalSeal = internationalSeal;
		internationalSeal = newInternationalSeal;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL, oldInternationalSeal, newInternationalSeal);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setInternationalSeal(InternationalSealQuestion newInternationalSeal)
  {
		if (newInternationalSeal != internationalSeal) {
			NotificationChain msgs = null;
			if (internationalSeal != null)
				msgs = ((InternalEObject)internationalSeal).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL, null, msgs);
			if (newInternationalSeal != null)
				msgs = ((InternalEObject)newInternationalSeal).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL, null, msgs);
			msgs = basicSetInternationalSeal(newInternationalSeal, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL, newInternationalSeal, newInternationalSeal));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public HealthInspectionQuestion getHealthInspection()
  {
		return healthInspection;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetHealthInspection(HealthInspectionQuestion newHealthInspection, NotificationChain msgs)
  {
		HealthInspectionQuestion oldHealthInspection = healthInspection;
		healthInspection = newHealthInspection;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION, oldHealthInspection, newHealthInspection);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setHealthInspection(HealthInspectionQuestion newHealthInspection)
  {
		if (newHealthInspection != healthInspection) {
			NotificationChain msgs = null;
			if (healthInspection != null)
				msgs = ((InternalEObject)healthInspection).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION, null, msgs);
			if (newHealthInspection != null)
				msgs = ((InternalEObject)newHealthInspection).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION, null, msgs);
			msgs = basicSetHealthInspection(newHealthInspection, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION, newHealthInspection, newHealthInspection));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public StorageConditionsQuestion getStorageConditions()
  {
		return storageConditions;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetStorageConditions(StorageConditionsQuestion newStorageConditions, NotificationChain msgs)
  {
		StorageConditionsQuestion oldStorageConditions = storageConditions;
		storageConditions = newStorageConditions;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS, oldStorageConditions, newStorageConditions);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setStorageConditions(StorageConditionsQuestion newStorageConditions)
  {
		if (newStorageConditions != storageConditions) {
			NotificationChain msgs = null;
			if (storageConditions != null)
				msgs = ((InternalEObject)storageConditions).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS, null, msgs);
			if (newStorageConditions != null)
				msgs = ((InternalEObject)newStorageConditions).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS, null, msgs);
			msgs = basicSetStorageConditions(newStorageConditions, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS, newStorageConditions, newStorageConditions));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE:
				return basicSetAgreedPrice(null, msgs);
			case SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY:
				return basicSetProductQuality(null, msgs);
			case SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL:
				return basicSetInternationalSeal(null, msgs);
			case SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION:
				return basicSetHealthInspection(null, msgs);
			case SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS:
				return basicSetStorageConditions(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE:
				return getAgreedPrice();
			case SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY:
				return getProductQuality();
			case SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL:
				return getInternationalSeal();
			case SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION:
				return getHealthInspection();
			case SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS:
				return getStorageConditions();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE:
				setAgreedPrice((AgreedPriceQuestion)newValue);
				return;
			case SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY:
				setProductQuality((ProductQualityQuestion)newValue);
				return;
			case SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL:
				setInternationalSeal((InternationalSealQuestion)newValue);
				return;
			case SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION:
				setHealthInspection((HealthInspectionQuestion)newValue);
				return;
			case SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS:
				setStorageConditions((StorageConditionsQuestion)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE:
				setAgreedPrice((AgreedPriceQuestion)null);
				return;
			case SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY:
				setProductQuality((ProductQualityQuestion)null);
				return;
			case SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL:
				setInternationalSeal((InternationalSealQuestion)null);
				return;
			case SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION:
				setHealthInspection((HealthInspectionQuestion)null);
				return;
			case SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS:
				setStorageConditions((StorageConditionsQuestion)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.ALIMENTARY_QUESTION__AGREED_PRICE:
				return agreedPrice != null;
			case SmaCQAPackage.ALIMENTARY_QUESTION__PRODUCT_QUALITY:
				return productQuality != null;
			case SmaCQAPackage.ALIMENTARY_QUESTION__INTERNATIONAL_SEAL:
				return internationalSeal != null;
			case SmaCQAPackage.ALIMENTARY_QUESTION__HEALTH_INSPECTION:
				return healthInspection != null;
			case SmaCQAPackage.ALIMENTARY_QUESTION__STORAGE_CONDITIONS:
				return storageConditions != null;
		}
		return super.eIsSet(featureID);
	}

} //AlimentaryQuestionImpl
