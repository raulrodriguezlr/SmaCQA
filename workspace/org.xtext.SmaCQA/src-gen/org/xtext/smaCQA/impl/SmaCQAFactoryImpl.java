/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.smaCQA.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.smaCQA.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SmaCQAFactoryImpl extends EFactoryImpl implements SmaCQAFactory
{
  /**
	 * Creates the default factory implementation.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public static SmaCQAFactory init()
  {
		try {
			SmaCQAFactory theSmaCQAFactory = (SmaCQAFactory)EPackage.Registry.INSTANCE.getEFactory(SmaCQAPackage.eNS_URI);
			if (theSmaCQAFactory != null) {
				return theSmaCQAFactory;
			}
		}
		catch (Exception exception) {
			EcorePlugin.INSTANCE.log(exception);
		}
		return new SmaCQAFactoryImpl();
	}

  /**
	 * Creates an instance of the factory.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public SmaCQAFactoryImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EObject create(EClass eClass)
  {
		switch (eClass.getClassifierID()) {
			case SmaCQAPackage.MODEL: return createModel();
			case SmaCQAPackage.VALUE_EXCHANGE: return createValueExchange();
			case SmaCQAPackage.DATA_QUESTION: return createDataQuestion();
			case SmaCQAPackage.SHIPMENT_QUESTION: return createShipmentQuestion();
			case SmaCQAPackage.INSURANCE_QUESTION: return createInsuranceQuestion();
			case SmaCQAPackage.ALIMENTARY_QUESTION: return createAlimentaryQuestion();
			case SmaCQAPackage.VALUE_OBJECT_QUESTION: return createValueObjectQuestion();
			case SmaCQAPackage.VALUE_OBJECT_RIGHT_QUESTION: return createValueObjectRightQuestion();
			case SmaCQAPackage.VALUE_OBJECT_TOKEN_QUESTION: return createValueObjectTokenQuestion();
			case SmaCQAPackage.VALUE_OBJECT_TANGIBLE_QUESTION: return createValueObjectTangibleQuestion();
			case SmaCQAPackage.DATA_REGISTER: return createDataRegister();
			case SmaCQAPackage.TOKEN: return createToken();
			case SmaCQAPackage.TOKEN_ERC20: return createTokenERC20();
			case SmaCQAPackage.TOKEN_ERC223: return createTokenERC223();
			case SmaCQAPackage.TOKEN_ERC721: return createTokenERC721();
			case SmaCQAPackage.TIME_VALUE_EXCHANGE_DURATION_QUESTION: return createTimeValueExchangeDurationQuestion();
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION: return createTimeStartValueExchangeQuestion();
			case SmaCQAPackage.REPEAT_VALUE_EXCHANGE_QUESTION: return createRepeatValueExchangeQuestion();
			case SmaCQAPackage.CONDITIONS_VALUE_EXCHANGE_QUESTION: return createConditionsValueExchangeQuestion();
			case SmaCQAPackage.LEGAL_QUESTION: return createLegalQuestion();
			case SmaCQAPackage.AGE_QUESTION: return createAgeQuestion();
			case SmaCQAPackage.TAX_QUESTION: return createTaxQuestion();
			case SmaCQAPackage.ADDITIONAL_LEGAL_DOCUMENT_QUESTION: return createAdditionalLegalDocumentQuestion();
			case SmaCQAPackage.REGULATORY_COMPLIANCE_QUESTION: return createRegulatoryComplianceQuestion();
			case SmaCQAPackage.ECONOMY_QUESTION: return createEconomyQuestion();
			case SmaCQAPackage.MINIMUM_AMOUNT_QUESTION: return createMinimumAmountQuestion();
			case SmaCQAPackage.SHIPMENT_COST_RESPONSIBILITY_QUESTION: return createShipmentCostResponsibilityQuestion();
			case SmaCQAPackage.SHIPMENT_DETAILS_QUESTION: return createShipmentDetailsQuestion();
			case SmaCQAPackage.SANITARY_CONTROL_QUESTION: return createSanitaryControlQuestion();
			case SmaCQAPackage.CUSTOMS_QUESTION: return createCustomsQuestion();
			case SmaCQAPackage.IMPORT_TAX_QUESTION: return createImportTaxQuestion();
			case SmaCQAPackage.TAX_SHIPMENT_DETAILS_QUESTION: return createTaxShipmentDetailsQuestion();
			case SmaCQAPackage.GEOGRAPHICAL_QUESTION: return createGeographicalQuestion();
			case SmaCQAPackage.GEOGRAPHICAL_RESTRICTION_QUESTION: return createGeographicalRestrictionQuestion();
			case SmaCQAPackage.ADDRESS_PICKUP_QUESTION: return createAddressPickupQuestion();
			case SmaCQAPackage.ADDRESS_DELIVERY_QUESTION: return createAddressDeliveryQuestion();
			case SmaCQAPackage.SHIPMENT_TRACKING_NUMBER_QUESTION: return createShipmentTrackingNumberQuestion();
			case SmaCQAPackage.DANGEROUS_LOAD_QUESTION: return createDangerousLoadQuestion();
			case SmaCQAPackage.SPECIAL_MEASURES_QUESTION: return createSpecialMeasuresQuestion();
			case SmaCQAPackage.PERISHABLE_QUESTION: return createPerishableQuestion();
			case SmaCQAPackage.EXPIRATION_DATE_QUESTION: return createExpirationDateQuestion();
			case SmaCQAPackage.CARGO_TYPE_QUESTION: return createCargoTypeQuestion();
			case SmaCQAPackage.CARGO_WEIGHT_QUESTION: return createCargoWeightQuestion();
			case SmaCQAPackage.CARGO_DIMENSIONS_QUESTION: return createCargoDimensionsQuestion();
			case SmaCQAPackage.SEA_SHIPMENT_QUESTION: return createSeaShipmentQuestion();
			case SmaCQAPackage.MARITIME_QUESTION: return createMaritimeQuestion();
			case SmaCQAPackage.VOYAGE_QUESTION: return createVoyageQuestion();
			case SmaCQAPackage.MEANS_TRANSPORT_QUESTION: return createMeansTransportQuestion();
			case SmaCQAPackage.COMPANY_QUESTION: return createCompanyQuestion();
			case SmaCQAPackage.DELIVERY_DEADLINE_QUESTION: return createDeliveryDeadlineQuestion();
			case SmaCQAPackage.UPDATES_AND_MONITORING_QUESTION: return createUpdatesAndMonitoringQuestion();
			case SmaCQAPackage.EXTERNAL_MEDIATOR_QUESTION: return createExternalMediatorQuestion();
			case SmaCQAPackage.MEDIATOR_NAME_QUESTION: return createMediatorNameQuestion();
			case SmaCQAPackage.SHIPMENT_INSURANCE_QUESTION: return createShipmentInsuranceQuestion();
			case SmaCQAPackage.INSURANCE_DETAILS_QUESTION: return createInsuranceDetailsQuestion();
			case SmaCQAPackage.RETURNS_OR_CANCELLATIONS_QUESTION: return createReturnsOrCancellationsQuestion();
			case SmaCQAPackage.RETURNS_MANAGEMENT_QUESTION: return createReturnsManagementQuestion();
			case SmaCQAPackage.PENALTY_FOR_NEGLECT_QUESTION: return createPenaltyForNeglectQuestion();
			case SmaCQAPackage.AGREED_PRICE_QUESTION: return createAgreedPriceQuestion();
			case SmaCQAPackage.PRODUCT_QUALITY_QUESTION: return createProductQualityQuestion();
			case SmaCQAPackage.EXPECTED_QUALITY_QUESTION: return createExpectedQualityQuestion();
			case SmaCQAPackage.INTERNATIONAL_SEAL_QUESTION: return createInternationalSealQuestion();
			case SmaCQAPackage.INTERNACIONAL_SEAL_NAME_QUESTION: return createInternacionalSealNameQuestion();
			case SmaCQAPackage.HEALTH_INSPECTION_QUESTION: return createHealthInspectionQuestion();
			case SmaCQAPackage.INSPECTION_RESULT_QUESTION: return createInspectionResultQuestion();
			case SmaCQAPackage.STORAGE_CONDITIONS_QUESTION: return createStorageConditionsQuestion();
			default:
				throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
		switch (eDataType.getClassifierID()) {
			case SmaCQAPackage.TYPE:
				return createTypeFromString(eDataType, initialValue);
			case SmaCQAPackage.UNIT_TIME:
				return createUnitTimeFromString(eDataType, initialValue);
			case SmaCQAPackage.UNIT_COIN:
				return createUnitCoinFromString(eDataType, initialValue);
			case SmaCQAPackage.VOYAGETYPE:
				return createVoyagetypeFromString(eDataType, initialValue);
			case SmaCQAPackage.INSPECTION_RESULT:
				return createinspectionResultFromString(eDataType, initialValue);
			case SmaCQAPackage.PARTICIPANTS:
				return createParticipantsFromString(eDataType, initialValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
		switch (eDataType.getClassifierID()) {
			case SmaCQAPackage.TYPE:
				return convertTypeToString(eDataType, instanceValue);
			case SmaCQAPackage.UNIT_TIME:
				return convertUnitTimeToString(eDataType, instanceValue);
			case SmaCQAPackage.UNIT_COIN:
				return convertUnitCoinToString(eDataType, instanceValue);
			case SmaCQAPackage.VOYAGETYPE:
				return convertVoyagetypeToString(eDataType, instanceValue);
			case SmaCQAPackage.INSPECTION_RESULT:
				return convertinspectionResultToString(eDataType, instanceValue);
			case SmaCQAPackage.PARTICIPANTS:
				return convertParticipantsToString(eDataType, instanceValue);
			default:
				throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
		}
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Model createModel()
  {
		ModelImpl model = new ModelImpl();
		return model;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ValueExchange createValueExchange()
  {
		ValueExchangeImpl valueExchange = new ValueExchangeImpl();
		return valueExchange;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public DataQuestion createDataQuestion()
  {
		DataQuestionImpl dataQuestion = new DataQuestionImpl();
		return dataQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ShipmentQuestion createShipmentQuestion()
  {
		ShipmentQuestionImpl shipmentQuestion = new ShipmentQuestionImpl();
		return shipmentQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public InsuranceQuestion createInsuranceQuestion()
  {
		InsuranceQuestionImpl insuranceQuestion = new InsuranceQuestionImpl();
		return insuranceQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public AlimentaryQuestion createAlimentaryQuestion()
  {
		AlimentaryQuestionImpl alimentaryQuestion = new AlimentaryQuestionImpl();
		return alimentaryQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ValueObjectQuestion createValueObjectQuestion()
  {
		ValueObjectQuestionImpl valueObjectQuestion = new ValueObjectQuestionImpl();
		return valueObjectQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ValueObjectRightQuestion createValueObjectRightQuestion()
  {
		ValueObjectRightQuestionImpl valueObjectRightQuestion = new ValueObjectRightQuestionImpl();
		return valueObjectRightQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ValueObjectTokenQuestion createValueObjectTokenQuestion()
  {
		ValueObjectTokenQuestionImpl valueObjectTokenQuestion = new ValueObjectTokenQuestionImpl();
		return valueObjectTokenQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ValueObjectTangibleQuestion createValueObjectTangibleQuestion()
  {
		ValueObjectTangibleQuestionImpl valueObjectTangibleQuestion = new ValueObjectTangibleQuestionImpl();
		return valueObjectTangibleQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public DataRegister createDataRegister()
  {
		DataRegisterImpl dataRegister = new DataRegisterImpl();
		return dataRegister;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Token createToken()
  {
		TokenImpl token = new TokenImpl();
		return token;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public TokenERC20 createTokenERC20()
  {
		TokenERC20Impl tokenERC20 = new TokenERC20Impl();
		return tokenERC20;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public TokenERC223 createTokenERC223()
  {
		TokenERC223Impl tokenERC223 = new TokenERC223Impl();
		return tokenERC223;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public TokenERC721 createTokenERC721()
  {
		TokenERC721Impl tokenERC721 = new TokenERC721Impl();
		return tokenERC721;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public TimeValueExchangeDurationQuestion createTimeValueExchangeDurationQuestion()
  {
		TimeValueExchangeDurationQuestionImpl timeValueExchangeDurationQuestion = new TimeValueExchangeDurationQuestionImpl();
		return timeValueExchangeDurationQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public TimeStartValueExchangeQuestion createTimeStartValueExchangeQuestion()
  {
		TimeStartValueExchangeQuestionImpl timeStartValueExchangeQuestion = new TimeStartValueExchangeQuestionImpl();
		return timeStartValueExchangeQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public RepeatValueExchangeQuestion createRepeatValueExchangeQuestion()
  {
		RepeatValueExchangeQuestionImpl repeatValueExchangeQuestion = new RepeatValueExchangeQuestionImpl();
		return repeatValueExchangeQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ConditionsValueExchangeQuestion createConditionsValueExchangeQuestion()
  {
		ConditionsValueExchangeQuestionImpl conditionsValueExchangeQuestion = new ConditionsValueExchangeQuestionImpl();
		return conditionsValueExchangeQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public LegalQuestion createLegalQuestion()
  {
		LegalQuestionImpl legalQuestion = new LegalQuestionImpl();
		return legalQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public AgeQuestion createAgeQuestion()
  {
		AgeQuestionImpl ageQuestion = new AgeQuestionImpl();
		return ageQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public TaxQuestion createTaxQuestion()
  {
		TaxQuestionImpl taxQuestion = new TaxQuestionImpl();
		return taxQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public AdditionalLegalDocumentQuestion createAdditionalLegalDocumentQuestion()
  {
		AdditionalLegalDocumentQuestionImpl additionalLegalDocumentQuestion = new AdditionalLegalDocumentQuestionImpl();
		return additionalLegalDocumentQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public RegulatoryComplianceQuestion createRegulatoryComplianceQuestion()
  {
		RegulatoryComplianceQuestionImpl regulatoryComplianceQuestion = new RegulatoryComplianceQuestionImpl();
		return regulatoryComplianceQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EconomyQuestion createEconomyQuestion()
  {
		EconomyQuestionImpl economyQuestion = new EconomyQuestionImpl();
		return economyQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public MinimumAmountQuestion createMinimumAmountQuestion()
  {
		MinimumAmountQuestionImpl minimumAmountQuestion = new MinimumAmountQuestionImpl();
		return minimumAmountQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ShipmentCostResponsibilityQuestion createShipmentCostResponsibilityQuestion()
  {
		ShipmentCostResponsibilityQuestionImpl shipmentCostResponsibilityQuestion = new ShipmentCostResponsibilityQuestionImpl();
		return shipmentCostResponsibilityQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ShipmentDetailsQuestion createShipmentDetailsQuestion()
  {
		ShipmentDetailsQuestionImpl shipmentDetailsQuestion = new ShipmentDetailsQuestionImpl();
		return shipmentDetailsQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public SanitaryControlQuestion createSanitaryControlQuestion()
  {
		SanitaryControlQuestionImpl sanitaryControlQuestion = new SanitaryControlQuestionImpl();
		return sanitaryControlQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public CustomsQuestion createCustomsQuestion()
  {
		CustomsQuestionImpl customsQuestion = new CustomsQuestionImpl();
		return customsQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ImportTaxQuestion createImportTaxQuestion()
  {
		ImportTaxQuestionImpl importTaxQuestion = new ImportTaxQuestionImpl();
		return importTaxQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public TaxShipmentDetailsQuestion createTaxShipmentDetailsQuestion()
  {
		TaxShipmentDetailsQuestionImpl taxShipmentDetailsQuestion = new TaxShipmentDetailsQuestionImpl();
		return taxShipmentDetailsQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public GeographicalQuestion createGeographicalQuestion()
  {
		GeographicalQuestionImpl geographicalQuestion = new GeographicalQuestionImpl();
		return geographicalQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public GeographicalRestrictionQuestion createGeographicalRestrictionQuestion()
  {
		GeographicalRestrictionQuestionImpl geographicalRestrictionQuestion = new GeographicalRestrictionQuestionImpl();
		return geographicalRestrictionQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public AddressPickupQuestion createAddressPickupQuestion()
  {
		AddressPickupQuestionImpl addressPickupQuestion = new AddressPickupQuestionImpl();
		return addressPickupQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public AddressDeliveryQuestion createAddressDeliveryQuestion()
  {
		AddressDeliveryQuestionImpl addressDeliveryQuestion = new AddressDeliveryQuestionImpl();
		return addressDeliveryQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ShipmentTrackingNumberQuestion createShipmentTrackingNumberQuestion()
  {
		ShipmentTrackingNumberQuestionImpl shipmentTrackingNumberQuestion = new ShipmentTrackingNumberQuestionImpl();
		return shipmentTrackingNumberQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public DangerousLoadQuestion createDangerousLoadQuestion()
  {
		DangerousLoadQuestionImpl dangerousLoadQuestion = new DangerousLoadQuestionImpl();
		return dangerousLoadQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public SpecialMeasuresQuestion createSpecialMeasuresQuestion()
  {
		SpecialMeasuresQuestionImpl specialMeasuresQuestion = new SpecialMeasuresQuestionImpl();
		return specialMeasuresQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public PerishableQuestion createPerishableQuestion()
  {
		PerishableQuestionImpl perishableQuestion = new PerishableQuestionImpl();
		return perishableQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ExpirationDateQuestion createExpirationDateQuestion()
  {
		ExpirationDateQuestionImpl expirationDateQuestion = new ExpirationDateQuestionImpl();
		return expirationDateQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public CargoTypeQuestion createCargoTypeQuestion()
  {
		CargoTypeQuestionImpl cargoTypeQuestion = new CargoTypeQuestionImpl();
		return cargoTypeQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public CargoWeightQuestion createCargoWeightQuestion()
  {
		CargoWeightQuestionImpl cargoWeightQuestion = new CargoWeightQuestionImpl();
		return cargoWeightQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public CargoDimensionsQuestion createCargoDimensionsQuestion()
  {
		CargoDimensionsQuestionImpl cargoDimensionsQuestion = new CargoDimensionsQuestionImpl();
		return cargoDimensionsQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public SeaShipmentQuestion createSeaShipmentQuestion()
  {
		SeaShipmentQuestionImpl seaShipmentQuestion = new SeaShipmentQuestionImpl();
		return seaShipmentQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public MaritimeQuestion createMaritimeQuestion()
  {
		MaritimeQuestionImpl maritimeQuestion = new MaritimeQuestionImpl();
		return maritimeQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public VoyageQuestion createVoyageQuestion()
  {
		VoyageQuestionImpl voyageQuestion = new VoyageQuestionImpl();
		return voyageQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public MeansTransportQuestion createMeansTransportQuestion()
  {
		MeansTransportQuestionImpl meansTransportQuestion = new MeansTransportQuestionImpl();
		return meansTransportQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public CompanyQuestion createCompanyQuestion()
  {
		CompanyQuestionImpl companyQuestion = new CompanyQuestionImpl();
		return companyQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public DeliveryDeadlineQuestion createDeliveryDeadlineQuestion()
  {
		DeliveryDeadlineQuestionImpl deliveryDeadlineQuestion = new DeliveryDeadlineQuestionImpl();
		return deliveryDeadlineQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public UpdatesAndMonitoringQuestion createUpdatesAndMonitoringQuestion()
  {
		UpdatesAndMonitoringQuestionImpl updatesAndMonitoringQuestion = new UpdatesAndMonitoringQuestionImpl();
		return updatesAndMonitoringQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ExternalMediatorQuestion createExternalMediatorQuestion()
  {
		ExternalMediatorQuestionImpl externalMediatorQuestion = new ExternalMediatorQuestionImpl();
		return externalMediatorQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public MediatorNameQuestion createMediatorNameQuestion()
  {
		MediatorNameQuestionImpl mediatorNameQuestion = new MediatorNameQuestionImpl();
		return mediatorNameQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ShipmentInsuranceQuestion createShipmentInsuranceQuestion()
  {
		ShipmentInsuranceQuestionImpl shipmentInsuranceQuestion = new ShipmentInsuranceQuestionImpl();
		return shipmentInsuranceQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public InsuranceDetailsQuestion createInsuranceDetailsQuestion()
  {
		InsuranceDetailsQuestionImpl insuranceDetailsQuestion = new InsuranceDetailsQuestionImpl();
		return insuranceDetailsQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ReturnsOrCancellationsQuestion createReturnsOrCancellationsQuestion()
  {
		ReturnsOrCancellationsQuestionImpl returnsOrCancellationsQuestion = new ReturnsOrCancellationsQuestionImpl();
		return returnsOrCancellationsQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ReturnsManagementQuestion createReturnsManagementQuestion()
  {
		ReturnsManagementQuestionImpl returnsManagementQuestion = new ReturnsManagementQuestionImpl();
		return returnsManagementQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public PenaltyForNeglectQuestion createPenaltyForNeglectQuestion()
  {
		PenaltyForNeglectQuestionImpl penaltyForNeglectQuestion = new PenaltyForNeglectQuestionImpl();
		return penaltyForNeglectQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public AgreedPriceQuestion createAgreedPriceQuestion()
  {
		AgreedPriceQuestionImpl agreedPriceQuestion = new AgreedPriceQuestionImpl();
		return agreedPriceQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ProductQualityQuestion createProductQualityQuestion()
  {
		ProductQualityQuestionImpl productQualityQuestion = new ProductQualityQuestionImpl();
		return productQualityQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ExpectedQualityQuestion createExpectedQualityQuestion()
  {
		ExpectedQualityQuestionImpl expectedQualityQuestion = new ExpectedQualityQuestionImpl();
		return expectedQualityQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public InternationalSealQuestion createInternationalSealQuestion()
  {
		InternationalSealQuestionImpl internationalSealQuestion = new InternationalSealQuestionImpl();
		return internationalSealQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public InternacionalSealNameQuestion createInternacionalSealNameQuestion()
  {
		InternacionalSealNameQuestionImpl internacionalSealNameQuestion = new InternacionalSealNameQuestionImpl();
		return internacionalSealNameQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public HealthInspectionQuestion createHealthInspectionQuestion()
  {
		HealthInspectionQuestionImpl healthInspectionQuestion = new HealthInspectionQuestionImpl();
		return healthInspectionQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public InspectionResultQuestion createInspectionResultQuestion()
  {
		InspectionResultQuestionImpl inspectionResultQuestion = new InspectionResultQuestionImpl();
		return inspectionResultQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public StorageConditionsQuestion createStorageConditionsQuestion()
  {
		StorageConditionsQuestionImpl storageConditionsQuestion = new StorageConditionsQuestionImpl();
		return storageConditionsQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Type createTypeFromString(EDataType eDataType, String initialValue)
  {
		Type result = Type.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertTypeToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public UnitTime createUnitTimeFromString(EDataType eDataType, String initialValue)
  {
		UnitTime result = UnitTime.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertUnitTimeToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public UnitCoin createUnitCoinFromString(EDataType eDataType, String initialValue)
  {
		UnitCoin result = UnitCoin.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertUnitCoinToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Voyagetype createVoyagetypeFromString(EDataType eDataType, String initialValue)
  {
		Voyagetype result = Voyagetype.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertVoyagetypeToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public inspectionResult createinspectionResultFromString(EDataType eDataType, String initialValue)
  {
		inspectionResult result = inspectionResult.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertinspectionResultToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public Participants createParticipantsFromString(EDataType eDataType, String initialValue)
  {
		Participants result = Participants.get(initialValue);
		if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
		return result;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public String convertParticipantsToString(EDataType eDataType, Object instanceValue)
  {
		return instanceValue == null ? null : instanceValue.toString();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public SmaCQAPackage getSmaCQAPackage()
  {
		return (SmaCQAPackage)getEPackage();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @deprecated
	 * @generated
	 */
  @Deprecated
  public static SmaCQAPackage getPackage()
  {
		return SmaCQAPackage.eINSTANCE;
	}

} //SmaCQAFactoryImpl
