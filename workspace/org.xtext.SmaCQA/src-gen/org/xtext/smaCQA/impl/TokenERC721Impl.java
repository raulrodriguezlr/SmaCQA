/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.smaCQA.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.smaCQA.DataRegister;
import org.xtext.smaCQA.SmaCQAPackage;
import org.xtext.smaCQA.TokenERC721;
import org.xtext.smaCQA.UnitCoin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Token ERC721</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaCQA.impl.TokenERC721Impl#getAnswerUnitPrice <em>Answer Unit Price</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.TokenERC721Impl#getAnswerUnitCoin <em>Answer Unit Coin</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.TokenERC721Impl#getAnswerMetadataSentence <em>Answer Metadata Sentence</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.TokenERC721Impl#getAnswer <em>Answer</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TokenERC721Impl extends TokenImpl implements TokenERC721
{
  /**
	 * The default value of the '{@link #getAnswerUnitPrice() <em>Answer Unit Price</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswerUnitPrice()
	 * @generated
	 * @ordered
	 */
  protected static final int ANSWER_UNIT_PRICE_EDEFAULT = 0;

  /**
	 * The cached value of the '{@link #getAnswerUnitPrice() <em>Answer Unit Price</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswerUnitPrice()
	 * @generated
	 * @ordered
	 */
  protected int answerUnitPrice = ANSWER_UNIT_PRICE_EDEFAULT;

  /**
	 * The default value of the '{@link #getAnswerUnitCoin() <em>Answer Unit Coin</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswerUnitCoin()
	 * @generated
	 * @ordered
	 */
  protected static final UnitCoin ANSWER_UNIT_COIN_EDEFAULT = UnitCoin.ETHER;

  /**
	 * The cached value of the '{@link #getAnswerUnitCoin() <em>Answer Unit Coin</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswerUnitCoin()
	 * @generated
	 * @ordered
	 */
  protected UnitCoin answerUnitCoin = ANSWER_UNIT_COIN_EDEFAULT;

  /**
	 * The default value of the '{@link #getAnswerMetadataSentence() <em>Answer Metadata Sentence</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswerMetadataSentence()
	 * @generated
	 * @ordered
	 */
  protected static final String ANSWER_METADATA_SENTENCE_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getAnswerMetadataSentence() <em>Answer Metadata Sentence</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswerMetadataSentence()
	 * @generated
	 * @ordered
	 */
  protected String answerMetadataSentence = ANSWER_METADATA_SENTENCE_EDEFAULT;

  /**
	 * The cached value of the '{@link #getAnswer() <em>Answer</em>}' containment reference list.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswer()
	 * @generated
	 * @ordered
	 */
  protected EList<DataRegister> answer;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TokenERC721Impl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return SmaCQAPackage.Literals.TOKEN_ERC721;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public int getAnswerUnitPrice()
  {
		return answerUnitPrice;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setAnswerUnitPrice(int newAnswerUnitPrice)
  {
		int oldAnswerUnitPrice = answerUnitPrice;
		answerUnitPrice = newAnswerUnitPrice;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_PRICE, oldAnswerUnitPrice, answerUnitPrice));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public UnitCoin getAnswerUnitCoin()
  {
		return answerUnitCoin;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setAnswerUnitCoin(UnitCoin newAnswerUnitCoin)
  {
		UnitCoin oldAnswerUnitCoin = answerUnitCoin;
		answerUnitCoin = newAnswerUnitCoin == null ? ANSWER_UNIT_COIN_EDEFAULT : newAnswerUnitCoin;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_COIN, oldAnswerUnitCoin, answerUnitCoin));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String getAnswerMetadataSentence()
  {
		return answerMetadataSentence;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setAnswerMetadataSentence(String newAnswerMetadataSentence)
  {
		String oldAnswerMetadataSentence = answerMetadataSentence;
		answerMetadataSentence = newAnswerMetadataSentence;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.TOKEN_ERC721__ANSWER_METADATA_SENTENCE, oldAnswerMetadataSentence, answerMetadataSentence));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EList<DataRegister> getAnswer()
  {
		if (answer == null) {
			answer = new EObjectContainmentEList<DataRegister>(DataRegister.class, this, SmaCQAPackage.TOKEN_ERC721__ANSWER);
		}
		return answer;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case SmaCQAPackage.TOKEN_ERC721__ANSWER:
				return ((InternalEList<?>)getAnswer()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_PRICE:
				return getAnswerUnitPrice();
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_COIN:
				return getAnswerUnitCoin();
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_METADATA_SENTENCE:
				return getAnswerMetadataSentence();
			case SmaCQAPackage.TOKEN_ERC721__ANSWER:
				return getAnswer();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_PRICE:
				setAnswerUnitPrice((Integer)newValue);
				return;
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_COIN:
				setAnswerUnitCoin((UnitCoin)newValue);
				return;
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_METADATA_SENTENCE:
				setAnswerMetadataSentence((String)newValue);
				return;
			case SmaCQAPackage.TOKEN_ERC721__ANSWER:
				getAnswer().clear();
				getAnswer().addAll((Collection<? extends DataRegister>)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_PRICE:
				setAnswerUnitPrice(ANSWER_UNIT_PRICE_EDEFAULT);
				return;
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_COIN:
				setAnswerUnitCoin(ANSWER_UNIT_COIN_EDEFAULT);
				return;
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_METADATA_SENTENCE:
				setAnswerMetadataSentence(ANSWER_METADATA_SENTENCE_EDEFAULT);
				return;
			case SmaCQAPackage.TOKEN_ERC721__ANSWER:
				getAnswer().clear();
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_PRICE:
				return answerUnitPrice != ANSWER_UNIT_PRICE_EDEFAULT;
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_UNIT_COIN:
				return answerUnitCoin != ANSWER_UNIT_COIN_EDEFAULT;
			case SmaCQAPackage.TOKEN_ERC721__ANSWER_METADATA_SENTENCE:
				return ANSWER_METADATA_SENTENCE_EDEFAULT == null ? answerMetadataSentence != null : !ANSWER_METADATA_SENTENCE_EDEFAULT.equals(answerMetadataSentence);
			case SmaCQAPackage.TOKEN_ERC721__ANSWER:
				return answer != null && !answer.isEmpty();
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (answerUnitPrice: ");
		result.append(answerUnitPrice);
		result.append(", answerUnitCoin: ");
		result.append(answerUnitCoin);
		result.append(", answerMetadataSentence: ");
		result.append(answerMetadataSentence);
		result.append(')');
		return result.toString();
	}

} //TokenERC721Impl
