/*
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmaCQAGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.Model");
		private final Assignment cValueExchangesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueExchangesValueExchangeParserRuleCall_0 = (RuleCall)cValueExchangesAssignment.eContents().get(0);
		
		///*El modelo contempla al menos un intercambio de valor */ Model:
		//	valueExchanges+=ValueExchange+;
		@Override public ParserRule getRule() { return rule; }
		
		//valueExchanges+=ValueExchange+
		public Assignment getValueExchangesAssignment() { return cValueExchangesAssignment; }
		
		//ValueExchange
		public RuleCall getValueExchangesValueExchangeParserRuleCall_0() { return cValueExchangesValueExchangeParserRuleCall_0; }
	}
	public class ValueExchangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ValueExchange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cValueExchangeTheExchangeOfValueInWhichKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActorSendAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActorSendIDTerminalRuleCall_1_0 = (RuleCall)cActorSendAssignment_1.eContents().get(0);
		private final Keyword cSendsGrantsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActorReceiptAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActorReceiptIDTerminalRuleCall_3_0 = (RuleCall)cActorReceiptAssignment_3.eContents().get(0);
		private final Keyword cTheFollowingObjectOfValueKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cValueObjectAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueObjectIDTerminalRuleCall_5_0 = (RuleCall)cValueObjectAssignment_5.eContents().get(0);
		private final Keyword cHasTheFollowingAssociatedQuestionsAndAnswersKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final RuleCall cEOLINETerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDataQuestionsKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cEOLINETerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cDataQuestionAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cDataQuestionDataQuestionParserRuleCall_8_2_0 = (RuleCall)cDataQuestionAssignment_8_2.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cLegalQuestionsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final RuleCall cEOLINETerminalRuleCall_9_1 = (RuleCall)cGroup_9.eContents().get(1);
		private final Assignment cLegalQuestionAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cLegalQuestionLegalQuestionParserRuleCall_9_2_0 = (RuleCall)cLegalQuestionAssignment_9_2.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cEconomyQuestionsKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cEOLINETerminalRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Assignment cEconomyQuestionAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cEconomyQuestionEconomyQuestionParserRuleCall_10_2_0 = (RuleCall)cEconomyQuestionAssignment_10_2.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cShipmentQuestionsKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final RuleCall cEOLINETerminalRuleCall_11_1 = (RuleCall)cGroup_11.eContents().get(1);
		private final Assignment cShipmentQuestionAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cShipmentQuestionShipmentQuestionParserRuleCall_11_2_0 = (RuleCall)cShipmentQuestionAssignment_11_2.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cInsuranceShipmentQuestionsKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final RuleCall cEOLINETerminalRuleCall_12_1 = (RuleCall)cGroup_12.eContents().get(1);
		private final Assignment cInsuranceQuestionAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cInsuranceQuestionInsuranceQuestionParserRuleCall_12_2_0 = (RuleCall)cInsuranceQuestionAssignment_12_2.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cAlimentaryCargoQuestionsKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final RuleCall cEOLINETerminalRuleCall_13_1 = (RuleCall)cGroup_13.eContents().get(1);
		private final Assignment cAlimentaryQuestionAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cAlimentaryQuestionAlimentaryQuestionParserRuleCall_13_2_0 = (RuleCall)cAlimentaryQuestionAssignment_13_2.eContents().get(0);
		private final Keyword cCompletionOfTheQuestionProcessForThisValueExchangeKeyword_14 = (Keyword)cGroup.eContents().get(14);
		
		///*En cada value exchange:
		// * 
		// * actorSend = Actor que envía el objeto de valor negociado (bien tangible o intangible) al actorReceipt
		// * actorReceipt = Actor que recibe el objeto de valor negociado (bien tangible o intangible) por parte del actorSend
		// * valueObject = Objeto de valor negociado entre ambos actores
		// */ ValueExchange:
		//"================= Value Exchange ======================= 
		//The exchange of value in which" actorSend=ID "sends/grants" actorReceipt=ID "the following object of value"
		//	valueObject=ID "has the following associated questions and answers: " EOLINE?
		//	("--------- 1.Data Questions: -----------" EOLINE?
		//	dataQuestion=DataQuestion)? ("--------- 2.Legal Questions: -----------" EOLINE?
		//	legalQuestion=LegalQuestion)? ("--------- 3.Economy Questions: -----------" EOLINE?
		//	economyQuestion=EconomyQuestion)? ("--------- 4. Shipment Questions:-----------" EOLINE?
		//	shipmentQuestion=ShipmentQuestion)? ("--------- 5. Insurance shipment Questions:-----------" EOLINE?
		//	insuranceQuestion=InsuranceQuestion)? ("--------- 6. Alimentary Cargo Questions:-----------" EOLINE?
		//	alimentaryQuestion=AlimentaryQuestion)?
		//	"================= Completion of the question process for this value exchange =================";
		@Override public ParserRule getRule() { return rule; }
		
		//"================= Value Exchange ======================= 
		//The exchange of value in which" actorSend=ID "sends/grants" actorReceipt=ID "the following object of value"
		//valueObject=ID "has the following associated questions and answers: " EOLINE?
		//("--------- 1.Data Questions: -----------" EOLINE? dataQuestion=DataQuestion)?
		//("--------- 2.Legal Questions: -----------" EOLINE? legalQuestion=LegalQuestion)?
		//("--------- 3.Economy Questions: -----------" EOLINE? economyQuestion=EconomyQuestion)?
		//("--------- 4. Shipment Questions:-----------" EOLINE? shipmentQuestion=ShipmentQuestion)?
		//("--------- 5. Insurance shipment Questions:-----------" EOLINE? insuranceQuestion=InsuranceQuestion)?
		//("--------- 6. Alimentary Cargo Questions:-----------" EOLINE? alimentaryQuestion=AlimentaryQuestion)?
		//"================= Completion of the question process for this value exchange ================="
		public Group getGroup() { return cGroup; }
		
		//"================= Value Exchange ======================= 
		//The exchange of value in which"
		public Keyword getValueExchangeTheExchangeOfValueInWhichKeyword_0() { return cValueExchangeTheExchangeOfValueInWhichKeyword_0; }
		
		//actorSend=ID
		public Assignment getActorSendAssignment_1() { return cActorSendAssignment_1; }
		
		//ID
		public RuleCall getActorSendIDTerminalRuleCall_1_0() { return cActorSendIDTerminalRuleCall_1_0; }
		
		//"sends/grants"
		public Keyword getSendsGrantsKeyword_2() { return cSendsGrantsKeyword_2; }
		
		//actorReceipt=ID
		public Assignment getActorReceiptAssignment_3() { return cActorReceiptAssignment_3; }
		
		//ID
		public RuleCall getActorReceiptIDTerminalRuleCall_3_0() { return cActorReceiptIDTerminalRuleCall_3_0; }
		
		//"the following object of value"
		public Keyword getTheFollowingObjectOfValueKeyword_4() { return cTheFollowingObjectOfValueKeyword_4; }
		
		//valueObject=ID
		public Assignment getValueObjectAssignment_5() { return cValueObjectAssignment_5; }
		
		//ID
		public RuleCall getValueObjectIDTerminalRuleCall_5_0() { return cValueObjectIDTerminalRuleCall_5_0; }
		
		//"has the following associated questions and answers: "
		public Keyword getHasTheFollowingAssociatedQuestionsAndAnswersKeyword_6() { return cHasTheFollowingAssociatedQuestionsAndAnswersKeyword_6; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_7() { return cEOLINETerminalRuleCall_7; }
		
		//("--------- 1.Data Questions: -----------" EOLINE? dataQuestion=DataQuestion)?
		public Group getGroup_8() { return cGroup_8; }
		
		//"--------- 1.Data Questions: -----------"
		public Keyword getDataQuestionsKeyword_8_0() { return cDataQuestionsKeyword_8_0; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_8_1() { return cEOLINETerminalRuleCall_8_1; }
		
		//dataQuestion=DataQuestion
		public Assignment getDataQuestionAssignment_8_2() { return cDataQuestionAssignment_8_2; }
		
		//DataQuestion
		public RuleCall getDataQuestionDataQuestionParserRuleCall_8_2_0() { return cDataQuestionDataQuestionParserRuleCall_8_2_0; }
		
		//("--------- 2.Legal Questions: -----------" EOLINE? legalQuestion=LegalQuestion)?
		public Group getGroup_9() { return cGroup_9; }
		
		//"--------- 2.Legal Questions: -----------"
		public Keyword getLegalQuestionsKeyword_9_0() { return cLegalQuestionsKeyword_9_0; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_9_1() { return cEOLINETerminalRuleCall_9_1; }
		
		//legalQuestion=LegalQuestion
		public Assignment getLegalQuestionAssignment_9_2() { return cLegalQuestionAssignment_9_2; }
		
		//LegalQuestion
		public RuleCall getLegalQuestionLegalQuestionParserRuleCall_9_2_0() { return cLegalQuestionLegalQuestionParserRuleCall_9_2_0; }
		
		//("--------- 3.Economy Questions: -----------" EOLINE? economyQuestion=EconomyQuestion)?
		public Group getGroup_10() { return cGroup_10; }
		
		//"--------- 3.Economy Questions: -----------"
		public Keyword getEconomyQuestionsKeyword_10_0() { return cEconomyQuestionsKeyword_10_0; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_10_1() { return cEOLINETerminalRuleCall_10_1; }
		
		//economyQuestion=EconomyQuestion
		public Assignment getEconomyQuestionAssignment_10_2() { return cEconomyQuestionAssignment_10_2; }
		
		//EconomyQuestion
		public RuleCall getEconomyQuestionEconomyQuestionParserRuleCall_10_2_0() { return cEconomyQuestionEconomyQuestionParserRuleCall_10_2_0; }
		
		//("--------- 4. Shipment Questions:-----------" EOLINE? shipmentQuestion=ShipmentQuestion)?
		public Group getGroup_11() { return cGroup_11; }
		
		//"--------- 4. Shipment Questions:-----------"
		public Keyword getShipmentQuestionsKeyword_11_0() { return cShipmentQuestionsKeyword_11_0; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_11_1() { return cEOLINETerminalRuleCall_11_1; }
		
		//shipmentQuestion=ShipmentQuestion
		public Assignment getShipmentQuestionAssignment_11_2() { return cShipmentQuestionAssignment_11_2; }
		
		//ShipmentQuestion
		public RuleCall getShipmentQuestionShipmentQuestionParserRuleCall_11_2_0() { return cShipmentQuestionShipmentQuestionParserRuleCall_11_2_0; }
		
		//("--------- 5. Insurance shipment Questions:-----------" EOLINE? insuranceQuestion=InsuranceQuestion)?
		public Group getGroup_12() { return cGroup_12; }
		
		//"--------- 5. Insurance shipment Questions:-----------"
		public Keyword getInsuranceShipmentQuestionsKeyword_12_0() { return cInsuranceShipmentQuestionsKeyword_12_0; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_12_1() { return cEOLINETerminalRuleCall_12_1; }
		
		//insuranceQuestion=InsuranceQuestion
		public Assignment getInsuranceQuestionAssignment_12_2() { return cInsuranceQuestionAssignment_12_2; }
		
		//InsuranceQuestion
		public RuleCall getInsuranceQuestionInsuranceQuestionParserRuleCall_12_2_0() { return cInsuranceQuestionInsuranceQuestionParserRuleCall_12_2_0; }
		
		//("--------- 6. Alimentary Cargo Questions:-----------" EOLINE? alimentaryQuestion=AlimentaryQuestion)?
		public Group getGroup_13() { return cGroup_13; }
		
		//"--------- 6. Alimentary Cargo Questions:-----------"
		public Keyword getAlimentaryCargoQuestionsKeyword_13_0() { return cAlimentaryCargoQuestionsKeyword_13_0; }
		
		//EOLINE?
		public RuleCall getEOLINETerminalRuleCall_13_1() { return cEOLINETerminalRuleCall_13_1; }
		
		//alimentaryQuestion=AlimentaryQuestion
		public Assignment getAlimentaryQuestionAssignment_13_2() { return cAlimentaryQuestionAssignment_13_2; }
		
		//AlimentaryQuestion
		public RuleCall getAlimentaryQuestionAlimentaryQuestionParserRuleCall_13_2_0() { return cAlimentaryQuestionAlimentaryQuestionParserRuleCall_13_2_0; }
		
		//"================= Completion of the question process for this value exchange ================="
		public Keyword getCompletionOfTheQuestionProcessForThisValueExchangeKeyword_14() { return cCompletionOfTheQuestionProcessForThisValueExchangeKeyword_14; }
	}
	public class DataQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.DataQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTimeDurationValueExchangeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTimeDurationValueExchangeTimeValueExchangeDurationQuestionParserRuleCall_0_0 = (RuleCall)cTimeDurationValueExchangeAssignment_0.eContents().get(0);
		private final Assignment cTimeStartValueExchangeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTimeStartValueExchangeTimeStartValueExchangeQuestionParserRuleCall_1_0 = (RuleCall)cTimeStartValueExchangeAssignment_1.eContents().get(0);
		private final Assignment cRepeatValueExchangeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRepeatValueExchangeRepeatValueExchangeQuestionParserRuleCall_2_0 = (RuleCall)cRepeatValueExchangeAssignment_2.eContents().get(0);
		private final Assignment cConditionValueExchangeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionValueExchangeConditionsValueExchangeQuestionParserRuleCall_3_0 = (RuleCall)cConditionValueExchangeAssignment_3.eContents().get(0);
		private final Assignment cValueObjectTypeValueExchangeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValueObjectTypeValueExchangeValueObjectQuestionParserRuleCall_4_0 = (RuleCall)cValueObjectTypeValueExchangeAssignment_4.eContents().get(0);
		
		///*DataQuestion: Son preguntas para registrar una determinada funcionalidad en el smart contract con respecto a los intercambios de valor
		// * 
		// * timeDurationValueExchange = Si el intercambio de valor esta sujeto a un determinado intervalo de tiempo
		// * timeStartValueExchange = Si el intercambio de valor esta sujeto a que empiece en  un determinado intervalo de tiempo
		// * repeatValueExchange = Si el intercambio de valor se repite durante determinado intervalo de tiempo
		// * conditionValueExchange = Si el intercambio de valor esta sujeto a las mismas condiciones
		// * valueObjectTypeValueExchange = ¿Cuál es la naturaleza del objeto de valor negociado?
		// */ DataQuestion:
		//	timeDurationValueExchange=TimeValueExchangeDurationQuestion?
		//	timeStartValueExchange=TimeStartValueExchangeQuestion?
		//	repeatValueExchange=RepeatValueExchangeQuestion?
		//	conditionValueExchange=ConditionsValueExchangeQuestion?
		//	valueObjectTypeValueExchange=ValueObjectQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//timeDurationValueExchange=TimeValueExchangeDurationQuestion? timeStartValueExchange=TimeStartValueExchangeQuestion?
		//repeatValueExchange=RepeatValueExchangeQuestion? conditionValueExchange=ConditionsValueExchangeQuestion?
		//valueObjectTypeValueExchange=ValueObjectQuestion?
		public Group getGroup() { return cGroup; }
		
		//timeDurationValueExchange=TimeValueExchangeDurationQuestion?
		public Assignment getTimeDurationValueExchangeAssignment_0() { return cTimeDurationValueExchangeAssignment_0; }
		
		//TimeValueExchangeDurationQuestion
		public RuleCall getTimeDurationValueExchangeTimeValueExchangeDurationQuestionParserRuleCall_0_0() { return cTimeDurationValueExchangeTimeValueExchangeDurationQuestionParserRuleCall_0_0; }
		
		//timeStartValueExchange=TimeStartValueExchangeQuestion?
		public Assignment getTimeStartValueExchangeAssignment_1() { return cTimeStartValueExchangeAssignment_1; }
		
		//TimeStartValueExchangeQuestion
		public RuleCall getTimeStartValueExchangeTimeStartValueExchangeQuestionParserRuleCall_1_0() { return cTimeStartValueExchangeTimeStartValueExchangeQuestionParserRuleCall_1_0; }
		
		//repeatValueExchange=RepeatValueExchangeQuestion?
		public Assignment getRepeatValueExchangeAssignment_2() { return cRepeatValueExchangeAssignment_2; }
		
		//RepeatValueExchangeQuestion
		public RuleCall getRepeatValueExchangeRepeatValueExchangeQuestionParserRuleCall_2_0() { return cRepeatValueExchangeRepeatValueExchangeQuestionParserRuleCall_2_0; }
		
		//conditionValueExchange=ConditionsValueExchangeQuestion?
		public Assignment getConditionValueExchangeAssignment_3() { return cConditionValueExchangeAssignment_3; }
		
		//ConditionsValueExchangeQuestion
		public RuleCall getConditionValueExchangeConditionsValueExchangeQuestionParserRuleCall_3_0() { return cConditionValueExchangeConditionsValueExchangeQuestionParserRuleCall_3_0; }
		
		//valueObjectTypeValueExchange=ValueObjectQuestion?
		public Assignment getValueObjectTypeValueExchangeAssignment_4() { return cValueObjectTypeValueExchangeAssignment_4; }
		
		//ValueObjectQuestion
		public RuleCall getValueObjectTypeValueExchangeValueObjectQuestionParserRuleCall_4_0() { return cValueObjectTypeValueExchangeValueObjectQuestionParserRuleCall_4_0; }
	}
	public class ShipmentQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ShipmentQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShipmentDetailsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cShipmentDetailsShipmentDetailsQuestionParserRuleCall_0_0 = (RuleCall)cShipmentDetailsAssignment_0.eContents().get(0);
		private final Assignment cSanitaryControlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSanitaryControlSanitaryControlQuestionParserRuleCall_1_0 = (RuleCall)cSanitaryControlAssignment_1.eContents().get(0);
		private final Assignment cCustomsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCustomsCustomsQuestionParserRuleCall_2_0 = (RuleCall)cCustomsAssignment_2.eContents().get(0);
		private final Assignment cImportTaxAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cImportTaxImportTaxQuestionParserRuleCall_3_0 = (RuleCall)cImportTaxAssignment_3.eContents().get(0);
		private final Assignment cGeographicalQuestionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeographicalQuestionGeographicalQuestionParserRuleCall_4_0 = (RuleCall)cGeographicalQuestionAssignment_4.eContents().get(0);
		private final Assignment cAddressPickupAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAddressPickupAddressPickupQuestionParserRuleCall_5_0 = (RuleCall)cAddressPickupAssignment_5.eContents().get(0);
		private final Assignment cAddressDeliveryAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAddressDeliveryAddressDeliveryQuestionParserRuleCall_6_0 = (RuleCall)cAddressDeliveryAssignment_6.eContents().get(0);
		private final Assignment cShipmentTrackingNumberAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cShipmentTrackingNumberShipmentTrackingNumberQuestionParserRuleCall_7_0 = (RuleCall)cShipmentTrackingNumberAssignment_7.eContents().get(0);
		private final Assignment cDangerousLoadAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cDangerousLoadDangerousLoadQuestionParserRuleCall_8_0 = (RuleCall)cDangerousLoadAssignment_8.eContents().get(0);
		private final Assignment cPerishableAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cPerishablePerishableQuestionParserRuleCall_9_0 = (RuleCall)cPerishableAssignment_9.eContents().get(0);
		private final Assignment cCargoTypeAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cCargoTypeCargoTypeQuestionParserRuleCall_10_0 = (RuleCall)cCargoTypeAssignment_10.eContents().get(0);
		private final Assignment cCargoWeightAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cCargoWeightCargoWeightQuestionParserRuleCall_11_0 = (RuleCall)cCargoWeightAssignment_11.eContents().get(0);
		private final Assignment cCargoDimensionsAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cCargoDimensionsCargoDimensionsQuestionParserRuleCall_12_0 = (RuleCall)cCargoDimensionsAssignment_12.eContents().get(0);
		private final Assignment cSeaShipmentAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cSeaShipmentSeaShipmentQuestionParserRuleCall_13_0 = (RuleCall)cSeaShipmentAssignment_13.eContents().get(0);
		private final Assignment cMeansAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cMeansMeansTransportQuestionParserRuleCall_14_0 = (RuleCall)cMeansAssignment_14.eContents().get(0);
		private final Assignment cCompanyAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cCompanyCompanyQuestionParserRuleCall_15_0 = (RuleCall)cCompanyAssignment_15.eContents().get(0);
		private final Assignment cDeliveryDeadlineAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cDeliveryDeadlineDeliveryDeadlineQuestionParserRuleCall_16_0 = (RuleCall)cDeliveryDeadlineAssignment_16.eContents().get(0);
		private final Assignment cUpdatesAndMonitoringAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final RuleCall cUpdatesAndMonitoringUpdatesAndMonitoringQuestionParserRuleCall_17_0 = (RuleCall)cUpdatesAndMonitoringAssignment_17.eContents().get(0);
		private final Assignment cExternalMediatorAssignment_18 = (Assignment)cGroup.eContents().get(18);
		private final RuleCall cExternalMediatorExternalMediatorQuestionParserRuleCall_18_0 = (RuleCall)cExternalMediatorAssignment_18.eContents().get(0);
		
		///*ShipmentQuestion: Son preguntas para registrar  la información de envío del objeto de valor negociado.
		// * 
		// * timeDurationValueExchange = Si el intercambio de valor esta sujeto a un determinado intervalo de tiempo
		// * timeStartValueExchange = Si el intercambio de valor esta sujeto a que empiece en  un determinado intervalo de tiempo
		// * repeatValueExchange = Si el intercambio de valor se repite durante determinado intervalo de tiempo
		// * conditionValueExchange = Si el intercambio de valor esta sujeto a las mismas condiciones
		// * valueObjectTypeValueExchange = ¿Cuál es la naturaleza del objeto de valor negociado?
		// */ ShipmentQuestion:
		//	shipmentDetails=ShipmentDetailsQuestion
		//	sanitaryControl=SanitaryControlQuestion
		//	customs=CustomsQuestion?
		//	importTax=ImportTaxQuestion?
		//	geographicalQuestion=GeographicalQuestion?
		//	addressPickup=AddressPickupQuestion
		//	addressDelivery=AddressDeliveryQuestion
		//	shipmentTrackingNumber=ShipmentTrackingNumberQuestion?
		//	dangerousLoad=DangerousLoadQuestion?
		//	perishable=PerishableQuestion?
		//	cargoType=CargoTypeQuestion
		//	cargoWeight=CargoWeightQuestion
		//	cargoDimensions=CargoDimensionsQuestion
		//	seaShipment=SeaShipmentQuestion?
		//	means=MeansTransportQuestion?
		//	company=CompanyQuestion
		//	deliveryDeadline=DeliveryDeadlineQuestion?
		//	updatesAndMonitoring=UpdatesAndMonitoringQuestion?
		//	externalMediator=ExternalMediatorQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//shipmentDetails=ShipmentDetailsQuestion sanitaryControl=SanitaryControlQuestion customs=CustomsQuestion?
		//importTax=ImportTaxQuestion? geographicalQuestion=GeographicalQuestion? addressPickup=AddressPickupQuestion
		//addressDelivery=AddressDeliveryQuestion shipmentTrackingNumber=ShipmentTrackingNumberQuestion?
		//dangerousLoad=DangerousLoadQuestion? perishable=PerishableQuestion? cargoType=CargoTypeQuestion
		//cargoWeight=CargoWeightQuestion cargoDimensions=CargoDimensionsQuestion seaShipment=SeaShipmentQuestion?
		//means=MeansTransportQuestion? company=CompanyQuestion deliveryDeadline=DeliveryDeadlineQuestion?
		//updatesAndMonitoring=UpdatesAndMonitoringQuestion? externalMediator=ExternalMediatorQuestion?
		public Group getGroup() { return cGroup; }
		
		//shipmentDetails=ShipmentDetailsQuestion
		public Assignment getShipmentDetailsAssignment_0() { return cShipmentDetailsAssignment_0; }
		
		//ShipmentDetailsQuestion
		public RuleCall getShipmentDetailsShipmentDetailsQuestionParserRuleCall_0_0() { return cShipmentDetailsShipmentDetailsQuestionParserRuleCall_0_0; }
		
		//sanitaryControl=SanitaryControlQuestion
		public Assignment getSanitaryControlAssignment_1() { return cSanitaryControlAssignment_1; }
		
		//SanitaryControlQuestion
		public RuleCall getSanitaryControlSanitaryControlQuestionParserRuleCall_1_0() { return cSanitaryControlSanitaryControlQuestionParserRuleCall_1_0; }
		
		//customs=CustomsQuestion?
		public Assignment getCustomsAssignment_2() { return cCustomsAssignment_2; }
		
		//CustomsQuestion
		public RuleCall getCustomsCustomsQuestionParserRuleCall_2_0() { return cCustomsCustomsQuestionParserRuleCall_2_0; }
		
		//importTax=ImportTaxQuestion?
		public Assignment getImportTaxAssignment_3() { return cImportTaxAssignment_3; }
		
		//ImportTaxQuestion
		public RuleCall getImportTaxImportTaxQuestionParserRuleCall_3_0() { return cImportTaxImportTaxQuestionParserRuleCall_3_0; }
		
		//geographicalQuestion=GeographicalQuestion?
		public Assignment getGeographicalQuestionAssignment_4() { return cGeographicalQuestionAssignment_4; }
		
		//GeographicalQuestion
		public RuleCall getGeographicalQuestionGeographicalQuestionParserRuleCall_4_0() { return cGeographicalQuestionGeographicalQuestionParserRuleCall_4_0; }
		
		//addressPickup=AddressPickupQuestion
		public Assignment getAddressPickupAssignment_5() { return cAddressPickupAssignment_5; }
		
		//AddressPickupQuestion
		public RuleCall getAddressPickupAddressPickupQuestionParserRuleCall_5_0() { return cAddressPickupAddressPickupQuestionParserRuleCall_5_0; }
		
		//addressDelivery=AddressDeliveryQuestion
		public Assignment getAddressDeliveryAssignment_6() { return cAddressDeliveryAssignment_6; }
		
		//AddressDeliveryQuestion
		public RuleCall getAddressDeliveryAddressDeliveryQuestionParserRuleCall_6_0() { return cAddressDeliveryAddressDeliveryQuestionParserRuleCall_6_0; }
		
		//shipmentTrackingNumber=ShipmentTrackingNumberQuestion?
		public Assignment getShipmentTrackingNumberAssignment_7() { return cShipmentTrackingNumberAssignment_7; }
		
		//ShipmentTrackingNumberQuestion
		public RuleCall getShipmentTrackingNumberShipmentTrackingNumberQuestionParserRuleCall_7_0() { return cShipmentTrackingNumberShipmentTrackingNumberQuestionParserRuleCall_7_0; }
		
		//dangerousLoad=DangerousLoadQuestion?
		public Assignment getDangerousLoadAssignment_8() { return cDangerousLoadAssignment_8; }
		
		//DangerousLoadQuestion
		public RuleCall getDangerousLoadDangerousLoadQuestionParserRuleCall_8_0() { return cDangerousLoadDangerousLoadQuestionParserRuleCall_8_0; }
		
		//perishable=PerishableQuestion?
		public Assignment getPerishableAssignment_9() { return cPerishableAssignment_9; }
		
		//PerishableQuestion
		public RuleCall getPerishablePerishableQuestionParserRuleCall_9_0() { return cPerishablePerishableQuestionParserRuleCall_9_0; }
		
		//cargoType=CargoTypeQuestion
		public Assignment getCargoTypeAssignment_10() { return cCargoTypeAssignment_10; }
		
		//CargoTypeQuestion
		public RuleCall getCargoTypeCargoTypeQuestionParserRuleCall_10_0() { return cCargoTypeCargoTypeQuestionParserRuleCall_10_0; }
		
		//cargoWeight=CargoWeightQuestion
		public Assignment getCargoWeightAssignment_11() { return cCargoWeightAssignment_11; }
		
		//CargoWeightQuestion
		public RuleCall getCargoWeightCargoWeightQuestionParserRuleCall_11_0() { return cCargoWeightCargoWeightQuestionParserRuleCall_11_0; }
		
		//cargoDimensions=CargoDimensionsQuestion
		public Assignment getCargoDimensionsAssignment_12() { return cCargoDimensionsAssignment_12; }
		
		//CargoDimensionsQuestion
		public RuleCall getCargoDimensionsCargoDimensionsQuestionParserRuleCall_12_0() { return cCargoDimensionsCargoDimensionsQuestionParserRuleCall_12_0; }
		
		//seaShipment=SeaShipmentQuestion?
		public Assignment getSeaShipmentAssignment_13() { return cSeaShipmentAssignment_13; }
		
		//SeaShipmentQuestion
		public RuleCall getSeaShipmentSeaShipmentQuestionParserRuleCall_13_0() { return cSeaShipmentSeaShipmentQuestionParserRuleCall_13_0; }
		
		//means=MeansTransportQuestion?
		public Assignment getMeansAssignment_14() { return cMeansAssignment_14; }
		
		//MeansTransportQuestion
		public RuleCall getMeansMeansTransportQuestionParserRuleCall_14_0() { return cMeansMeansTransportQuestionParserRuleCall_14_0; }
		
		//company=CompanyQuestion
		public Assignment getCompanyAssignment_15() { return cCompanyAssignment_15; }
		
		//CompanyQuestion
		public RuleCall getCompanyCompanyQuestionParserRuleCall_15_0() { return cCompanyCompanyQuestionParserRuleCall_15_0; }
		
		//deliveryDeadline=DeliveryDeadlineQuestion?
		public Assignment getDeliveryDeadlineAssignment_16() { return cDeliveryDeadlineAssignment_16; }
		
		//DeliveryDeadlineQuestion
		public RuleCall getDeliveryDeadlineDeliveryDeadlineQuestionParserRuleCall_16_0() { return cDeliveryDeadlineDeliveryDeadlineQuestionParserRuleCall_16_0; }
		
		//updatesAndMonitoring=UpdatesAndMonitoringQuestion?
		public Assignment getUpdatesAndMonitoringAssignment_17() { return cUpdatesAndMonitoringAssignment_17; }
		
		//UpdatesAndMonitoringQuestion
		public RuleCall getUpdatesAndMonitoringUpdatesAndMonitoringQuestionParserRuleCall_17_0() { return cUpdatesAndMonitoringUpdatesAndMonitoringQuestionParserRuleCall_17_0; }
		
		//externalMediator=ExternalMediatorQuestion?
		public Assignment getExternalMediatorAssignment_18() { return cExternalMediatorAssignment_18; }
		
		//ExternalMediatorQuestion
		public RuleCall getExternalMediatorExternalMediatorQuestionParserRuleCall_18_0() { return cExternalMediatorExternalMediatorQuestionParserRuleCall_18_0; }
	}
	public class InsuranceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.InsuranceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cShipmentInsuranceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cShipmentInsuranceShipmentInsuranceQuestionParserRuleCall_0_0 = (RuleCall)cShipmentInsuranceAssignment_0.eContents().get(0);
		private final Assignment cInsuranceDetailsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInsuranceDetailsInsuranceDetailsQuestionParserRuleCall_1_0 = (RuleCall)cInsuranceDetailsAssignment_1.eContents().get(0);
		private final Assignment cReturnsOrCancellationsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cReturnsOrCancellationsReturnsOrCancellationsQuestionParserRuleCall_2_0 = (RuleCall)cReturnsOrCancellationsAssignment_2.eContents().get(0);
		private final Assignment cPenaltyForNeglectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPenaltyForNeglectPenaltyForNeglectQuestionParserRuleCall_3_0 = (RuleCall)cPenaltyForNeglectAssignment_3.eContents().get(0);
		
		//InsuranceQuestion:
		//	shipmentInsurance=ShipmentInsuranceQuestion?
		//	insuranceDetails=InsuranceDetailsQuestion
		//	returnsOrCancellations=ReturnsOrCancellationsQuestion?
		//	penaltyForNeglect=PenaltyForNeglectQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//shipmentInsurance=ShipmentInsuranceQuestion? insuranceDetails=InsuranceDetailsQuestion
		//returnsOrCancellations=ReturnsOrCancellationsQuestion? penaltyForNeglect=PenaltyForNeglectQuestion?
		public Group getGroup() { return cGroup; }
		
		//shipmentInsurance=ShipmentInsuranceQuestion?
		public Assignment getShipmentInsuranceAssignment_0() { return cShipmentInsuranceAssignment_0; }
		
		//ShipmentInsuranceQuestion
		public RuleCall getShipmentInsuranceShipmentInsuranceQuestionParserRuleCall_0_0() { return cShipmentInsuranceShipmentInsuranceQuestionParserRuleCall_0_0; }
		
		//insuranceDetails=InsuranceDetailsQuestion
		public Assignment getInsuranceDetailsAssignment_1() { return cInsuranceDetailsAssignment_1; }
		
		//InsuranceDetailsQuestion
		public RuleCall getInsuranceDetailsInsuranceDetailsQuestionParserRuleCall_1_0() { return cInsuranceDetailsInsuranceDetailsQuestionParserRuleCall_1_0; }
		
		//returnsOrCancellations=ReturnsOrCancellationsQuestion?
		public Assignment getReturnsOrCancellationsAssignment_2() { return cReturnsOrCancellationsAssignment_2; }
		
		//ReturnsOrCancellationsQuestion
		public RuleCall getReturnsOrCancellationsReturnsOrCancellationsQuestionParserRuleCall_2_0() { return cReturnsOrCancellationsReturnsOrCancellationsQuestionParserRuleCall_2_0; }
		
		//penaltyForNeglect=PenaltyForNeglectQuestion?
		public Assignment getPenaltyForNeglectAssignment_3() { return cPenaltyForNeglectAssignment_3; }
		
		//PenaltyForNeglectQuestion
		public RuleCall getPenaltyForNeglectPenaltyForNeglectQuestionParserRuleCall_3_0() { return cPenaltyForNeglectPenaltyForNeglectQuestionParserRuleCall_3_0; }
	}
	public class AlimentaryQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.AlimentaryQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAgreedPriceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAgreedPriceAgreedPriceQuestionParserRuleCall_0_0 = (RuleCall)cAgreedPriceAssignment_0.eContents().get(0);
		private final Assignment cProductQualityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProductQualityProductQualityQuestionParserRuleCall_1_0 = (RuleCall)cProductQualityAssignment_1.eContents().get(0);
		private final Assignment cInternationalSealAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cInternationalSealInternationalSealQuestionParserRuleCall_2_0 = (RuleCall)cInternationalSealAssignment_2.eContents().get(0);
		private final Assignment cHealthInspectionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cHealthInspectionHealthInspectionQuestionParserRuleCall_3_0 = (RuleCall)cHealthInspectionAssignment_3.eContents().get(0);
		private final Assignment cStorageConditionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStorageConditionsStorageConditionsQuestionParserRuleCall_4_0 = (RuleCall)cStorageConditionsAssignment_4.eContents().get(0);
		
		//AlimentaryQuestion:
		//	agreedPrice=AgreedPriceQuestion?
		//	productQuality=ProductQualityQuestion?
		//	internationalSeal=InternationalSealQuestion?
		//	healthInspection=HealthInspectionQuestion?
		//	storageConditions=StorageConditionsQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//agreedPrice=AgreedPriceQuestion? productQuality=ProductQualityQuestion? internationalSeal=InternationalSealQuestion?
		//healthInspection=HealthInspectionQuestion? storageConditions=StorageConditionsQuestion?
		public Group getGroup() { return cGroup; }
		
		//agreedPrice=AgreedPriceQuestion?
		public Assignment getAgreedPriceAssignment_0() { return cAgreedPriceAssignment_0; }
		
		//AgreedPriceQuestion
		public RuleCall getAgreedPriceAgreedPriceQuestionParserRuleCall_0_0() { return cAgreedPriceAgreedPriceQuestionParserRuleCall_0_0; }
		
		//productQuality=ProductQualityQuestion?
		public Assignment getProductQualityAssignment_1() { return cProductQualityAssignment_1; }
		
		//ProductQualityQuestion
		public RuleCall getProductQualityProductQualityQuestionParserRuleCall_1_0() { return cProductQualityProductQualityQuestionParserRuleCall_1_0; }
		
		//internationalSeal=InternationalSealQuestion?
		public Assignment getInternationalSealAssignment_2() { return cInternationalSealAssignment_2; }
		
		//InternationalSealQuestion
		public RuleCall getInternationalSealInternationalSealQuestionParserRuleCall_2_0() { return cInternationalSealInternationalSealQuestionParserRuleCall_2_0; }
		
		//healthInspection=HealthInspectionQuestion?
		public Assignment getHealthInspectionAssignment_3() { return cHealthInspectionAssignment_3; }
		
		//HealthInspectionQuestion
		public RuleCall getHealthInspectionHealthInspectionQuestionParserRuleCall_3_0() { return cHealthInspectionHealthInspectionQuestionParserRuleCall_3_0; }
		
		//storageConditions=StorageConditionsQuestion?
		public Assignment getStorageConditionsAssignment_4() { return cStorageConditionsAssignment_4; }
		
		//StorageConditionsQuestion
		public RuleCall getStorageConditionsStorageConditionsQuestionParserRuleCall_4_0() { return cStorageConditionsStorageConditionsQuestionParserRuleCall_4_0; }
	}
	public class ValueObjectQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ValueObjectQuestion");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueObjectTokenQuestionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueObjectRightQuestionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cValueObjectTangibleQuestionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*ValueObjectQuestion:
		// * 
		// * ValueObjectTokenQuestion = Token/Criptoactivo negociado entre ambos actores
		// * ValueObjectRightQuestion = Un derecho intangible que puede ser visto como un servicio,subscripción, etc. (Por ejemplo: Subscripción a Amazón -> Activo o Inactivo
		// * ValueObjectTangibleQuestion = Bien tangible negociado entre ambos actores (Cualquier cosa física)
		// */ ValueObjectQuestion:
		//	ValueObjectTokenQuestion | ValueObjectRightQuestion | ValueObjectTangibleQuestion;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueObjectTokenQuestion | ValueObjectRightQuestion | ValueObjectTangibleQuestion
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ValueObjectTokenQuestion
		public RuleCall getValueObjectTokenQuestionParserRuleCall_0() { return cValueObjectTokenQuestionParserRuleCall_0; }
		
		//ValueObjectRightQuestion
		public RuleCall getValueObjectRightQuestionParserRuleCall_1() { return cValueObjectRightQuestionParserRuleCall_1; }
		
		//ValueObjectTangibleQuestion
		public RuleCall getValueObjectTangibleQuestionParserRuleCall_2() { return cValueObjectTangibleQuestionParserRuleCall_2; }
	}
	public class ValueObjectRightQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ValueObjectRightQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName15IsTheObjectOfValueARightThatCanBeReflectedAsActiveOrInactiveKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		//ValueObjectRightQuestion:
		//	name="1.5 Is the object of value a right that can be reflected as active or inactive?" "answer = " answer=("yes" |
		//	"no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="1.5 Is the object of value a right that can be reflected as active or inactive?" "answer = " answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="1.5 Is the object of value a right that can be reflected as active or inactive?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"1.5 Is the object of value a right that can be reflected as active or inactive?"
		public Keyword getName15IsTheObjectOfValueARightThatCanBeReflectedAsActiveOrInactiveKeyword_0_0() { return cName15IsTheObjectOfValueARightThatCanBeReflectedAsActiveOrInactiveKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	public class ValueObjectTokenQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ValueObjectTokenQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName15IfTheObjectOfValueTradedOnTheValueExchangeIsADigitalTokenWhatAreThePropertiesOfSaidTokenKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cAnswerAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAnswerTokenParserRuleCall_1_0 = (RuleCall)cAnswerAssignment_1.eContents().get(0);
		
		//ValueObjectTokenQuestion:
		//	name="1.5 If the object of value traded on the value exchange is a digital token. What are the properties of said token?"
		//	answer=Token;
		@Override public ParserRule getRule() { return rule; }
		
		//name="1.5 If the object of value traded on the value exchange is a digital token. What are the properties of said token?"
		//answer=Token
		public Group getGroup() { return cGroup; }
		
		//name="1.5 If the object of value traded on the value exchange is a digital token. What are the properties of said token?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"1.5 If the object of value traded on the value exchange is a digital token. What are the properties of said token?"
		public Keyword getName15IfTheObjectOfValueTradedOnTheValueExchangeIsADigitalTokenWhatAreThePropertiesOfSaidTokenKeyword_0_0() { return cName15IfTheObjectOfValueTradedOnTheValueExchangeIsADigitalTokenWhatAreThePropertiesOfSaidTokenKeyword_0_0; }
		
		//answer=Token
		public Assignment getAnswerAssignment_1() { return cAnswerAssignment_1; }
		
		//Token
		public RuleCall getAnswerTokenParserRuleCall_1_0() { return cAnswerTokenParserRuleCall_1_0; }
	}
	public class ValueObjectTangibleQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ValueObjectTangibleQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName15IfTheObjectOfValueNegotiatedInTheValueExchangeIsATangibleEntityThatCanBeRepresentedAsADigitalEntityNotATokenWhatAreThePropertiesOfThatObjectKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cDataDeclarationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerDataRegisterParserRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cEndDataDeclarationKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ValueObjectTangibleQuestion:
		//	name="1.5 If the object of value negotiated in the value exchange is a tangible entity that can be represented as a digital entity (not a token). What are the properties of that object?"
		//	"Data Declaration: "
		//	answer+=DataRegister+
		//	"End Data Declaration";
		@Override public ParserRule getRule() { return rule; }
		
		//name="1.5 If the object of value negotiated in the value exchange is a tangible entity that can be represented as a digital entity (not a token). What are the properties of that object?"
		//"Data Declaration: " answer+=DataRegister+ "End Data Declaration"
		public Group getGroup() { return cGroup; }
		
		//name="1.5 If the object of value negotiated in the value exchange is a tangible entity that can be represented as a digital entity (not a token). What are the properties of that object?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"1.5 If the object of value negotiated in the value exchange is a tangible entity that can be represented as a digital entity (not a token). What are the properties of that object?"
		public Keyword getName15IfTheObjectOfValueNegotiatedInTheValueExchangeIsATangibleEntityThatCanBeRepresentedAsADigitalEntityNotATokenWhatAreThePropertiesOfThatObjectKeyword_0_0() { return cName15IfTheObjectOfValueNegotiatedInTheValueExchangeIsATangibleEntityThatCanBeRepresentedAsADigitalEntityNotATokenWhatAreThePropertiesOfThatObjectKeyword_0_0; }
		
		//"Data Declaration: "
		public Keyword getDataDeclarationKeyword_1() { return cDataDeclarationKeyword_1; }
		
		//answer+=DataRegister+
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//DataRegister
		public RuleCall getAnswerDataRegisterParserRuleCall_2_0() { return cAnswerDataRegisterParserRuleCall_2_0; }
		
		//"End Data Declaration"
		public Keyword getEndDataDeclarationKeyword_3() { return cEndDataDeclarationKeyword_3; }
	}
	public class DataRegisterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.DataRegister");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataNameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cValueKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		///*Registro de propiedade:
		// * 
		// * name = Nombre de la propiedad
		// * type = Tipo de la propiedad
		// */ DataRegister:
		//	"Data name: " name=ID "Value: " type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//"Data name: " name=ID "Value: " type=Type
		public Group getGroup() { return cGroup; }
		
		//"Data name: "
		public Keyword getDataNameKeyword_0() { return cDataNameKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"Value: "
		public Keyword getValueKeyword_2() { return cValueKeyword_2; }
		
		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_3_0() { return cTypeTypeEnumRuleCall_3_0; }
	}
	public class TokenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.Token");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTokenERC20ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTokenERC223ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTokenERC721ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		///*Tipos de tokens (si el value object negociado es un token):
		// * 
		// * TokenERC20 = Funngible
		// * TokenERC223 = Fungible
		// * TokenERC721 = No fungible
		// */ Token:
		//	TokenERC20 | TokenERC223 | TokenERC721;
		@Override public ParserRule getRule() { return rule; }
		
		//TokenERC20 | TokenERC223 | TokenERC721
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TokenERC20
		public RuleCall getTokenERC20ParserRuleCall_0() { return cTokenERC20ParserRuleCall_0; }
		
		//TokenERC223
		public RuleCall getTokenERC223ParserRuleCall_1() { return cTokenERC223ParserRuleCall_1; }
		
		//TokenERC721
		public RuleCall getTokenERC721ParserRuleCall_2() { return cTokenERC721ParserRuleCall_2; }
	}
	public class TokenERC20Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.TokenERC20");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataDeclarationTokenERC20Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTokenERC20NameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTokenERC20SymbolKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSymbolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSymbolIDTerminalRuleCall_4_0 = (RuleCall)cSymbolAssignment_4.eContents().get(0);
		private final Keyword cTokenERC20DecimalsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDecimalsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDecimalsINTTerminalRuleCall_6_0 = (RuleCall)cDecimalsAssignment_6.eContents().get(0);
		private final Keyword cTokenERC20SupplyKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSupplyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSupplyINTTerminalRuleCall_8_0 = (RuleCall)cSupplyAssignment_8.eContents().get(0);
		private final Keyword cIsItPossibleToIncreaseTheTotalSupplyOnceItIsAlreadyInCirculationMintMoreKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cAnswerKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAnswerMintSentenceAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Alternatives cAnswerMintSentenceAlternatives_11_0 = (Alternatives)cAnswerMintSentenceAssignment_11.eContents().get(0);
		private final Keyword cAnswerMintSentenceYesKeyword_11_0_0 = (Keyword)cAnswerMintSentenceAlternatives_11_0.eContents().get(0);
		private final Keyword cAnswerMintSentenceNoKeyword_11_0_1 = (Keyword)cAnswerMintSentenceAlternatives_11_0.eContents().get(1);
		private final Keyword cIsItPossibleToRemoveACertainAmountOfTokenFromCirculationBurnTokenKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cAnswerKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cAnswerBurnSentenceAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final Alternatives cAnswerBurnSentenceAlternatives_14_0 = (Alternatives)cAnswerBurnSentenceAssignment_14.eContents().get(0);
		private final Keyword cAnswerBurnSentenceYesKeyword_14_0_0 = (Keyword)cAnswerBurnSentenceAlternatives_14_0.eContents().get(0);
		private final Keyword cAnswerBurnSentenceNoKeyword_14_0_1 = (Keyword)cAnswerBurnSentenceAlternatives_14_0.eContents().get(1);
		private final Keyword cEndDataDeclarationTokenERC20Keyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//TokenERC20:
		//	"Data Declaration Token ERC20: "
		//	"Token ERC20 name: " name=ID "Token ERC20 Symbol: " symbol=ID "Token ERC20 decimals: " decimals=INT
		//	"Token ERC20 supply: " supply=INT
		//	"1.5.1 Is it possible to increase the total supply once it is already in circulation (mint more)?" "answer = "
		//	answerMintSentence=("yes" | "no")
		//	"1.5.2 Is it possible to remove a certain amount of token from circulation (burn token)?" "answer = "
		//	answerBurnSentence=("yes" | "no")
		//	"End Data Declaration Token ERC20";
		@Override public ParserRule getRule() { return rule; }
		
		//"Data Declaration Token ERC20: " "Token ERC20 name: " name=ID "Token ERC20 Symbol: " symbol=ID "Token ERC20 decimals: "
		//decimals=INT "Token ERC20 supply: " supply=INT
		//"1.5.1 Is it possible to increase the total supply once it is already in circulation (mint more)?" "answer = "
		//answerMintSentence=("yes" | "no")
		//"1.5.2 Is it possible to remove a certain amount of token from circulation (burn token)?" "answer = "
		//answerBurnSentence=("yes" | "no") "End Data Declaration Token ERC20"
		public Group getGroup() { return cGroup; }
		
		//"Data Declaration Token ERC20: "
		public Keyword getDataDeclarationTokenERC20Keyword_0() { return cDataDeclarationTokenERC20Keyword_0; }
		
		//"Token ERC20 name: "
		public Keyword getTokenERC20NameKeyword_1() { return cTokenERC20NameKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"Token ERC20 Symbol: "
		public Keyword getTokenERC20SymbolKeyword_3() { return cTokenERC20SymbolKeyword_3; }
		
		//symbol=ID
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//ID
		public RuleCall getSymbolIDTerminalRuleCall_4_0() { return cSymbolIDTerminalRuleCall_4_0; }
		
		//"Token ERC20 decimals: "
		public Keyword getTokenERC20DecimalsKeyword_5() { return cTokenERC20DecimalsKeyword_5; }
		
		//decimals=INT
		public Assignment getDecimalsAssignment_6() { return cDecimalsAssignment_6; }
		
		//INT
		public RuleCall getDecimalsINTTerminalRuleCall_6_0() { return cDecimalsINTTerminalRuleCall_6_0; }
		
		//"Token ERC20 supply: "
		public Keyword getTokenERC20SupplyKeyword_7() { return cTokenERC20SupplyKeyword_7; }
		
		//supply=INT
		public Assignment getSupplyAssignment_8() { return cSupplyAssignment_8; }
		
		//INT
		public RuleCall getSupplyINTTerminalRuleCall_8_0() { return cSupplyINTTerminalRuleCall_8_0; }
		
		//"1.5.1 Is it possible to increase the total supply once it is already in circulation (mint more)?"
		public Keyword getIsItPossibleToIncreaseTheTotalSupplyOnceItIsAlreadyInCirculationMintMoreKeyword_9() { return cIsItPossibleToIncreaseTheTotalSupplyOnceItIsAlreadyInCirculationMintMoreKeyword_9; }
		
		//"answer = "
		public Keyword getAnswerKeyword_10() { return cAnswerKeyword_10; }
		
		//answerMintSentence=("yes" | "no")
		public Assignment getAnswerMintSentenceAssignment_11() { return cAnswerMintSentenceAssignment_11; }
		
		//("yes" | "no")
		public Alternatives getAnswerMintSentenceAlternatives_11_0() { return cAnswerMintSentenceAlternatives_11_0; }
		
		//"yes"
		public Keyword getAnswerMintSentenceYesKeyword_11_0_0() { return cAnswerMintSentenceYesKeyword_11_0_0; }
		
		//"no"
		public Keyword getAnswerMintSentenceNoKeyword_11_0_1() { return cAnswerMintSentenceNoKeyword_11_0_1; }
		
		//"1.5.2 Is it possible to remove a certain amount of token from circulation (burn token)?"
		public Keyword getIsItPossibleToRemoveACertainAmountOfTokenFromCirculationBurnTokenKeyword_12() { return cIsItPossibleToRemoveACertainAmountOfTokenFromCirculationBurnTokenKeyword_12; }
		
		//"answer = "
		public Keyword getAnswerKeyword_13() { return cAnswerKeyword_13; }
		
		//answerBurnSentence=("yes" | "no")
		public Assignment getAnswerBurnSentenceAssignment_14() { return cAnswerBurnSentenceAssignment_14; }
		
		//("yes" | "no")
		public Alternatives getAnswerBurnSentenceAlternatives_14_0() { return cAnswerBurnSentenceAlternatives_14_0; }
		
		//"yes"
		public Keyword getAnswerBurnSentenceYesKeyword_14_0_0() { return cAnswerBurnSentenceYesKeyword_14_0_0; }
		
		//"no"
		public Keyword getAnswerBurnSentenceNoKeyword_14_0_1() { return cAnswerBurnSentenceNoKeyword_14_0_1; }
		
		//"End Data Declaration Token ERC20"
		public Keyword getEndDataDeclarationTokenERC20Keyword_15() { return cEndDataDeclarationTokenERC20Keyword_15; }
	}
	public class TokenERC223Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.TokenERC223");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataDeclarationTokenERC223Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTokenERC223NameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTokenERC223SymbolKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSymbolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSymbolIDTerminalRuleCall_4_0 = (RuleCall)cSymbolAssignment_4.eContents().get(0);
		private final Keyword cTokenERC223DecimalsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDecimalsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDecimalsINTTerminalRuleCall_6_0 = (RuleCall)cDecimalsAssignment_6.eContents().get(0);
		private final Keyword cTokenERC223SupplyKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cSupplyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cSupplyINTTerminalRuleCall_8_0 = (RuleCall)cSupplyAssignment_8.eContents().get(0);
		private final Keyword cIsItPossibleToIncreaseTheTotalSupplyOnceItIsAlreadyInCirculationMintMoreKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cAnswerKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cAnswerMintSentenceAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final Alternatives cAnswerMintSentenceAlternatives_11_0 = (Alternatives)cAnswerMintSentenceAssignment_11.eContents().get(0);
		private final Keyword cAnswerMintSentenceYesKeyword_11_0_0 = (Keyword)cAnswerMintSentenceAlternatives_11_0.eContents().get(0);
		private final Keyword cAnswerMintSentenceNoKeyword_11_0_1 = (Keyword)cAnswerMintSentenceAlternatives_11_0.eContents().get(1);
		private final Keyword cIsItPossibleToRemoveACertainAmountOfTokenFromCirculationBurnTokenKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cAnswerKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cAnswerBurnSentenceAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final Alternatives cAnswerBurnSentenceAlternatives_14_0 = (Alternatives)cAnswerBurnSentenceAssignment_14.eContents().get(0);
		private final Keyword cAnswerBurnSentenceYesKeyword_14_0_0 = (Keyword)cAnswerBurnSentenceAlternatives_14_0.eContents().get(0);
		private final Keyword cAnswerBurnSentenceNoKeyword_14_0_1 = (Keyword)cAnswerBurnSentenceAlternatives_14_0.eContents().get(1);
		private final Keyword cEndDataDeclarationTokenERC223Keyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//TokenERC223:
		//	"Data Declaration Token ERC223: "
		//	"Token ERC223 name: " name=ID "Token ERC223 Symbol: " symbol=ID "Token ERC223 decimals: " decimals=INT
		//	"Token ERC223 supply: " supply=INT
		//	"1.5.1 Is it possible to increase the total supply once it is already in circulation (mint more)?" "answer = "
		//	answerMintSentence=("yes" | "no")
		//	"1.5.2 Is it possible to remove a certain amount of token from circulation (burn token)?" "answer = "
		//	answerBurnSentence=("yes" | "no")
		//	"End Data Declaration Token ERC223";
		@Override public ParserRule getRule() { return rule; }
		
		//"Data Declaration Token ERC223: " "Token ERC223 name: " name=ID "Token ERC223 Symbol: " symbol=ID
		//"Token ERC223 decimals: " decimals=INT "Token ERC223 supply: " supply=INT
		//"1.5.1 Is it possible to increase the total supply once it is already in circulation (mint more)?" "answer = "
		//answerMintSentence=("yes" | "no")
		//"1.5.2 Is it possible to remove a certain amount of token from circulation (burn token)?" "answer = "
		//answerBurnSentence=("yes" | "no") "End Data Declaration Token ERC223"
		public Group getGroup() { return cGroup; }
		
		//"Data Declaration Token ERC223: "
		public Keyword getDataDeclarationTokenERC223Keyword_0() { return cDataDeclarationTokenERC223Keyword_0; }
		
		//"Token ERC223 name: "
		public Keyword getTokenERC223NameKeyword_1() { return cTokenERC223NameKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"Token ERC223 Symbol: "
		public Keyword getTokenERC223SymbolKeyword_3() { return cTokenERC223SymbolKeyword_3; }
		
		//symbol=ID
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//ID
		public RuleCall getSymbolIDTerminalRuleCall_4_0() { return cSymbolIDTerminalRuleCall_4_0; }
		
		//"Token ERC223 decimals: "
		public Keyword getTokenERC223DecimalsKeyword_5() { return cTokenERC223DecimalsKeyword_5; }
		
		//decimals=INT
		public Assignment getDecimalsAssignment_6() { return cDecimalsAssignment_6; }
		
		//INT
		public RuleCall getDecimalsINTTerminalRuleCall_6_0() { return cDecimalsINTTerminalRuleCall_6_0; }
		
		//"Token ERC223 supply: "
		public Keyword getTokenERC223SupplyKeyword_7() { return cTokenERC223SupplyKeyword_7; }
		
		//supply=INT
		public Assignment getSupplyAssignment_8() { return cSupplyAssignment_8; }
		
		//INT
		public RuleCall getSupplyINTTerminalRuleCall_8_0() { return cSupplyINTTerminalRuleCall_8_0; }
		
		//"1.5.1 Is it possible to increase the total supply once it is already in circulation (mint more)?"
		public Keyword getIsItPossibleToIncreaseTheTotalSupplyOnceItIsAlreadyInCirculationMintMoreKeyword_9() { return cIsItPossibleToIncreaseTheTotalSupplyOnceItIsAlreadyInCirculationMintMoreKeyword_9; }
		
		//"answer = "
		public Keyword getAnswerKeyword_10() { return cAnswerKeyword_10; }
		
		//answerMintSentence=("yes" | "no")
		public Assignment getAnswerMintSentenceAssignment_11() { return cAnswerMintSentenceAssignment_11; }
		
		//("yes" | "no")
		public Alternatives getAnswerMintSentenceAlternatives_11_0() { return cAnswerMintSentenceAlternatives_11_0; }
		
		//"yes"
		public Keyword getAnswerMintSentenceYesKeyword_11_0_0() { return cAnswerMintSentenceYesKeyword_11_0_0; }
		
		//"no"
		public Keyword getAnswerMintSentenceNoKeyword_11_0_1() { return cAnswerMintSentenceNoKeyword_11_0_1; }
		
		//"1.5.2 Is it possible to remove a certain amount of token from circulation (burn token)?"
		public Keyword getIsItPossibleToRemoveACertainAmountOfTokenFromCirculationBurnTokenKeyword_12() { return cIsItPossibleToRemoveACertainAmountOfTokenFromCirculationBurnTokenKeyword_12; }
		
		//"answer = "
		public Keyword getAnswerKeyword_13() { return cAnswerKeyword_13; }
		
		//answerBurnSentence=("yes" | "no")
		public Assignment getAnswerBurnSentenceAssignment_14() { return cAnswerBurnSentenceAssignment_14; }
		
		//("yes" | "no")
		public Alternatives getAnswerBurnSentenceAlternatives_14_0() { return cAnswerBurnSentenceAlternatives_14_0; }
		
		//"yes"
		public Keyword getAnswerBurnSentenceYesKeyword_14_0_0() { return cAnswerBurnSentenceYesKeyword_14_0_0; }
		
		//"no"
		public Keyword getAnswerBurnSentenceNoKeyword_14_0_1() { return cAnswerBurnSentenceNoKeyword_14_0_1; }
		
		//"End Data Declaration Token ERC223"
		public Keyword getEndDataDeclarationTokenERC223Keyword_15() { return cEndDataDeclarationTokenERC223Keyword_15; }
	}
	public class TokenERC721Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.TokenERC721");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDataDeclarationNonFungibleTokenERC721Keyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTokenERC721NameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTokenERC721SymbolKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSymbolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSymbolIDTerminalRuleCall_4_0 = (RuleCall)cSymbolAssignment_4.eContents().get(0);
		private final Keyword cIfItSPossibleToMintMoreThanOneNFTAtATimeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cAnswerKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cAnswerMintSentenceAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Alternatives cAnswerMintSentenceAlternatives_7_0 = (Alternatives)cAnswerMintSentenceAssignment_7.eContents().get(0);
		private final Keyword cAnswerMintSentenceYesKeyword_7_0_0 = (Keyword)cAnswerMintSentenceAlternatives_7_0.eContents().get(0);
		private final Keyword cAnswerMintSentenceNoKeyword_7_0_1 = (Keyword)cAnswerMintSentenceAlternatives_7_0.eContents().get(1);
		private final Keyword cIsItPossibleToRemoveDisableTheTokenFromCirculationBurnTokenKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cAnswerKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cAnswerBurnSentenceAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final Alternatives cAnswerBurnSentenceAlternatives_10_0 = (Alternatives)cAnswerBurnSentenceAssignment_10.eContents().get(0);
		private final Keyword cAnswerBurnSentenceYesKeyword_10_0_0 = (Keyword)cAnswerBurnSentenceAlternatives_10_0.eContents().get(0);
		private final Keyword cAnswerBurnSentenceNoKeyword_10_0_1 = (Keyword)cAnswerBurnSentenceAlternatives_10_0.eContents().get(1);
		private final Keyword cWhatIsThePriceOfThisTokenKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cAnswerKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cAnswerUnitPriceAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cAnswerUnitPriceINTTerminalRuleCall_13_0 = (RuleCall)cAnswerUnitPriceAssignment_13.eContents().get(0);
		private final Assignment cAnswerUnitCoinAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cAnswerUnitCoinUnitCoinEnumRuleCall_14_0 = (RuleCall)cAnswerUnitCoinAssignment_14.eContents().get(0);
		private final Keyword cIsNecessaryAttachMetadataInformationAboutTheTokenExampleUrlImageToTheTokenKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Keyword cAnswerKeyword_16 = (Keyword)cGroup.eContents().get(16);
		private final Assignment cAnswerMetadataSentenceAssignment_17 = (Assignment)cGroup.eContents().get(17);
		private final Alternatives cAnswerMetadataSentenceAlternatives_17_0 = (Alternatives)cAnswerMetadataSentenceAssignment_17.eContents().get(0);
		private final Keyword cAnswerMetadataSentenceYesKeyword_17_0_0 = (Keyword)cAnswerMetadataSentenceAlternatives_17_0.eContents().get(0);
		private final Keyword cAnswerMetadataSentenceNoKeyword_17_0_1 = (Keyword)cAnswerMetadataSentenceAlternatives_17_0.eContents().get(1);
		private final Group cGroup_18 = (Group)cGroup.eContents().get(18);
		private final Keyword cWhichDataOrPropertiesAreRequieredForTheNFTInformationKeyword_18_0 = (Keyword)cGroup_18.eContents().get(0);
		private final Keyword cDataDeclarationKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Assignment cAnswerAssignment_18_2 = (Assignment)cGroup_18.eContents().get(2);
		private final RuleCall cAnswerDataRegisterParserRuleCall_18_2_0 = (RuleCall)cAnswerAssignment_18_2.eContents().get(0);
		private final Keyword cEndDataDeclarationKeyword_18_3 = (Keyword)cGroup_18.eContents().get(3);
		private final Group cGroup_19 = (Group)cGroup.eContents().get(19);
		private final Keyword cIfItSPossibleToDefineAnAmountToRestrictTheAmountOfNFTsThatAreMintedWhatIsTheMaximumAmountKeyword_19_0 = (Keyword)cGroup_19.eContents().get(0);
		private final Keyword cTotalSupplyKeyword_19_1 = (Keyword)cGroup_19.eContents().get(1);
		private final Assignment cSupplyAssignment_19_2 = (Assignment)cGroup_19.eContents().get(2);
		private final RuleCall cSupplyINTTerminalRuleCall_19_2_0 = (RuleCall)cSupplyAssignment_19_2.eContents().get(0);
		private final Keyword cEndDataDeclarationTokenERC721Keyword_20 = (Keyword)cGroup.eContents().get(20);
		
		//TokenERC721:
		//	"Data Declaration Non Fungible Token ERC721: "
		//	"Token ERC721 name: " name=ID "Token ERC721 Symbol: " symbol=ID
		//	"1.5.1 If it's possible to mint more than one NFT at a time?" "answer = " answerMintSentence=("yes" | "no")
		//	"1.5.2 Is it possible to remove/disable the token from circulation (burn token)?" "answer = "
		//	answerBurnSentence=("yes" | "no")
		//	"1.5.3 What is the price of this token?" "answer = " answerUnitPrice=INT answerUnitCoin=UnitCoin
		//	"1.5.4 Is necessary attach metadata (Information about the token, example: url image) to the token?" "answer = "
		//	answerMetadataSentence=("yes" | "no") ("1.5.5 Which data or properties are requiered for the NFT information?"
		//	"Data Declaration: "
		//	answer+=DataRegister+
		//	"End Data Declaration")?
		//	("1.5.6 If it's possible to define an amount to restrict the amount of NFTs that are minted. What is the maximum amount?"
		//	"total supply = " supply=INT)?
		//	"End Data Declaration Token ERC721";
		@Override public ParserRule getRule() { return rule; }
		
		//"Data Declaration Non Fungible Token ERC721: " "Token ERC721 name: " name=ID "Token ERC721 Symbol: " symbol=ID
		//"1.5.1 If it's possible to mint more than one NFT at a time?" "answer = " answerMintSentence=("yes" | "no")
		//"1.5.2 Is it possible to remove/disable the token from circulation (burn token)?" "answer = "
		//answerBurnSentence=("yes" | "no") "1.5.3 What is the price of this token?" "answer = " answerUnitPrice=INT
		//answerUnitCoin=UnitCoin
		//"1.5.4 Is necessary attach metadata (Information about the token, example: url image) to the token?" "answer = "
		//answerMetadataSentence=("yes" | "no") ("1.5.5 Which data or properties are requiered for the NFT information?"
		//"Data Declaration: " answer+=DataRegister+ "End Data Declaration")?
		//("1.5.6 If it's possible to define an amount to restrict the amount of NFTs that are minted. What is the maximum amount?"
		//"total supply = " supply=INT)? "End Data Declaration Token ERC721"
		public Group getGroup() { return cGroup; }
		
		//"Data Declaration Non Fungible Token ERC721: "
		public Keyword getDataDeclarationNonFungibleTokenERC721Keyword_0() { return cDataDeclarationNonFungibleTokenERC721Keyword_0; }
		
		//"Token ERC721 name: "
		public Keyword getTokenERC721NameKeyword_1() { return cTokenERC721NameKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//"Token ERC721 Symbol: "
		public Keyword getTokenERC721SymbolKeyword_3() { return cTokenERC721SymbolKeyword_3; }
		
		//symbol=ID
		public Assignment getSymbolAssignment_4() { return cSymbolAssignment_4; }
		
		//ID
		public RuleCall getSymbolIDTerminalRuleCall_4_0() { return cSymbolIDTerminalRuleCall_4_0; }
		
		//"1.5.1 If it's possible to mint more than one NFT at a time?"
		public Keyword getIfItSPossibleToMintMoreThanOneNFTAtATimeKeyword_5() { return cIfItSPossibleToMintMoreThanOneNFTAtATimeKeyword_5; }
		
		//"answer = "
		public Keyword getAnswerKeyword_6() { return cAnswerKeyword_6; }
		
		//answerMintSentence=("yes" | "no")
		public Assignment getAnswerMintSentenceAssignment_7() { return cAnswerMintSentenceAssignment_7; }
		
		//("yes" | "no")
		public Alternatives getAnswerMintSentenceAlternatives_7_0() { return cAnswerMintSentenceAlternatives_7_0; }
		
		//"yes"
		public Keyword getAnswerMintSentenceYesKeyword_7_0_0() { return cAnswerMintSentenceYesKeyword_7_0_0; }
		
		//"no"
		public Keyword getAnswerMintSentenceNoKeyword_7_0_1() { return cAnswerMintSentenceNoKeyword_7_0_1; }
		
		//"1.5.2 Is it possible to remove/disable the token from circulation (burn token)?"
		public Keyword getIsItPossibleToRemoveDisableTheTokenFromCirculationBurnTokenKeyword_8() { return cIsItPossibleToRemoveDisableTheTokenFromCirculationBurnTokenKeyword_8; }
		
		//"answer = "
		public Keyword getAnswerKeyword_9() { return cAnswerKeyword_9; }
		
		//answerBurnSentence=("yes" | "no")
		public Assignment getAnswerBurnSentenceAssignment_10() { return cAnswerBurnSentenceAssignment_10; }
		
		//("yes" | "no")
		public Alternatives getAnswerBurnSentenceAlternatives_10_0() { return cAnswerBurnSentenceAlternatives_10_0; }
		
		//"yes"
		public Keyword getAnswerBurnSentenceYesKeyword_10_0_0() { return cAnswerBurnSentenceYesKeyword_10_0_0; }
		
		//"no"
		public Keyword getAnswerBurnSentenceNoKeyword_10_0_1() { return cAnswerBurnSentenceNoKeyword_10_0_1; }
		
		//"1.5.3 What is the price of this token?"
		public Keyword getWhatIsThePriceOfThisTokenKeyword_11() { return cWhatIsThePriceOfThisTokenKeyword_11; }
		
		//"answer = "
		public Keyword getAnswerKeyword_12() { return cAnswerKeyword_12; }
		
		//answerUnitPrice=INT
		public Assignment getAnswerUnitPriceAssignment_13() { return cAnswerUnitPriceAssignment_13; }
		
		//INT
		public RuleCall getAnswerUnitPriceINTTerminalRuleCall_13_0() { return cAnswerUnitPriceINTTerminalRuleCall_13_0; }
		
		//answerUnitCoin=UnitCoin
		public Assignment getAnswerUnitCoinAssignment_14() { return cAnswerUnitCoinAssignment_14; }
		
		//UnitCoin
		public RuleCall getAnswerUnitCoinUnitCoinEnumRuleCall_14_0() { return cAnswerUnitCoinUnitCoinEnumRuleCall_14_0; }
		
		//"1.5.4 Is necessary attach metadata (Information about the token, example: url image) to the token?"
		public Keyword getIsNecessaryAttachMetadataInformationAboutTheTokenExampleUrlImageToTheTokenKeyword_15() { return cIsNecessaryAttachMetadataInformationAboutTheTokenExampleUrlImageToTheTokenKeyword_15; }
		
		//"answer = "
		public Keyword getAnswerKeyword_16() { return cAnswerKeyword_16; }
		
		//answerMetadataSentence=("yes" | "no")
		public Assignment getAnswerMetadataSentenceAssignment_17() { return cAnswerMetadataSentenceAssignment_17; }
		
		//("yes" | "no")
		public Alternatives getAnswerMetadataSentenceAlternatives_17_0() { return cAnswerMetadataSentenceAlternatives_17_0; }
		
		//"yes"
		public Keyword getAnswerMetadataSentenceYesKeyword_17_0_0() { return cAnswerMetadataSentenceYesKeyword_17_0_0; }
		
		//"no"
		public Keyword getAnswerMetadataSentenceNoKeyword_17_0_1() { return cAnswerMetadataSentenceNoKeyword_17_0_1; }
		
		//("1.5.5 Which data or properties are requiered for the NFT information?" "Data Declaration: " answer+=DataRegister+
		//"End Data Declaration")?
		public Group getGroup_18() { return cGroup_18; }
		
		//"1.5.5 Which data or properties are requiered for the NFT information?"
		public Keyword getWhichDataOrPropertiesAreRequieredForTheNFTInformationKeyword_18_0() { return cWhichDataOrPropertiesAreRequieredForTheNFTInformationKeyword_18_0; }
		
		//"Data Declaration: "
		public Keyword getDataDeclarationKeyword_18_1() { return cDataDeclarationKeyword_18_1; }
		
		//answer+=DataRegister+
		public Assignment getAnswerAssignment_18_2() { return cAnswerAssignment_18_2; }
		
		//DataRegister
		public RuleCall getAnswerDataRegisterParserRuleCall_18_2_0() { return cAnswerDataRegisterParserRuleCall_18_2_0; }
		
		//"End Data Declaration"
		public Keyword getEndDataDeclarationKeyword_18_3() { return cEndDataDeclarationKeyword_18_3; }
		
		//("1.5.6 If it's possible to define an amount to restrict the amount of NFTs that are minted. What is the maximum amount?"
		//"total supply = " supply=INT)?
		public Group getGroup_19() { return cGroup_19; }
		
		//"1.5.6 If it's possible to define an amount to restrict the amount of NFTs that are minted. What is the maximum amount?"
		public Keyword getIfItSPossibleToDefineAnAmountToRestrictTheAmountOfNFTsThatAreMintedWhatIsTheMaximumAmountKeyword_19_0() { return cIfItSPossibleToDefineAnAmountToRestrictTheAmountOfNFTsThatAreMintedWhatIsTheMaximumAmountKeyword_19_0; }
		
		//"total supply = "
		public Keyword getTotalSupplyKeyword_19_1() { return cTotalSupplyKeyword_19_1; }
		
		//supply=INT
		public Assignment getSupplyAssignment_19_2() { return cSupplyAssignment_19_2; }
		
		//INT
		public RuleCall getSupplyINTTerminalRuleCall_19_2_0() { return cSupplyINTTerminalRuleCall_19_2_0; }
		
		//"End Data Declaration Token ERC721"
		public Keyword getEndDataDeclarationTokenERC721Keyword_20() { return cEndDataDeclarationTokenERC721Keyword_20; }
	}
	public class TimeValueExchangeDurationQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.TimeValueExchangeDurationQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName11IfTheExchangeOfValueIsSubjectToADurationOfTimeWhatWouldThisBeIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerINTTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cUnitTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnswerUnitTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswerUnitTimeUnitTimeEnumRuleCall_4_0 = (RuleCall)cAnswerUnitTimeAssignment_4.eContents().get(0);
		
		//TimeValueExchangeDurationQuestion:
		//	name="1.1 If the exchange of value is subject to a duration of time. What would this be?(indicated in minutes,days,weeks or years)"
		//	"answer = " answer=INT "unitTime = " answerUnitTime=UnitTime;
		@Override public ParserRule getRule() { return rule; }
		
		//name="1.1 If the exchange of value is subject to a duration of time. What would this be?(indicated in minutes,days,weeks or years)"
		//"answer = " answer=INT "unitTime = " answerUnitTime=UnitTime
		public Group getGroup() { return cGroup; }
		
		//name="1.1 If the exchange of value is subject to a duration of time. What would this be?(indicated in minutes,days,weeks or years)"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"1.1 If the exchange of value is subject to a duration of time. What would this be?(indicated in minutes,days,weeks or years)"
		public Keyword getName11IfTheExchangeOfValueIsSubjectToADurationOfTimeWhatWouldThisBeIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0() { return cName11IfTheExchangeOfValueIsSubjectToADurationOfTimeWhatWouldThisBeIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=INT
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//INT
		public RuleCall getAnswerINTTerminalRuleCall_2_0() { return cAnswerINTTerminalRuleCall_2_0; }
		
		//"unitTime = "
		public Keyword getUnitTimeKeyword_3() { return cUnitTimeKeyword_3; }
		
		//answerUnitTime=UnitTime
		public Assignment getAnswerUnitTimeAssignment_4() { return cAnswerUnitTimeAssignment_4; }
		
		//UnitTime
		public RuleCall getAnswerUnitTimeUnitTimeEnumRuleCall_4_0() { return cAnswerUnitTimeUnitTimeEnumRuleCall_4_0; }
	}
	public class TimeStartValueExchangeQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.TimeStartValueExchangeQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName12IfTheExchangeOfValueCouldOnlyTakePlaceAfterACertainTimeWhatWouldThisBeIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerINTTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cUnitTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnswerUnitTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswerUnitTimeUnitTimeEnumRuleCall_4_0 = (RuleCall)cAnswerUnitTimeAssignment_4.eContents().get(0);
		
		//TimeStartValueExchangeQuestion:
		//	name="1.2 If the exchange of value could only take place after a certain time. What would this be?(indicated in minutes,days,weeks or years)"
		//	"answer = " answer=INT "unitTime = " answerUnitTime=UnitTime;
		@Override public ParserRule getRule() { return rule; }
		
		//name="1.2 If the exchange of value could only take place after a certain time. What would this be?(indicated in minutes,days,weeks or years)"
		//"answer = " answer=INT "unitTime = " answerUnitTime=UnitTime
		public Group getGroup() { return cGroup; }
		
		//name="1.2 If the exchange of value could only take place after a certain time. What would this be?(indicated in minutes,days,weeks or years)"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"1.2 If the exchange of value could only take place after a certain time. What would this be?(indicated in minutes,days,weeks or years)"
		public Keyword getName12IfTheExchangeOfValueCouldOnlyTakePlaceAfterACertainTimeWhatWouldThisBeIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0() { return cName12IfTheExchangeOfValueCouldOnlyTakePlaceAfterACertainTimeWhatWouldThisBeIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=INT
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//INT
		public RuleCall getAnswerINTTerminalRuleCall_2_0() { return cAnswerINTTerminalRuleCall_2_0; }
		
		//"unitTime = "
		public Keyword getUnitTimeKeyword_3() { return cUnitTimeKeyword_3; }
		
		//answerUnitTime=UnitTime
		public Assignment getAnswerUnitTimeAssignment_4() { return cAnswerUnitTimeAssignment_4; }
		
		//UnitTime
		public RuleCall getAnswerUnitTimeUnitTimeEnumRuleCall_4_0() { return cAnswerUnitTimeUnitTimeEnumRuleCall_4_0; }
	}
	public class RepeatValueExchangeQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.RepeatValueExchangeQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName13CanTheValueExchangeBeRepeatedOverTimeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		//RepeatValueExchangeQuestion:
		//	name="1.3 Can the value exchange be repeated over time?" "answer = " answer=("yes" | "no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="1.3 Can the value exchange be repeated over time?" "answer = " answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="1.3 Can the value exchange be repeated over time?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"1.3 Can the value exchange be repeated over time?"
		public Keyword getName13CanTheValueExchangeBeRepeatedOverTimeKeyword_0_0() { return cName13CanTheValueExchangeBeRepeatedOverTimeKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	public class ConditionsValueExchangeQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ConditionsValueExchangeQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName14AreTheSameConditionsAlwaysMaintainedWhenExchangingValueKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		//ConditionsValueExchangeQuestion:
		//	name="1.4 Are the same conditions always maintained when exchanging value?" "answer = " answer=("yes" | "no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="1.4 Are the same conditions always maintained when exchanging value?" "answer = " answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="1.4 Are the same conditions always maintained when exchanging value?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"1.4 Are the same conditions always maintained when exchanging value?"
		public Keyword getName14AreTheSameConditionsAlwaysMaintainedWhenExchangingValueKeyword_0_0() { return cName14AreTheSameConditionsAlwaysMaintainedWhenExchangingValueKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	public class LegalQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.LegalQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAgeQuestionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAgeQuestionAgeQuestionParserRuleCall_0_0 = (RuleCall)cAgeQuestionAssignment_0.eContents().get(0);
		private final Assignment cTaxQuestionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTaxQuestionTaxQuestionParserRuleCall_1_0 = (RuleCall)cTaxQuestionAssignment_1.eContents().get(0);
		private final Assignment cAdditionalLegalDocumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAdditionalLegalDocumentAdditionalLegalDocumentQuestionParserRuleCall_2_0 = (RuleCall)cAdditionalLegalDocumentAssignment_2.eContents().get(0);
		private final Assignment cRegulatoryComplianceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRegulatoryComplianceRegulatoryComplianceQuestionParserRuleCall_3_0 = (RuleCall)cRegulatoryComplianceAssignment_3.eContents().get(0);
		
		///*LegalQuestion: Son preguntas sobre aspectos legales acerca de los intercambios de valor
		// * 
		// * ageQuestion = Si el intercambio de valor esta sujeto a una restricción de un mínimo de edad determinada
		// * taxQuestion = Si el intercambio de valor esta sujeto a algún tipo de impuesto/tasa
		// ****
		// * additionalLegalDocument = Si el intercambio esta sujeto a un documento legal adicional a este smart contract
		// * regulatoryCompliance = Quien es el encargado de hacerse cargo de cumplir con las regulaciones realacionadas con el intercambio
		// */ LegalQuestion:
		//	ageQuestion=AgeQuestion?
		//	taxQuestion=TaxQuestion?
		//	additionalLegalDocument=AdditionalLegalDocumentQuestion?
		//	regulatoryCompliance=RegulatoryComplianceQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//ageQuestion=AgeQuestion? taxQuestion=TaxQuestion? additionalLegalDocument=AdditionalLegalDocumentQuestion?
		//regulatoryCompliance=RegulatoryComplianceQuestion?
		public Group getGroup() { return cGroup; }
		
		//ageQuestion=AgeQuestion?
		public Assignment getAgeQuestionAssignment_0() { return cAgeQuestionAssignment_0; }
		
		//AgeQuestion
		public RuleCall getAgeQuestionAgeQuestionParserRuleCall_0_0() { return cAgeQuestionAgeQuestionParserRuleCall_0_0; }
		
		//taxQuestion=TaxQuestion?
		public Assignment getTaxQuestionAssignment_1() { return cTaxQuestionAssignment_1; }
		
		//TaxQuestion
		public RuleCall getTaxQuestionTaxQuestionParserRuleCall_1_0() { return cTaxQuestionTaxQuestionParserRuleCall_1_0; }
		
		//additionalLegalDocument=AdditionalLegalDocumentQuestion?
		public Assignment getAdditionalLegalDocumentAssignment_2() { return cAdditionalLegalDocumentAssignment_2; }
		
		//AdditionalLegalDocumentQuestion
		public RuleCall getAdditionalLegalDocumentAdditionalLegalDocumentQuestionParserRuleCall_2_0() { return cAdditionalLegalDocumentAdditionalLegalDocumentQuestionParserRuleCall_2_0; }
		
		//regulatoryCompliance=RegulatoryComplianceQuestion?
		public Assignment getRegulatoryComplianceAssignment_3() { return cRegulatoryComplianceAssignment_3; }
		
		//RegulatoryComplianceQuestion
		public RuleCall getRegulatoryComplianceRegulatoryComplianceQuestionParserRuleCall_3_0() { return cRegulatoryComplianceRegulatoryComplianceQuestionParserRuleCall_3_0; }
	}
	public class AgeQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.AgeQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName21WhatWouldBeTheMinimumLegalAgeIfNecessaryInThisExchangeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerINTTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//AgeQuestion:
		//	name="2.1  What would be the minimum legal age if necessary in this exchange?" "answer = " answer=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="2.1  What would be the minimum legal age if necessary in this exchange?" "answer = " answer=INT
		public Group getGroup() { return cGroup; }
		
		//name="2.1  What would be the minimum legal age if necessary in this exchange?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"2.1  What would be the minimum legal age if necessary in this exchange?"
		public Keyword getName21WhatWouldBeTheMinimumLegalAgeIfNecessaryInThisExchangeKeyword_0_0() { return cName21WhatWouldBeTheMinimumLegalAgeIfNecessaryInThisExchangeKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=INT
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//INT
		public RuleCall getAnswerINTTerminalRuleCall_2_0() { return cAnswerINTTerminalRuleCall_2_0; }
	}
	public class TaxQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.TaxQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName22WhatIsTheNameOfTheTaxKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerIDTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		private final Assignment cSubSentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cSubSentence221WhoCollectsTheTaxKeyword_3_0 = (Keyword)cSubSentenceAssignment_3.eContents().get(0);
		private final Keyword cAnswerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnswerSubSentenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswerSubSentenceIDTerminalRuleCall_5_0 = (RuleCall)cAnswerSubSentenceAssignment_5.eContents().get(0);
		
		//TaxQuestion:
		//	name="2.2 What is the name of the tax?" "answer = " answer=ID subSentence="2.2.1 Who collects the tax?" "answer = "
		//	answerSubSentence=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name="2.2 What is the name of the tax?" "answer = " answer=ID subSentence="2.2.1 Who collects the tax?" "answer = "
		//answerSubSentence=ID
		public Group getGroup() { return cGroup; }
		
		//name="2.2 What is the name of the tax?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"2.2 What is the name of the tax?"
		public Keyword getName22WhatIsTheNameOfTheTaxKeyword_0_0() { return cName22WhatIsTheNameOfTheTaxKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=ID
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//ID
		public RuleCall getAnswerIDTerminalRuleCall_2_0() { return cAnswerIDTerminalRuleCall_2_0; }
		
		//subSentence="2.2.1 Who collects the tax?"
		public Assignment getSubSentenceAssignment_3() { return cSubSentenceAssignment_3; }
		
		//"2.2.1 Who collects the tax?"
		public Keyword getSubSentence221WhoCollectsTheTaxKeyword_3_0() { return cSubSentence221WhoCollectsTheTaxKeyword_3_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_4() { return cAnswerKeyword_4; }
		
		//answerSubSentence=ID
		public Assignment getAnswerSubSentenceAssignment_5() { return cAnswerSubSentenceAssignment_5; }
		
		//ID
		public RuleCall getAnswerSubSentenceIDTerminalRuleCall_5_0() { return cAnswerSubSentenceIDTerminalRuleCall_5_0; }
	}
	public class AdditionalLegalDocumentQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.AdditionalLegalDocumentQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName23IsAnotherLegalDocumentComplementaryToThisSmartContractNecessaryKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		////Las dos siguientes ya corresponden con la ampliacion de preguntas
		//AdditionalLegalDocumentQuestion:
		//	name="2.3 Is another legal document complementary to this SmartContract necessary?" "answer = " answer=("yes" |
		//	"no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="2.3 Is another legal document complementary to this SmartContract necessary?" "answer = " answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="2.3 Is another legal document complementary to this SmartContract necessary?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"2.3 Is another legal document complementary to this SmartContract necessary?"
		public Keyword getName23IsAnotherLegalDocumentComplementaryToThisSmartContractNecessaryKeyword_0_0() { return cName23IsAnotherLegalDocumentComplementaryToThisSmartContractNecessaryKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	public class RegulatoryComplianceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.RegulatoryComplianceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName24WhoIsResponsibleForEnsuringComplianceWithRegulationsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerIDTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//RegulatoryComplianceQuestion:
		//	name="2.4 Who is responsible for ensuring compliance with regulations?" "answer = " answer=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name="2.4 Who is responsible for ensuring compliance with regulations?" "answer = " answer=ID
		public Group getGroup() { return cGroup; }
		
		//name="2.4 Who is responsible for ensuring compliance with regulations?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"2.4 Who is responsible for ensuring compliance with regulations?"
		public Keyword getName24WhoIsResponsibleForEnsuringComplianceWithRegulationsKeyword_0_0() { return cName24WhoIsResponsibleForEnsuringComplianceWithRegulationsKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=ID
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//ID
		public RuleCall getAnswerIDTerminalRuleCall_2_0() { return cAnswerIDTerminalRuleCall_2_0; }
	}
	public class EconomyQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.EconomyQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMinimumAmountQuestionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMinimumAmountQuestionMinimumAmountQuestionParserRuleCall_0_0 = (RuleCall)cMinimumAmountQuestionAssignment_0.eContents().get(0);
		private final Assignment cShipmentCostResponsibilityAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cShipmentCostResponsibilityShipmentCostResponsibilityQuestionParserRuleCall_1_0 = (RuleCall)cShipmentCostResponsibilityAssignment_1.eContents().get(0);
		
		///*EconomyQuestion: Son preguntas de carácter económico acerca de los intercambios de valor
		// * 
		// * minimumAmountQuestion = Si el intercambio de valor esta sujeto a una restricción de un mínimo de cantidad determinada
		// */ EconomyQuestion:
		//	minimumAmountQuestion=MinimumAmountQuestion?
		//	shipmentCostResponsibility=ShipmentCostResponsibilityQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//minimumAmountQuestion=MinimumAmountQuestion? shipmentCostResponsibility=ShipmentCostResponsibilityQuestion?
		public Group getGroup() { return cGroup; }
		
		//minimumAmountQuestion=MinimumAmountQuestion?
		public Assignment getMinimumAmountQuestionAssignment_0() { return cMinimumAmountQuestionAssignment_0; }
		
		//MinimumAmountQuestion
		public RuleCall getMinimumAmountQuestionMinimumAmountQuestionParserRuleCall_0_0() { return cMinimumAmountQuestionMinimumAmountQuestionParserRuleCall_0_0; }
		
		//shipmentCostResponsibility=ShipmentCostResponsibilityQuestion?
		public Assignment getShipmentCostResponsibilityAssignment_1() { return cShipmentCostResponsibilityAssignment_1; }
		
		//ShipmentCostResponsibilityQuestion
		public RuleCall getShipmentCostResponsibilityShipmentCostResponsibilityQuestionParserRuleCall_1_0() { return cShipmentCostResponsibilityShipmentCostResponsibilityQuestionParserRuleCall_1_0; }
	}
	public class MinimumAmountQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.MinimumAmountQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName31WhichWouldBeTheMinimumAmountIfNecessaryInThisExchangeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerINTTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//MinimumAmountQuestion:
		//	name="3.1 Which would be the minimum amount if necessary in this exchange?" "answer = " answer=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="3.1 Which would be the minimum amount if necessary in this exchange?" "answer = " answer=INT
		public Group getGroup() { return cGroup; }
		
		//name="3.1 Which would be the minimum amount if necessary in this exchange?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"3.1 Which would be the minimum amount if necessary in this exchange?"
		public Keyword getName31WhichWouldBeTheMinimumAmountIfNecessaryInThisExchangeKeyword_0_0() { return cName31WhichWouldBeTheMinimumAmountIfNecessaryInThisExchangeKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=INT
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//INT
		public RuleCall getAnswerINTTerminalRuleCall_2_0() { return cAnswerINTTerminalRuleCall_2_0; }
	}
	public class ShipmentCostResponsibilityQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ShipmentCostResponsibilityQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQ1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cQ132WhoIsResponsibleForTheTransportationCostKeyword_0_0 = (Keyword)cQ1Assignment_0.eContents().get(0);
		private final Keyword cResponsibleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswer1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswer1IDTerminalRuleCall_2_0 = (RuleCall)cAnswer1Assignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cQ2Assignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cQ233WhatIsTheFreightRateKeyword_3_0_0 = (Keyword)cQ2Assignment_3_0.eContents().get(0);
		private final Keyword cCostKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAnswer2Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAnswer2INTTerminalRuleCall_3_2_0 = (RuleCall)cAnswer2Assignment_3_2.eContents().get(0);
		private final Keyword cUnitCoinKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Assignment cAnswerUnitCoinFreightRateAssignment_3_4 = (Assignment)cGroup_3.eContents().get(4);
		private final RuleCall cAnswerUnitCoinFreightRateUnitCoinEnumRuleCall_3_4_0 = (RuleCall)cAnswerUnitCoinFreightRateAssignment_3_4.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cQ3Assignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cQ334WhatIsTheLoadingFeeOnTheShipKeyword_4_0_0 = (Keyword)cQ3Assignment_4_0.eContents().get(0);
		private final Keyword cCostKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAnswer3Assignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAnswer3INTTerminalRuleCall_4_2_0 = (RuleCall)cAnswer3Assignment_4_2.eContents().get(0);
		private final Keyword cUnitCoinKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cLoadingFeeAnswerUnitCoinAssignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cLoadingFeeAnswerUnitCoinUnitCoinEnumRuleCall_4_4_0 = (RuleCall)cLoadingFeeAnswerUnitCoinAssignment_4_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cQ4Assignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cQ435WhatIsTheUnloadingFeeKeyword_5_0_0 = (Keyword)cQ4Assignment_5_0.eContents().get(0);
		private final Keyword cCostKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAnswer4Assignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAnswer4INTTerminalRuleCall_5_2_0 = (RuleCall)cAnswer4Assignment_5_2.eContents().get(0);
		private final Keyword cUnitCoinKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cUnloadingFeeAnswerUnitCoinAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cUnloadingFeeAnswerUnitCoinUnitCoinEnumRuleCall_5_4_0 = (RuleCall)cUnloadingFeeAnswerUnitCoinAssignment_5_4.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cQ5Assignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cQ536WhatIsTheTransportRateKeyword_6_0_0 = (Keyword)cQ5Assignment_6_0.eContents().get(0);
		private final Keyword cCostKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cAnswer5Assignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cAnswer5INTTerminalRuleCall_6_2_0 = (RuleCall)cAnswer5Assignment_6_2.eContents().get(0);
		private final Keyword cUnitCoinKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cTransportRateAnswerUnitCoinAssignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cTransportRateAnswerUnitCoinUnitCoinEnumRuleCall_6_4_0 = (RuleCall)cTransportRateAnswerUnitCoinAssignment_6_4.eContents().get(0);
		
		////Estas ya corresponden con la ampliacion de preguntas<
		//ShipmentCostResponsibilityQuestion:
		//	q1="3.2 Who is responsible for the transportation cost?" "responsible = " answer1=ID
		//	(q2="3.3 What is the freight rate?" "cost = " answer2=INT "unitCoin=" answerUnitCoinFreightRate=UnitCoin)?
		//	(q3="3.4 What is the loading fee (on the ship)?" "cost = " answer3=INT "unitCoin="
		//	loadingFeeAnswerUnitCoin=UnitCoin)? (q4="3.5 What is the unloading fee?" "cost = " answer4=INT "unitCoin="
		//	unloadingFeeAnswerUnitCoin=UnitCoin)? (q5="3.6 What is the transport rate?" "cost = " answer5=INT "unitCoin="
		//	transportRateAnswerUnitCoin=UnitCoin)?;
		@Override public ParserRule getRule() { return rule; }
		
		//q1="3.2 Who is responsible for the transportation cost?" "responsible = " answer1=ID (q2="3.3 What is the freight rate?"
		//"cost = " answer2=INT "unitCoin=" answerUnitCoinFreightRate=UnitCoin)?
		//(q3="3.4 What is the loading fee (on the ship)?" "cost = " answer3=INT "unitCoin=" loadingFeeAnswerUnitCoin=UnitCoin)?
		//(q4="3.5 What is the unloading fee?" "cost = " answer4=INT "unitCoin=" unloadingFeeAnswerUnitCoin=UnitCoin)?
		//(q5="3.6 What is the transport rate?" "cost = " answer5=INT "unitCoin=" transportRateAnswerUnitCoin=UnitCoin)?
		public Group getGroup() { return cGroup; }
		
		//q1="3.2 Who is responsible for the transportation cost?"
		public Assignment getQ1Assignment_0() { return cQ1Assignment_0; }
		
		//"3.2 Who is responsible for the transportation cost?"
		public Keyword getQ132WhoIsResponsibleForTheTransportationCostKeyword_0_0() { return cQ132WhoIsResponsibleForTheTransportationCostKeyword_0_0; }
		
		//"responsible = "
		public Keyword getResponsibleKeyword_1() { return cResponsibleKeyword_1; }
		
		//answer1=ID
		public Assignment getAnswer1Assignment_2() { return cAnswer1Assignment_2; }
		
		//ID
		public RuleCall getAnswer1IDTerminalRuleCall_2_0() { return cAnswer1IDTerminalRuleCall_2_0; }
		
		//(q2="3.3 What is the freight rate?" "cost = " answer2=INT "unitCoin=" answerUnitCoinFreightRate=UnitCoin)?
		public Group getGroup_3() { return cGroup_3; }
		
		//q2="3.3 What is the freight rate?"
		public Assignment getQ2Assignment_3_0() { return cQ2Assignment_3_0; }
		
		//"3.3 What is the freight rate?"
		public Keyword getQ233WhatIsTheFreightRateKeyword_3_0_0() { return cQ233WhatIsTheFreightRateKeyword_3_0_0; }
		
		//"cost = "
		public Keyword getCostKeyword_3_1() { return cCostKeyword_3_1; }
		
		//answer2=INT
		public Assignment getAnswer2Assignment_3_2() { return cAnswer2Assignment_3_2; }
		
		//INT
		public RuleCall getAnswer2INTTerminalRuleCall_3_2_0() { return cAnswer2INTTerminalRuleCall_3_2_0; }
		
		//"unitCoin="
		public Keyword getUnitCoinKeyword_3_3() { return cUnitCoinKeyword_3_3; }
		
		//answerUnitCoinFreightRate=UnitCoin
		public Assignment getAnswerUnitCoinFreightRateAssignment_3_4() { return cAnswerUnitCoinFreightRateAssignment_3_4; }
		
		//UnitCoin
		public RuleCall getAnswerUnitCoinFreightRateUnitCoinEnumRuleCall_3_4_0() { return cAnswerUnitCoinFreightRateUnitCoinEnumRuleCall_3_4_0; }
		
		//(q3="3.4 What is the loading fee (on the ship)?" "cost = " answer3=INT "unitCoin=" loadingFeeAnswerUnitCoin=UnitCoin)?
		public Group getGroup_4() { return cGroup_4; }
		
		//q3="3.4 What is the loading fee (on the ship)?"
		public Assignment getQ3Assignment_4_0() { return cQ3Assignment_4_0; }
		
		//"3.4 What is the loading fee (on the ship)?"
		public Keyword getQ334WhatIsTheLoadingFeeOnTheShipKeyword_4_0_0() { return cQ334WhatIsTheLoadingFeeOnTheShipKeyword_4_0_0; }
		
		//"cost = "
		public Keyword getCostKeyword_4_1() { return cCostKeyword_4_1; }
		
		//answer3=INT
		public Assignment getAnswer3Assignment_4_2() { return cAnswer3Assignment_4_2; }
		
		//INT
		public RuleCall getAnswer3INTTerminalRuleCall_4_2_0() { return cAnswer3INTTerminalRuleCall_4_2_0; }
		
		//"unitCoin="
		public Keyword getUnitCoinKeyword_4_3() { return cUnitCoinKeyword_4_3; }
		
		//loadingFeeAnswerUnitCoin=UnitCoin
		public Assignment getLoadingFeeAnswerUnitCoinAssignment_4_4() { return cLoadingFeeAnswerUnitCoinAssignment_4_4; }
		
		//UnitCoin
		public RuleCall getLoadingFeeAnswerUnitCoinUnitCoinEnumRuleCall_4_4_0() { return cLoadingFeeAnswerUnitCoinUnitCoinEnumRuleCall_4_4_0; }
		
		//(q4="3.5 What is the unloading fee?" "cost = " answer4=INT "unitCoin=" unloadingFeeAnswerUnitCoin=UnitCoin)?
		public Group getGroup_5() { return cGroup_5; }
		
		//q4="3.5 What is the unloading fee?"
		public Assignment getQ4Assignment_5_0() { return cQ4Assignment_5_0; }
		
		//"3.5 What is the unloading fee?"
		public Keyword getQ435WhatIsTheUnloadingFeeKeyword_5_0_0() { return cQ435WhatIsTheUnloadingFeeKeyword_5_0_0; }
		
		//"cost = "
		public Keyword getCostKeyword_5_1() { return cCostKeyword_5_1; }
		
		//answer4=INT
		public Assignment getAnswer4Assignment_5_2() { return cAnswer4Assignment_5_2; }
		
		//INT
		public RuleCall getAnswer4INTTerminalRuleCall_5_2_0() { return cAnswer4INTTerminalRuleCall_5_2_0; }
		
		//"unitCoin="
		public Keyword getUnitCoinKeyword_5_3() { return cUnitCoinKeyword_5_3; }
		
		//unloadingFeeAnswerUnitCoin=UnitCoin
		public Assignment getUnloadingFeeAnswerUnitCoinAssignment_5_4() { return cUnloadingFeeAnswerUnitCoinAssignment_5_4; }
		
		//UnitCoin
		public RuleCall getUnloadingFeeAnswerUnitCoinUnitCoinEnumRuleCall_5_4_0() { return cUnloadingFeeAnswerUnitCoinUnitCoinEnumRuleCall_5_4_0; }
		
		//(q5="3.6 What is the transport rate?" "cost = " answer5=INT "unitCoin=" transportRateAnswerUnitCoin=UnitCoin)?
		public Group getGroup_6() { return cGroup_6; }
		
		//q5="3.6 What is the transport rate?"
		public Assignment getQ5Assignment_6_0() { return cQ5Assignment_6_0; }
		
		//"3.6 What is the transport rate?"
		public Keyword getQ536WhatIsTheTransportRateKeyword_6_0_0() { return cQ536WhatIsTheTransportRateKeyword_6_0_0; }
		
		//"cost = "
		public Keyword getCostKeyword_6_1() { return cCostKeyword_6_1; }
		
		//answer5=INT
		public Assignment getAnswer5Assignment_6_2() { return cAnswer5Assignment_6_2; }
		
		//INT
		public RuleCall getAnswer5INTTerminalRuleCall_6_2_0() { return cAnswer5INTTerminalRuleCall_6_2_0; }
		
		//"unitCoin="
		public Keyword getUnitCoinKeyword_6_3() { return cUnitCoinKeyword_6_3; }
		
		//transportRateAnswerUnitCoin=UnitCoin
		public Assignment getTransportRateAnswerUnitCoinAssignment_6_4() { return cTransportRateAnswerUnitCoinAssignment_6_4; }
		
		//UnitCoin
		public RuleCall getTransportRateAnswerUnitCoinUnitCoinEnumRuleCall_6_4_0() { return cTransportRateAnswerUnitCoinUnitCoinEnumRuleCall_6_4_0; }
	}
	public class ShipmentDetailsQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ShipmentDetailsQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName41IsItAnInternationalShipmentKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cInternationalAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		//ShipmentDetailsQuestion:
		//	name="4.1 Is it an international shipment?" "internationalAnswer = " answer=("yes" | "no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.1 Is it an international shipment?" "internationalAnswer = " answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="4.1 Is it an international shipment?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.1 Is it an international shipment?"
		public Keyword getName41IsItAnInternationalShipmentKeyword_0_0() { return cName41IsItAnInternationalShipmentKeyword_0_0; }
		
		//"internationalAnswer = "
		public Keyword getInternationalAnswerKeyword_1() { return cInternationalAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	public class SanitaryControlQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.SanitaryControlQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName42IsTheProductSubjectToAnySanitaryControlUponArrivalAtTheDestinationCountryKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cSanitaryAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		//SanitaryControlQuestion:
		//	name="4.2 Is the product subject to any sanitary control upon arrival at the destination country?"
		//	"sanitaryAnswer = " answer=("yes" | "no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.2 Is the product subject to any sanitary control upon arrival at the destination country?" "sanitaryAnswer = "
		//answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="4.2 Is the product subject to any sanitary control upon arrival at the destination country?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.2 Is the product subject to any sanitary control upon arrival at the destination country?"
		public Keyword getName42IsTheProductSubjectToAnySanitaryControlUponArrivalAtTheDestinationCountryKeyword_0_0() { return cName42IsTheProductSubjectToAnySanitaryControlUponArrivalAtTheDestinationCountryKeyword_0_0; }
		
		//"sanitaryAnswer = "
		public Keyword getSanitaryAnswerKeyword_1() { return cSanitaryAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	public class CustomsQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.CustomsQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName43DoesTheShipmentHaveToGoThroughCustomsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cCustomsAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		//CustomsQuestion:
		//	name="4.3 Does the shipment have to go through customs?" "customsAnswer = " answer=("yes" | "no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.3 Does the shipment have to go through customs?" "customsAnswer = " answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="4.3 Does the shipment have to go through customs?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.3 Does the shipment have to go through customs?"
		public Keyword getName43DoesTheShipmentHaveToGoThroughCustomsKeyword_0_0() { return cName43DoesTheShipmentHaveToGoThroughCustomsKeyword_0_0; }
		
		//"customsAnswer = "
		public Keyword getCustomsAnswerKeyword_1() { return cCustomsAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	public class ImportTaxQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ImportTaxQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName44DoesItHaveToPayAnyImportTaxToTheDestinationCountryKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cTaxAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cSubSentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubSentenceTaxShipmentDetailsQuestionParserRuleCall_3_0 = (RuleCall)cSubSentenceAssignment_3.eContents().get(0);
		
		//ImportTaxQuestion:
		//	name="4.4 Does it have to pay any import tax to the destination country?" "taxAnswer = " answer=("yes" | "no")
		//	subSentence=TaxShipmentDetailsQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.4 Does it have to pay any import tax to the destination country?" "taxAnswer = " answer=("yes" | "no")
		//subSentence=TaxShipmentDetailsQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="4.4 Does it have to pay any import tax to the destination country?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.4 Does it have to pay any import tax to the destination country?"
		public Keyword getName44DoesItHaveToPayAnyImportTaxToTheDestinationCountryKeyword_0_0() { return cName44DoesItHaveToPayAnyImportTaxToTheDestinationCountryKeyword_0_0; }
		
		//"taxAnswer = "
		public Keyword getTaxAnswerKeyword_1() { return cTaxAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//subSentence=TaxShipmentDetailsQuestion?
		public Assignment getSubSentenceAssignment_3() { return cSubSentenceAssignment_3; }
		
		//TaxShipmentDetailsQuestion
		public RuleCall getSubSentenceTaxShipmentDetailsQuestionParserRuleCall_3_0() { return cSubSentenceTaxShipmentDetailsQuestionParserRuleCall_3_0; }
	}
	public class TaxShipmentDetailsQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.TaxShipmentDetailsQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName441HowMuchDoesItHaveToPayInTaxesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cCostKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerINTTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		private final Assignment cAnswerUnitCoinAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAnswerUnitCoinUnitCoinEnumRuleCall_3_0 = (RuleCall)cAnswerUnitCoinAssignment_3.eContents().get(0);
		
		//TaxShipmentDetailsQuestion:
		//	name="4.4.1 How much does it have to pay in taxes?" "cost = " answer=INT answerUnitCoin=UnitCoin;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.4.1 How much does it have to pay in taxes?" "cost = " answer=INT answerUnitCoin=UnitCoin
		public Group getGroup() { return cGroup; }
		
		//name="4.4.1 How much does it have to pay in taxes?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.4.1 How much does it have to pay in taxes?"
		public Keyword getName441HowMuchDoesItHaveToPayInTaxesKeyword_0_0() { return cName441HowMuchDoesItHaveToPayInTaxesKeyword_0_0; }
		
		//"cost = "
		public Keyword getCostKeyword_1() { return cCostKeyword_1; }
		
		//answer=INT
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//INT
		public RuleCall getAnswerINTTerminalRuleCall_2_0() { return cAnswerINTTerminalRuleCall_2_0; }
		
		//answerUnitCoin=UnitCoin
		public Assignment getAnswerUnitCoinAssignment_3() { return cAnswerUnitCoinAssignment_3; }
		
		//UnitCoin
		public RuleCall getAnswerUnitCoinUnitCoinEnumRuleCall_3_0() { return cAnswerUnitCoinUnitCoinEnumRuleCall_3_0; }
	}
	public class GeographicalQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.GeographicalQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName45AreThereGeographicalRestrictionsForTheExchangeKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cSubSentenceRestrictionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubSentenceRestrictionGeographicalRestrictionQuestionParserRuleCall_3_0 = (RuleCall)cSubSentenceRestrictionAssignment_3.eContents().get(0);
		
		//GeographicalQuestion:
		//	name="4.5 Are there geographical restrictions for the exchange?" "answer = " answer=("yes" | "no")
		//	subSentenceRestriction=GeographicalRestrictionQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.5 Are there geographical restrictions for the exchange?" "answer = " answer=("yes" | "no")
		//subSentenceRestriction=GeographicalRestrictionQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="4.5 Are there geographical restrictions for the exchange?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.5 Are there geographical restrictions for the exchange?"
		public Keyword getName45AreThereGeographicalRestrictionsForTheExchangeKeyword_0_0() { return cName45AreThereGeographicalRestrictionsForTheExchangeKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//subSentenceRestriction=GeographicalRestrictionQuestion?
		public Assignment getSubSentenceRestrictionAssignment_3() { return cSubSentenceRestrictionAssignment_3; }
		
		//GeographicalRestrictionQuestion
		public RuleCall getSubSentenceRestrictionGeographicalRestrictionQuestionParserRuleCall_3_0() { return cSubSentenceRestrictionGeographicalRestrictionQuestionParserRuleCall_3_0; }
	}
	public class GeographicalRestrictionQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.GeographicalRestrictionQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName451WhatAreTheGeographicalRestrictionsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cRestrictionsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//GeographicalRestrictionQuestion:
		//	name="4.5.1 What are the geographical restrictions?" "restrictions = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.5.1 What are the geographical restrictions?" "restrictions = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.5.1 What are the geographical restrictions?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.5.1 What are the geographical restrictions?"
		public Keyword getName451WhatAreTheGeographicalRestrictionsKeyword_0_0() { return cName451WhatAreTheGeographicalRestrictionsKeyword_0_0; }
		
		//"restrictions = "
		public Keyword getRestrictionsKeyword_1() { return cRestrictionsKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class AddressPickupQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.AddressPickupQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName46WhatIsThePickupAddressForTheCargoKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAddressKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//AddressPickupQuestion:
		//	name="4.6 What is the pickup address for the cargo?" "address = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.6 What is the pickup address for the cargo?" "address = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.6 What is the pickup address for the cargo?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.6 What is the pickup address for the cargo?"
		public Keyword getName46WhatIsThePickupAddressForTheCargoKeyword_0_0() { return cName46WhatIsThePickupAddressForTheCargoKeyword_0_0; }
		
		//"address = "
		public Keyword getAddressKeyword_1() { return cAddressKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class AddressDeliveryQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.AddressDeliveryQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName47WhatIsTheDeliveryAddressKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAddressKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//AddressDeliveryQuestion:
		//	name="4.7 What is the delivery address?" "address = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.7 What is the delivery address?" "address = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.7 What is the delivery address?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.7 What is the delivery address?"
		public Keyword getName47WhatIsTheDeliveryAddressKeyword_0_0() { return cName47WhatIsTheDeliveryAddressKeyword_0_0; }
		
		//"address = "
		public Keyword getAddressKeyword_1() { return cAddressKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class ShipmentTrackingNumberQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ShipmentTrackingNumberQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName48WhatIsTheShipmentTrackingNumberKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cTrackingNumberKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerINTTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//ShipmentTrackingNumberQuestion:
		//	name="4.8 What is the shipment tracking number?" "tracking number = " answer=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.8 What is the shipment tracking number?" "tracking number = " answer=INT
		public Group getGroup() { return cGroup; }
		
		//name="4.8 What is the shipment tracking number?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.8 What is the shipment tracking number?"
		public Keyword getName48WhatIsTheShipmentTrackingNumberKeyword_0_0() { return cName48WhatIsTheShipmentTrackingNumberKeyword_0_0; }
		
		//"tracking number = "
		public Keyword getTrackingNumberKeyword_1() { return cTrackingNumberKeyword_1; }
		
		//answer=INT
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//INT
		public RuleCall getAnswerINTTerminalRuleCall_2_0() { return cAnswerINTTerminalRuleCall_2_0; }
	}
	public class DangerousLoadQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.DangerousLoadQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName49DoesThePhysicalGoodRepresentADangerousLoadOrHaveSpecialTransportationNeedsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cSubSentenceSpecialMeasuresAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubSentenceSpecialMeasuresSpecialMeasuresQuestionParserRuleCall_3_0 = (RuleCall)cSubSentenceSpecialMeasuresAssignment_3.eContents().get(0);
		
		//DangerousLoadQuestion:
		//	name="4.9 Does the physical good represent a dangerous load or have special transportation needs?" "answer = "
		//	answer=("yes" | "no") subSentenceSpecialMeasures=SpecialMeasuresQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.9 Does the physical good represent a dangerous load or have special transportation needs?" "answer = "
		//answer=("yes" | "no") subSentenceSpecialMeasures=SpecialMeasuresQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="4.9 Does the physical good represent a dangerous load or have special transportation needs?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.9 Does the physical good represent a dangerous load or have special transportation needs?"
		public Keyword getName49DoesThePhysicalGoodRepresentADangerousLoadOrHaveSpecialTransportationNeedsKeyword_0_0() { return cName49DoesThePhysicalGoodRepresentADangerousLoadOrHaveSpecialTransportationNeedsKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//subSentenceSpecialMeasures=SpecialMeasuresQuestion?
		public Assignment getSubSentenceSpecialMeasuresAssignment_3() { return cSubSentenceSpecialMeasuresAssignment_3; }
		
		//SpecialMeasuresQuestion
		public RuleCall getSubSentenceSpecialMeasuresSpecialMeasuresQuestionParserRuleCall_3_0() { return cSubSentenceSpecialMeasuresSpecialMeasuresQuestionParserRuleCall_3_0; }
	}
	public class SpecialMeasuresQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.SpecialMeasuresQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName491WhatSpecialMeasuresAreNeededForItsProperTransportKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cEspecialMeasuresNeededKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//SpecialMeasuresQuestion:
		//	name="4.9.1 What special measures are needed for its proper transport?" "especial measures needed = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.9.1 What special measures are needed for its proper transport?" "especial measures needed = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.9.1 What special measures are needed for its proper transport?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.9.1 What special measures are needed for its proper transport?"
		public Keyword getName491WhatSpecialMeasuresAreNeededForItsProperTransportKeyword_0_0() { return cName491WhatSpecialMeasuresAreNeededForItsProperTransportKeyword_0_0; }
		
		//"especial measures needed = "
		public Keyword getEspecialMeasuresNeededKeyword_1() { return cEspecialMeasuresNeededKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class PerishableQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.PerishableQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName410IsItAPerishableProductKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cSubSentencePerishableAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubSentencePerishableExpirationDateQuestionParserRuleCall_3_0 = (RuleCall)cSubSentencePerishableAssignment_3.eContents().get(0);
		
		//PerishableQuestion:
		//	name="4.10 Is it a perishable product?" "answer = " answer=("yes" | "no")
		//	subSentencePerishable=ExpirationDateQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.10 Is it a perishable product?" "answer = " answer=("yes" | "no") subSentencePerishable=ExpirationDateQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="4.10 Is it a perishable product?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.10 Is it a perishable product?"
		public Keyword getName410IsItAPerishableProductKeyword_0_0() { return cName410IsItAPerishableProductKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//subSentencePerishable=ExpirationDateQuestion?
		public Assignment getSubSentencePerishableAssignment_3() { return cSubSentencePerishableAssignment_3; }
		
		//ExpirationDateQuestion
		public RuleCall getSubSentencePerishableExpirationDateQuestionParserRuleCall_3_0() { return cSubSentencePerishableExpirationDateQuestionParserRuleCall_3_0; }
	}
	public class ExpirationDateQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ExpirationDateQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName4101WhatIsItsExpirationDateKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//ExpirationDateQuestion:
		//	name="4.10.1 What is its expiration date?" "answer = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.10.1 What is its expiration date?" "answer = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.10.1 What is its expiration date?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.10.1 What is its expiration date?"
		public Keyword getName4101WhatIsItsExpirationDateKeyword_0_0() { return cName4101WhatIsItsExpirationDateKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class CargoTypeQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.CargoTypeQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName411WhatIsTheTypeOfCargoKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//CargoTypeQuestion:
		//	name="4.11 What is the type of cargo?" "answer = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.11 What is the type of cargo?" "answer = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.11 What is the type of cargo?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.11 What is the type of cargo?"
		public Keyword getName411WhatIsTheTypeOfCargoKeyword_0_0() { return cName411WhatIsTheTypeOfCargoKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class CargoWeightQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.CargoWeightQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName412HowMuchDoesTheCargoWeightKgKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerINTTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//CargoWeightQuestion:
		//	name="4.12 How much does the cargo weight (kg)?" "answer = " answer=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.12 How much does the cargo weight (kg)?" "answer = " answer=INT
		public Group getGroup() { return cGroup; }
		
		//name="4.12 How much does the cargo weight (kg)?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.12 How much does the cargo weight (kg)?"
		public Keyword getName412HowMuchDoesTheCargoWeightKgKeyword_0_0() { return cName412HowMuchDoesTheCargoWeightKgKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=INT
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//INT
		public RuleCall getAnswerINTTerminalRuleCall_2_0() { return cAnswerINTTerminalRuleCall_2_0; }
	}
	public class CargoDimensionsQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.CargoDimensionsQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName413WhatAreTheDimensionsOfTheCargoLengthXWidthXDepthInCmKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cCmXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cWidthAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWidthINTTerminalRuleCall_4_0 = (RuleCall)cWidthAssignment_4.eContents().get(0);
		private final Keyword cCmXKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDepthAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cDepthINTTerminalRuleCall_6_0 = (RuleCall)cDepthAssignment_6.eContents().get(0);
		private final Keyword cCmKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//CargoDimensionsQuestion:
		//	name="4.13 What are the dimensions of the cargo (length x width x depth in cm)?" "answer = " length=INT "cm x "
		//	width=INT "cm x " depth=INT "cm";
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.13 What are the dimensions of the cargo (length x width x depth in cm)?" "answer = " length=INT "cm x "
		//width=INT "cm x " depth=INT "cm"
		public Group getGroup() { return cGroup; }
		
		//name="4.13 What are the dimensions of the cargo (length x width x depth in cm)?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.13 What are the dimensions of the cargo (length x width x depth in cm)?"
		public Keyword getName413WhatAreTheDimensionsOfTheCargoLengthXWidthXDepthInCmKeyword_0_0() { return cName413WhatAreTheDimensionsOfTheCargoLengthXWidthXDepthInCmKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//length=INT
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_2_0() { return cLengthINTTerminalRuleCall_2_0; }
		
		//"cm x "
		public Keyword getCmXKeyword_3() { return cCmXKeyword_3; }
		
		//width=INT
		public Assignment getWidthAssignment_4() { return cWidthAssignment_4; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_4_0() { return cWidthINTTerminalRuleCall_4_0; }
		
		//"cm x "
		public Keyword getCmXKeyword_5() { return cCmXKeyword_5; }
		
		//depth=INT
		public Assignment getDepthAssignment_6() { return cDepthAssignment_6; }
		
		//INT
		public RuleCall getDepthINTTerminalRuleCall_6_0() { return cDepthINTTerminalRuleCall_6_0; }
		
		//"cm"
		public Keyword getCmKeyword_7() { return cCmKeyword_7; }
	}
	public class SeaShipmentQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.SeaShipmentQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName414IsTheShipmentMadeBySeaRouteKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cMaritimeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaritimeMaritimeQuestionParserRuleCall_3_0 = (RuleCall)cMaritimeAssignment_3.eContents().get(0);
		
		//SeaShipmentQuestion:
		//	name="4.14 Is the shipment made by sea route?" "answer = " answer=("yes" | "no") maritime=MaritimeQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.14 Is the shipment made by sea route?" "answer = " answer=("yes" | "no") maritime=MaritimeQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="4.14 Is the shipment made by sea route?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.14 Is the shipment made by sea route?"
		public Keyword getName414IsTheShipmentMadeBySeaRouteKeyword_0_0() { return cName414IsTheShipmentMadeBySeaRouteKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//maritime=MaritimeQuestion?
		public Assignment getMaritimeAssignment_3() { return cMaritimeAssignment_3; }
		
		//MaritimeQuestion
		public RuleCall getMaritimeMaritimeQuestionParserRuleCall_3_0() { return cMaritimeMaritimeQuestionParserRuleCall_3_0; }
	}
	public class MaritimeQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.MaritimeQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQ1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cQ14141WhatIsTheNameOfTheOriginPortKeyword_0_0 = (Keyword)cQ1Assignment_0.eContents().get(0);
		private final Keyword cOriginPortKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswer1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswer1STRINGTerminalRuleCall_2_0 = (RuleCall)cAnswer1Assignment_2.eContents().get(0);
		private final Assignment cQ2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cQ24142WhatIsTheNameOfTheDestinationPortKeyword_3_0 = (Keyword)cQ2Assignment_3.eContents().get(0);
		private final Keyword cDestinationPortKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnswer2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswer2STRINGTerminalRuleCall_5_0 = (RuleCall)cAnswer2Assignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cQ3Assignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cQ34143InCaseOfNeedDoesItLeaveThePortAgentThePowerToMakeKeyDecisionsKeyword_6_0_0 = (Keyword)cQ3Assignment_6_0.eContents().get(0);
		private final Keyword cAnswerKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cAnswer3Assignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final Alternatives cAnswer3Alternatives_6_2_0 = (Alternatives)cAnswer3Assignment_6_2.eContents().get(0);
		private final Keyword cAnswer3YesKeyword_6_2_0_0 = (Keyword)cAnswer3Alternatives_6_2_0.eContents().get(0);
		private final Keyword cAnswer3NoKeyword_6_2_0_1 = (Keyword)cAnswer3Alternatives_6_2_0.eContents().get(1);
		private final Assignment cQ4Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final Keyword cQ44144IsItAVoyageCharterOrTimeCharterPartyKeyword_7_0 = (Keyword)cQ4Assignment_7.eContents().get(0);
		private final Keyword cTypeOfVoyageKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAnswer4Assignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAnswer4VoyagetypeEnumRuleCall_9_0 = (RuleCall)cAnswer4Assignment_9.eContents().get(0);
		private final Assignment cSubSentenceAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cSubSentenceVoyageQuestionParserRuleCall_10_0 = (RuleCall)cSubSentenceAssignment_10.eContents().get(0);
		
		//MaritimeQuestion:
		//	q1="4.14.1 What is the name of the origin port?" "Origin Port = " answer1=STRING
		//	q2="4.14.2 What is the name of the destination port?" "Destination Port = " answer2=STRING
		//	(q3="4.14.3 In case of need, does it leave the port agent the power to make key decisions?" "answer = "
		//	answer3=("yes" | "no"))?
		//	q4="4.14.4 Is it a voyage charter or time charter party?" "type of voyage = " answer4=Voyagetype
		//	subSentence=VoyageQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//q1="4.14.1 What is the name of the origin port?" "Origin Port = " answer1=STRING
		//q2="4.14.2 What is the name of the destination port?" "Destination Port = " answer2=STRING
		//(q3="4.14.3 In case of need, does it leave the port agent the power to make key decisions?" "answer = " answer3=("yes"
		//| "no"))? q4="4.14.4 Is it a voyage charter or time charter party?" "type of voyage = " answer4=Voyagetype
		//subSentence=VoyageQuestion?
		public Group getGroup() { return cGroup; }
		
		//q1="4.14.1 What is the name of the origin port?"
		public Assignment getQ1Assignment_0() { return cQ1Assignment_0; }
		
		//"4.14.1 What is the name of the origin port?"
		public Keyword getQ14141WhatIsTheNameOfTheOriginPortKeyword_0_0() { return cQ14141WhatIsTheNameOfTheOriginPortKeyword_0_0; }
		
		//"Origin Port = "
		public Keyword getOriginPortKeyword_1() { return cOriginPortKeyword_1; }
		
		//answer1=STRING
		public Assignment getAnswer1Assignment_2() { return cAnswer1Assignment_2; }
		
		//STRING
		public RuleCall getAnswer1STRINGTerminalRuleCall_2_0() { return cAnswer1STRINGTerminalRuleCall_2_0; }
		
		//q2="4.14.2 What is the name of the destination port?"
		public Assignment getQ2Assignment_3() { return cQ2Assignment_3; }
		
		//"4.14.2 What is the name of the destination port?"
		public Keyword getQ24142WhatIsTheNameOfTheDestinationPortKeyword_3_0() { return cQ24142WhatIsTheNameOfTheDestinationPortKeyword_3_0; }
		
		//"Destination Port = "
		public Keyword getDestinationPortKeyword_4() { return cDestinationPortKeyword_4; }
		
		//answer2=STRING
		public Assignment getAnswer2Assignment_5() { return cAnswer2Assignment_5; }
		
		//STRING
		public RuleCall getAnswer2STRINGTerminalRuleCall_5_0() { return cAnswer2STRINGTerminalRuleCall_5_0; }
		
		//(q3="4.14.3 In case of need, does it leave the port agent the power to make key decisions?" "answer = " answer3=("yes" |
		//"no"))?
		public Group getGroup_6() { return cGroup_6; }
		
		//q3="4.14.3 In case of need, does it leave the port agent the power to make key decisions?"
		public Assignment getQ3Assignment_6_0() { return cQ3Assignment_6_0; }
		
		//"4.14.3 In case of need, does it leave the port agent the power to make key decisions?"
		public Keyword getQ34143InCaseOfNeedDoesItLeaveThePortAgentThePowerToMakeKeyDecisionsKeyword_6_0_0() { return cQ34143InCaseOfNeedDoesItLeaveThePortAgentThePowerToMakeKeyDecisionsKeyword_6_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_6_1() { return cAnswerKeyword_6_1; }
		
		//answer3=("yes" | "no")
		public Assignment getAnswer3Assignment_6_2() { return cAnswer3Assignment_6_2; }
		
		//("yes" | "no")
		public Alternatives getAnswer3Alternatives_6_2_0() { return cAnswer3Alternatives_6_2_0; }
		
		//"yes"
		public Keyword getAnswer3YesKeyword_6_2_0_0() { return cAnswer3YesKeyword_6_2_0_0; }
		
		//"no"
		public Keyword getAnswer3NoKeyword_6_2_0_1() { return cAnswer3NoKeyword_6_2_0_1; }
		
		//q4="4.14.4 Is it a voyage charter or time charter party?"
		public Assignment getQ4Assignment_7() { return cQ4Assignment_7; }
		
		//"4.14.4 Is it a voyage charter or time charter party?"
		public Keyword getQ44144IsItAVoyageCharterOrTimeCharterPartyKeyword_7_0() { return cQ44144IsItAVoyageCharterOrTimeCharterPartyKeyword_7_0; }
		
		//"type of voyage = "
		public Keyword getTypeOfVoyageKeyword_8() { return cTypeOfVoyageKeyword_8; }
		
		//answer4=Voyagetype
		public Assignment getAnswer4Assignment_9() { return cAnswer4Assignment_9; }
		
		//Voyagetype
		public RuleCall getAnswer4VoyagetypeEnumRuleCall_9_0() { return cAnswer4VoyagetypeEnumRuleCall_9_0; }
		
		//subSentence=VoyageQuestion?
		public Assignment getSubSentenceAssignment_10() { return cSubSentenceAssignment_10; }
		
		//VoyageQuestion
		public RuleCall getSubSentenceVoyageQuestionParserRuleCall_10_0() { return cSubSentenceVoyageQuestionParserRuleCall_10_0; }
	}
	public class VoyageQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.VoyageQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName41441ForHowLongIsTheShipRentedIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cQuantityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerSubSentenceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSubSentenceINTTerminalRuleCall_2_0 = (RuleCall)cAnswerSubSentenceAssignment_2.eContents().get(0);
		private final Keyword cUnitTimeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnswerUnitTimeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswerUnitTimeUnitTimeEnumRuleCall_4_0 = (RuleCall)cAnswerUnitTimeAssignment_4.eContents().get(0);
		
		//VoyageQuestion:
		//	name="4.14.4.1 For how long is the ship rented (indicated in minutes,days,weeks or years)" "quantity = "
		//	answerSubSentence=INT "unitTime = " answerUnitTime=UnitTime;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.14.4.1 For how long is the ship rented (indicated in minutes,days,weeks or years)" "quantity = "
		//answerSubSentence=INT "unitTime = " answerUnitTime=UnitTime
		public Group getGroup() { return cGroup; }
		
		//name="4.14.4.1 For how long is the ship rented (indicated in minutes,days,weeks or years)"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.14.4.1 For how long is the ship rented (indicated in minutes,days,weeks or years)"
		public Keyword getName41441ForHowLongIsTheShipRentedIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0() { return cName41441ForHowLongIsTheShipRentedIndicatedInMinutesDaysWeeksOrYearsKeyword_0_0; }
		
		//"quantity = "
		public Keyword getQuantityKeyword_1() { return cQuantityKeyword_1; }
		
		//answerSubSentence=INT
		public Assignment getAnswerSubSentenceAssignment_2() { return cAnswerSubSentenceAssignment_2; }
		
		//INT
		public RuleCall getAnswerSubSentenceINTTerminalRuleCall_2_0() { return cAnswerSubSentenceINTTerminalRuleCall_2_0; }
		
		//"unitTime = "
		public Keyword getUnitTimeKeyword_3() { return cUnitTimeKeyword_3; }
		
		//answerUnitTime=UnitTime
		public Assignment getAnswerUnitTimeAssignment_4() { return cAnswerUnitTimeAssignment_4; }
		
		//UnitTime
		public RuleCall getAnswerUnitTimeUnitTimeEnumRuleCall_4_0() { return cAnswerUnitTimeUnitTimeEnumRuleCall_4_0; }
	}
	public class MeansTransportQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.MeansTransportQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName415WhatIsTheMeansOfTransportKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//MeansTransportQuestion:
		//	name="4.15 What is the means of transport?" "answer = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.15 What is the means of transport?" "answer = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.15 What is the means of transport?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.15 What is the means of transport?"
		public Keyword getName415WhatIsTheMeansOfTransportKeyword_0_0() { return cName415WhatIsTheMeansOfTransportKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class CompanyQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.CompanyQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName416WhatIsTheNameOfTheTransportCompanyKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cNameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//CompanyQuestion:
		//	name="4.16 What is the name of the transport company?" "name = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.16 What is the name of the transport company?" "name = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.16 What is the name of the transport company?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.16 What is the name of the transport company?"
		public Keyword getName416WhatIsTheNameOfTheTransportCompanyKeyword_0_0() { return cName416WhatIsTheNameOfTheTransportCompanyKeyword_0_0; }
		
		//"name = "
		public Keyword getNameKeyword_1() { return cNameKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class DeliveryDeadlineQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.DeliveryDeadlineQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName417WhatIsTheDeadlineForDeliveryKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cDeadlineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//DeliveryDeadlineQuestion:
		//	name="4.17 What is the deadline for delivery?" "deadline = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.17 What is the deadline for delivery?" "deadline = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.17 What is the deadline for delivery?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.17 What is the deadline for delivery?"
		public Keyword getName417WhatIsTheDeadlineForDeliveryKeyword_0_0() { return cName417WhatIsTheDeadlineForDeliveryKeyword_0_0; }
		
		//"deadline = "
		public Keyword getDeadlineKeyword_1() { return cDeadlineKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class UpdatesAndMonitoringQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.UpdatesAndMonitoringQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName418ThroughWhatMeansWillUpdatesAndMonitoringDataBeReceivedKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//UpdatesAndMonitoringQuestion:
		//	name="4.18 Through what means will updates and monitoring data be received?" "answer = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.18 Through what means will updates and monitoring data be received?" "answer = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="4.18 Through what means will updates and monitoring data be received?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.18 Through what means will updates and monitoring data be received?"
		public Keyword getName418ThroughWhatMeansWillUpdatesAndMonitoringDataBeReceivedKeyword_0_0() { return cName418ThroughWhatMeansWillUpdatesAndMonitoringDataBeReceivedKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class ExternalMediatorQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ExternalMediatorQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName419InCaseOfDisputeIsItConsideredToAppointAnExternalMediatorKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cSubsentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubsentenceMediatorNameQuestionParserRuleCall_3_0 = (RuleCall)cSubsentenceAssignment_3.eContents().get(0);
		
		//ExternalMediatorQuestion:
		//	name="4.19 In case of dispute, is it considered to appoint an external mediator?" "answer = " answer=("yes" | "no")
		//	subsentence=MediatorNameQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.19 In case of dispute, is it considered to appoint an external mediator?" "answer = " answer=("yes" | "no")
		//subsentence=MediatorNameQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="4.19 In case of dispute, is it considered to appoint an external mediator?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.19 In case of dispute, is it considered to appoint an external mediator?"
		public Keyword getName419InCaseOfDisputeIsItConsideredToAppointAnExternalMediatorKeyword_0_0() { return cName419InCaseOfDisputeIsItConsideredToAppointAnExternalMediatorKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//subsentence=MediatorNameQuestion?
		public Assignment getSubsentenceAssignment_3() { return cSubsentenceAssignment_3; }
		
		//MediatorNameQuestion
		public RuleCall getSubsentenceMediatorNameQuestionParserRuleCall_3_0() { return cSubsentenceMediatorNameQuestionParserRuleCall_3_0; }
	}
	public class MediatorNameQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.MediatorNameQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName4191WhatIsTheNameOfTheIndividualOrCompanyMediatingExternalToTheTwoPartiesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerIDTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//MediatorNameQuestion:
		//	name="4.19.1 What is the name of the individual or company mediating external to the two parties?" "answer = "
		//	answer=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name="4.19.1 What is the name of the individual or company mediating external to the two parties?" "answer = " answer=ID
		public Group getGroup() { return cGroup; }
		
		//name="4.19.1 What is the name of the individual or company mediating external to the two parties?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"4.19.1 What is the name of the individual or company mediating external to the two parties?"
		public Keyword getName4191WhatIsTheNameOfTheIndividualOrCompanyMediatingExternalToTheTwoPartiesKeyword_0_0() { return cName4191WhatIsTheNameOfTheIndividualOrCompanyMediatingExternalToTheTwoPartiesKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=ID
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//ID
		public RuleCall getAnswerIDTerminalRuleCall_2_0() { return cAnswerIDTerminalRuleCall_2_0; }
	}
	public class ShipmentInsuranceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ShipmentInsuranceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName51IsTheCargoInsuredKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		//ShipmentInsuranceQuestion:
		//	name="5.1 Is the cargo insured?" "answer = " answer=("yes" | "no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="5.1 Is the cargo insured?" "answer = " answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="5.1 Is the cargo insured?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"5.1 Is the cargo insured?"
		public Keyword getName51IsTheCargoInsuredKeyword_0_0() { return cName51IsTheCargoInsuredKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	public class InsuranceDetailsQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.InsuranceDetailsQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cQ1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cQ1511WhatIsTheCostOfInsurancePerUnitAssetKeyword_0_0_0 = (Keyword)cQ1Assignment_0_0.eContents().get(0);
		private final Keyword cQuantityKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cAnswer1Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cAnswer1INTTerminalRuleCall_0_2_0 = (RuleCall)cAnswer1Assignment_0_2.eContents().get(0);
		private final Keyword cUnitCoinKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cAnswerUnitCoin1Assignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cAnswerUnitCoin1UnitCoinEnumRuleCall_0_4_0 = (RuleCall)cAnswerUnitCoin1Assignment_0_4.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cQ2Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cQ2512WhatCasesAreCoveredByTheInsuranceInsuranceClausesKeyword_1_0_0 = (Keyword)cQ2Assignment_1_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cAnswer2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cAnswer2STRINGTerminalRuleCall_1_2_0 = (RuleCall)cAnswer2Assignment_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cQ3Assignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cQ3513HowMuchWouldBeTheRefundPaidInCaseOfLossOrCargoDeliveredInPoorConditionKeyword_2_0_0 = (Keyword)cQ3Assignment_2_0.eContents().get(0);
		private final Keyword cAnswerKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cAnswer3Assignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cAnswer3INTTerminalRuleCall_2_2_0 = (RuleCall)cAnswer3Assignment_2_2.eContents().get(0);
		private final Keyword cUnitCoinKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cAnswerUnitCoin3Assignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cAnswerUnitCoin3UnitCoinEnumRuleCall_2_4_0 = (RuleCall)cAnswerUnitCoin3Assignment_2_4.eContents().get(0);
		
		//InsuranceDetailsQuestion:
		//	(q1="5.1.1 What is the cost of insurance (per unit asset)?" "quantity = " answer1=INT "unitCoin="
		//	answerUnitCoin1=UnitCoin)? (q2="5.1.2 What cases are covered by the insurance (insurance clauses)?" "answer = "
		//	answer2=STRING)? (q3="5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?"
		//	"answer = " answer3=INT "unitCoin=" answerUnitCoin3=UnitCoin)?;
		@Override public ParserRule getRule() { return rule; }
		
		//(q1="5.1.1 What is the cost of insurance (per unit asset)?" "quantity = " answer1=INT "unitCoin="
		//answerUnitCoin1=UnitCoin)? (q2="5.1.2 What cases are covered by the insurance (insurance clauses)?" "answer = "
		//answer2=STRING)? (q3="5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?"
		//"answer = " answer3=INT "unitCoin=" answerUnitCoin3=UnitCoin)?
		public Group getGroup() { return cGroup; }
		
		//(q1="5.1.1 What is the cost of insurance (per unit asset)?" "quantity = " answer1=INT "unitCoin="
		//answerUnitCoin1=UnitCoin)?
		public Group getGroup_0() { return cGroup_0; }
		
		//q1="5.1.1 What is the cost of insurance (per unit asset)?"
		public Assignment getQ1Assignment_0_0() { return cQ1Assignment_0_0; }
		
		//"5.1.1 What is the cost of insurance (per unit asset)?"
		public Keyword getQ1511WhatIsTheCostOfInsurancePerUnitAssetKeyword_0_0_0() { return cQ1511WhatIsTheCostOfInsurancePerUnitAssetKeyword_0_0_0; }
		
		//"quantity = "
		public Keyword getQuantityKeyword_0_1() { return cQuantityKeyword_0_1; }
		
		//answer1=INT
		public Assignment getAnswer1Assignment_0_2() { return cAnswer1Assignment_0_2; }
		
		//INT
		public RuleCall getAnswer1INTTerminalRuleCall_0_2_0() { return cAnswer1INTTerminalRuleCall_0_2_0; }
		
		//"unitCoin="
		public Keyword getUnitCoinKeyword_0_3() { return cUnitCoinKeyword_0_3; }
		
		//answerUnitCoin1=UnitCoin
		public Assignment getAnswerUnitCoin1Assignment_0_4() { return cAnswerUnitCoin1Assignment_0_4; }
		
		//UnitCoin
		public RuleCall getAnswerUnitCoin1UnitCoinEnumRuleCall_0_4_0() { return cAnswerUnitCoin1UnitCoinEnumRuleCall_0_4_0; }
		
		//(q2="5.1.2 What cases are covered by the insurance (insurance clauses)?" "answer = " answer2=STRING)?
		public Group getGroup_1() { return cGroup_1; }
		
		//q2="5.1.2 What cases are covered by the insurance (insurance clauses)?"
		public Assignment getQ2Assignment_1_0() { return cQ2Assignment_1_0; }
		
		//"5.1.2 What cases are covered by the insurance (insurance clauses)?"
		public Keyword getQ2512WhatCasesAreCoveredByTheInsuranceInsuranceClausesKeyword_1_0_0() { return cQ2512WhatCasesAreCoveredByTheInsuranceInsuranceClausesKeyword_1_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1_1() { return cAnswerKeyword_1_1; }
		
		//answer2=STRING
		public Assignment getAnswer2Assignment_1_2() { return cAnswer2Assignment_1_2; }
		
		//STRING
		public RuleCall getAnswer2STRINGTerminalRuleCall_1_2_0() { return cAnswer2STRINGTerminalRuleCall_1_2_0; }
		
		//(q3="5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?" "answer = "
		//answer3=INT "unitCoin=" answerUnitCoin3=UnitCoin)?
		public Group getGroup_2() { return cGroup_2; }
		
		//q3="5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?"
		public Assignment getQ3Assignment_2_0() { return cQ3Assignment_2_0; }
		
		//"5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?"
		public Keyword getQ3513HowMuchWouldBeTheRefundPaidInCaseOfLossOrCargoDeliveredInPoorConditionKeyword_2_0_0() { return cQ3513HowMuchWouldBeTheRefundPaidInCaseOfLossOrCargoDeliveredInPoorConditionKeyword_2_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_2_1() { return cAnswerKeyword_2_1; }
		
		//answer3=INT
		public Assignment getAnswer3Assignment_2_2() { return cAnswer3Assignment_2_2; }
		
		//INT
		public RuleCall getAnswer3INTTerminalRuleCall_2_2_0() { return cAnswer3INTTerminalRuleCall_2_2_0; }
		
		//"unitCoin="
		public Keyword getUnitCoinKeyword_2_3() { return cUnitCoinKeyword_2_3; }
		
		//answerUnitCoin3=UnitCoin
		public Assignment getAnswerUnitCoin3Assignment_2_4() { return cAnswerUnitCoin3Assignment_2_4; }
		
		//UnitCoin
		public RuleCall getAnswerUnitCoin3UnitCoinEnumRuleCall_2_4_0() { return cAnswerUnitCoin3UnitCoinEnumRuleCall_2_4_0; }
	}
	public class ReturnsOrCancellationsQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ReturnsOrCancellationsQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName52IsThePossibilityOfReturnsOrCancellationsInTheExchangeForeseenKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cSubsentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubsentenceReturnsManagementQuestionParserRuleCall_3_0 = (RuleCall)cSubsentenceAssignment_3.eContents().get(0);
		
		//ReturnsOrCancellationsQuestion:
		//	name="5.2 Is the possibility of returns or cancellations in the exchange foreseen?" "answer = " answer=("yes" | "no")
		//	subsentence=ReturnsManagementQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="5.2 Is the possibility of returns or cancellations in the exchange foreseen?" "answer = " answer=("yes" | "no")
		//subsentence=ReturnsManagementQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="5.2 Is the possibility of returns or cancellations in the exchange foreseen?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"5.2 Is the possibility of returns or cancellations in the exchange foreseen?"
		public Keyword getName52IsThePossibilityOfReturnsOrCancellationsInTheExchangeForeseenKeyword_0_0() { return cName52IsThePossibilityOfReturnsOrCancellationsInTheExchangeForeseenKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//subsentence=ReturnsManagementQuestion?
		public Assignment getSubsentenceAssignment_3() { return cSubsentenceAssignment_3; }
		
		//ReturnsManagementQuestion
		public RuleCall getSubsentenceReturnsManagementQuestionParserRuleCall_3_0() { return cSubsentenceReturnsManagementQuestionParserRuleCall_3_0; }
	}
	public class ReturnsManagementQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ReturnsManagementQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName521HowWouldReturnsOrCancellationsBeManagedAccordingToTheTermsOfTheContractKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//ReturnsManagementQuestion:
		//	name="5.2.1 How would returns or cancellations be managed according to the terms of the contract?" "answer = "
		//	answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="5.2.1 How would returns or cancellations be managed according to the terms of the contract?" "answer = "
		//answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="5.2.1 How would returns or cancellations be managed according to the terms of the contract?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"5.2.1 How would returns or cancellations be managed according to the terms of the contract?"
		public Keyword getName521HowWouldReturnsOrCancellationsBeManagedAccordingToTheTermsOfTheContractKeyword_0_0() { return cName521HowWouldReturnsOrCancellationsBeManagedAccordingToTheTermsOfTheContractKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class PenaltyForNeglectQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.PenaltyForNeglectQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName53WhatIsThePenaltyInCaseOfNeglectOrAbandonmentOfDutiesKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//PenaltyForNeglectQuestion:
		//	name="5.3 What is the penalty in case of neglect or abandonment of duties?" "answer = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="5.3 What is the penalty in case of neglect or abandonment of duties?" "answer = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="5.3 What is the penalty in case of neglect or abandonment of duties?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"5.3 What is the penalty in case of neglect or abandonment of duties?"
		public Keyword getName53WhatIsThePenaltyInCaseOfNeglectOrAbandonmentOfDutiesKeyword_0_0() { return cName53WhatIsThePenaltyInCaseOfNeglectOrAbandonmentOfDutiesKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class AgreedPriceQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.AgreedPriceQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName61WhatIsTheAgreedPricePerUnitOfProductKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cQuanityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerINTTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cUnitCoinKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAnswerUnitCoinAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAnswerUnitCoinUnitCoinEnumRuleCall_4_0 = (RuleCall)cAnswerUnitCoinAssignment_4.eContents().get(0);
		
		//AgreedPriceQuestion:
		//	name="6.1 What is the agreed price per unit of product ?" "quanity = " answer=INT "unitCoin" answerUnitCoin=UnitCoin;
		@Override public ParserRule getRule() { return rule; }
		
		//name="6.1 What is the agreed price per unit of product ?" "quanity = " answer=INT "unitCoin" answerUnitCoin=UnitCoin
		public Group getGroup() { return cGroup; }
		
		//name="6.1 What is the agreed price per unit of product ?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"6.1 What is the agreed price per unit of product ?"
		public Keyword getName61WhatIsTheAgreedPricePerUnitOfProductKeyword_0_0() { return cName61WhatIsTheAgreedPricePerUnitOfProductKeyword_0_0; }
		
		//"quanity = "
		public Keyword getQuanityKeyword_1() { return cQuanityKeyword_1; }
		
		//answer=INT
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//INT
		public RuleCall getAnswerINTTerminalRuleCall_2_0() { return cAnswerINTTerminalRuleCall_2_0; }
		
		//"unitCoin"
		public Keyword getUnitCoinKeyword_3() { return cUnitCoinKeyword_3; }
		
		//answerUnitCoin=UnitCoin
		public Assignment getAnswerUnitCoinAssignment_4() { return cAnswerUnitCoinAssignment_4; }
		
		//UnitCoin
		public RuleCall getAnswerUnitCoinUnitCoinEnumRuleCall_4_0() { return cAnswerUnitCoinUnitCoinEnumRuleCall_4_0; }
	}
	public class ProductQualityQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ProductQualityQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName62WhatIsTheExpectedQualityOfTheProductKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		private final Assignment cExpectedQualityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpectedQualityExpectedQualityQuestionParserRuleCall_3_0 = (RuleCall)cExpectedQualityAssignment_3.eContents().get(0);
		
		//ProductQualityQuestion:
		//	name="6.2 What is the expected quality of the product?" "answer = " answer=STRING
		//	expectedQuality=ExpectedQualityQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="6.2 What is the expected quality of the product?" "answer = " answer=STRING
		//expectedQuality=ExpectedQualityQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="6.2 What is the expected quality of the product?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"6.2 What is the expected quality of the product?"
		public Keyword getName62WhatIsTheExpectedQualityOfTheProductKeyword_0_0() { return cName62WhatIsTheExpectedQualityOfTheProductKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
		
		//expectedQuality=ExpectedQualityQuestion?
		public Assignment getExpectedQualityAssignment_3() { return cExpectedQualityAssignment_3; }
		
		//ExpectedQualityQuestion
		public RuleCall getExpectedQualityExpectedQualityQuestionParserRuleCall_3_0() { return cExpectedQualityExpectedQualityQuestionParserRuleCall_3_0; }
	}
	public class ExpectedQualityQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.ExpectedQualityQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQ1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cQ1621HowWillTheQualityOfTheProductBeDeterminedKeyword_0_0 = (Keyword)cQ1Assignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswer1Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswer1STRINGTerminalRuleCall_2_0 = (RuleCall)cAnswer1Assignment_2.eContents().get(0);
		private final Assignment cQ2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cQ2622WhatHappensIfTheDeliveredProductDoesNotMeetTheAgreedQualityKeyword_3_0 = (Keyword)cQ2Assignment_3.eContents().get(0);
		private final Keyword cAnswerKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cAnswer2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cAnswer2STRINGTerminalRuleCall_5_0 = (RuleCall)cAnswer2Assignment_5.eContents().get(0);
		
		//ExpectedQualityQuestion:
		//	q1="6.2.1 How will the quality of the product be determined?" "answer = " answer1=STRING
		//	q2="6.2.2 What happens if the delivered product does not meet the agreed quality?" "answer = " answer2=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//q1="6.2.1 How will the quality of the product be determined?" "answer = " answer1=STRING
		//q2="6.2.2 What happens if the delivered product does not meet the agreed quality?" "answer = " answer2=STRING
		public Group getGroup() { return cGroup; }
		
		//q1="6.2.1 How will the quality of the product be determined?"
		public Assignment getQ1Assignment_0() { return cQ1Assignment_0; }
		
		//"6.2.1 How will the quality of the product be determined?"
		public Keyword getQ1621HowWillTheQualityOfTheProductBeDeterminedKeyword_0_0() { return cQ1621HowWillTheQualityOfTheProductBeDeterminedKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer1=STRING
		public Assignment getAnswer1Assignment_2() { return cAnswer1Assignment_2; }
		
		//STRING
		public RuleCall getAnswer1STRINGTerminalRuleCall_2_0() { return cAnswer1STRINGTerminalRuleCall_2_0; }
		
		//q2="6.2.2 What happens if the delivered product does not meet the agreed quality?"
		public Assignment getQ2Assignment_3() { return cQ2Assignment_3; }
		
		//"6.2.2 What happens if the delivered product does not meet the agreed quality?"
		public Keyword getQ2622WhatHappensIfTheDeliveredProductDoesNotMeetTheAgreedQualityKeyword_3_0() { return cQ2622WhatHappensIfTheDeliveredProductDoesNotMeetTheAgreedQualityKeyword_3_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_4() { return cAnswerKeyword_4; }
		
		//answer2=STRING
		public Assignment getAnswer2Assignment_5() { return cAnswer2Assignment_5; }
		
		//STRING
		public RuleCall getAnswer2STRINGTerminalRuleCall_5_0() { return cAnswer2STRINGTerminalRuleCall_5_0; }
	}
	public class InternationalSealQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.InternationalSealQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName63DoesTheMerchandiseHaveAnyInternationalSealOrDistinctionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cSubsentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubsentenceInternacionalSealNameQuestionParserRuleCall_3_0 = (RuleCall)cSubsentenceAssignment_3.eContents().get(0);
		
		//InternationalSealQuestion:
		//	name="6.3 Does the merchandise have any international seal or distinction?" "answer = " answer=("yes" | "no")
		//	subsentence=InternacionalSealNameQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="6.3 Does the merchandise have any international seal or distinction?" "answer = " answer=("yes" | "no")
		//subsentence=InternacionalSealNameQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="6.3 Does the merchandise have any international seal or distinction?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"6.3 Does the merchandise have any international seal or distinction?"
		public Keyword getName63DoesTheMerchandiseHaveAnyInternationalSealOrDistinctionKeyword_0_0() { return cName63DoesTheMerchandiseHaveAnyInternationalSealOrDistinctionKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//subsentence=InternacionalSealNameQuestion?
		public Assignment getSubsentenceAssignment_3() { return cSubsentenceAssignment_3; }
		
		//InternacionalSealNameQuestion
		public RuleCall getSubsentenceInternacionalSealNameQuestionParserRuleCall_3_0() { return cSubsentenceInternacionalSealNameQuestionParserRuleCall_3_0; }
	}
	public class InternacionalSealNameQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.InternacionalSealNameQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName631WhatInternationalSealOrDistinctionDoesTheCargoHaveKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerSTRINGTerminalRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//InternacionalSealNameQuestion:
		//	name="6.3.1 What international seal or distinction does the cargo have?" "answer = " answer=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//name="6.3.1 What international seal or distinction does the cargo have?" "answer = " answer=STRING
		public Group getGroup() { return cGroup; }
		
		//name="6.3.1 What international seal or distinction does the cargo have?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"6.3.1 What international seal or distinction does the cargo have?"
		public Keyword getName631WhatInternationalSealOrDistinctionDoesTheCargoHaveKeyword_0_0() { return cName631WhatInternationalSealOrDistinctionDoesTheCargoHaveKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=STRING
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//STRING
		public RuleCall getAnswerSTRINGTerminalRuleCall_2_0() { return cAnswerSTRINGTerminalRuleCall_2_0; }
	}
	public class HealthInspectionQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.HealthInspectionQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName64HasAnyHealthCheckOrInspectionBeenCarriedOutAtTheProductionOrStorageSiteKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		private final Assignment cSubsentenceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSubsentenceInspectionResultQuestionParserRuleCall_3_0 = (RuleCall)cSubsentenceAssignment_3.eContents().get(0);
		
		//HealthInspectionQuestion:
		//	name="6.4 Has any health check or inspection been carried out at the production or storage site?" "answer = "
		//	answer=("yes" | "no") subsentence=InspectionResultQuestion?;
		@Override public ParserRule getRule() { return rule; }
		
		//name="6.4 Has any health check or inspection been carried out at the production or storage site?" "answer = "
		//answer=("yes" | "no") subsentence=InspectionResultQuestion?
		public Group getGroup() { return cGroup; }
		
		//name="6.4 Has any health check or inspection been carried out at the production or storage site?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"6.4 Has any health check or inspection been carried out at the production or storage site?"
		public Keyword getName64HasAnyHealthCheckOrInspectionBeenCarriedOutAtTheProductionOrStorageSiteKeyword_0_0() { return cName64HasAnyHealthCheckOrInspectionBeenCarriedOutAtTheProductionOrStorageSiteKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
		
		//subsentence=InspectionResultQuestion?
		public Assignment getSubsentenceAssignment_3() { return cSubsentenceAssignment_3; }
		
		//InspectionResultQuestion
		public RuleCall getSubsentenceInspectionResultQuestionParserRuleCall_3_0() { return cSubsentenceInspectionResultQuestionParserRuleCall_3_0; }
	}
	public class InspectionResultQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.InspectionResultQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName641WhatWasTheResultOfTheInspectionKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cResultOfInspectionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cAnswerInspectionResultEnumRuleCall_2_0 = (RuleCall)cAnswerAssignment_2.eContents().get(0);
		
		//InspectionResultQuestion:
		//	name="6.4.1 What was the result of the inspection?" "result of inspection = " answer=inspectionResult;
		@Override public ParserRule getRule() { return rule; }
		
		//name="6.4.1 What was the result of the inspection?" "result of inspection = " answer=inspectionResult
		public Group getGroup() { return cGroup; }
		
		//name="6.4.1 What was the result of the inspection?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"6.4.1 What was the result of the inspection?"
		public Keyword getName641WhatWasTheResultOfTheInspectionKeyword_0_0() { return cName641WhatWasTheResultOfTheInspectionKeyword_0_0; }
		
		//"result of inspection = "
		public Keyword getResultOfInspectionKeyword_1() { return cResultOfInspectionKeyword_1; }
		
		//answer=inspectionResult
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//inspectionResult
		public RuleCall getAnswerInspectionResultEnumRuleCall_2_0() { return cAnswerInspectionResultEnumRuleCall_2_0; }
	}
	public class StorageConditionsQuestionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.StorageConditionsQuestion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cName65HasTheMerchandiseBeenStoredAtAllTimesInOptimalHumidityAndTemperatureConditionsKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Keyword cAnswerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAnswerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cAnswerAlternatives_2_0 = (Alternatives)cAnswerAssignment_2.eContents().get(0);
		private final Keyword cAnswerYesKeyword_2_0_0 = (Keyword)cAnswerAlternatives_2_0.eContents().get(0);
		private final Keyword cAnswerNoKeyword_2_0_1 = (Keyword)cAnswerAlternatives_2_0.eContents().get(1);
		
		//StorageConditionsQuestion:
		//	name="6.5 Has the merchandise been stored at all times in optimal humidity and temperature conditions?" "answer = "
		//	answer=("yes" | "no");
		@Override public ParserRule getRule() { return rule; }
		
		//name="6.5 Has the merchandise been stored at all times in optimal humidity and temperature conditions?" "answer = "
		//answer=("yes" | "no")
		public Group getGroup() { return cGroup; }
		
		//name="6.5 Has the merchandise been stored at all times in optimal humidity and temperature conditions?"
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//"6.5 Has the merchandise been stored at all times in optimal humidity and temperature conditions?"
		public Keyword getName65HasTheMerchandiseBeenStoredAtAllTimesInOptimalHumidityAndTemperatureConditionsKeyword_0_0() { return cName65HasTheMerchandiseBeenStoredAtAllTimesInOptimalHumidityAndTemperatureConditionsKeyword_0_0; }
		
		//"answer = "
		public Keyword getAnswerKeyword_1() { return cAnswerKeyword_1; }
		
		//answer=("yes" | "no")
		public Assignment getAnswerAssignment_2() { return cAnswerAssignment_2; }
		
		//("yes" | "no")
		public Alternatives getAnswerAlternatives_2_0() { return cAnswerAlternatives_2_0; }
		
		//"yes"
		public Keyword getAnswerYesKeyword_2_0_0() { return cAnswerYesKeyword_2_0_0; }
		
		//"no"
		public Keyword getAnswerNoKeyword_2_0_1() { return cAnswerNoKeyword_2_0_1; }
	}
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cNumberEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cNumberNumberKeyword_0_0 = (Keyword)cNumberEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cTextEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cTextTextKeyword_1_0 = (Keyword)cTextEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTrueOrFalseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTrueOrFalseTrueOrFalseKeyword_2_0 = (Keyword)cTrueOrFalseEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Type:
		//	Number | Text | TrueOrFalse;
		public EnumRule getRule() { return rule; }
		
		//Number | Text | TrueOrFalse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Number
		public EnumLiteralDeclaration getNumberEnumLiteralDeclaration_0() { return cNumberEnumLiteralDeclaration_0; }
		
		//"Number"
		public Keyword getNumberNumberKeyword_0_0() { return cNumberNumberKeyword_0_0; }
		
		//Text
		public EnumLiteralDeclaration getTextEnumLiteralDeclaration_1() { return cTextEnumLiteralDeclaration_1; }
		
		//"Text"
		public Keyword getTextTextKeyword_1_0() { return cTextTextKeyword_1_0; }
		
		//TrueOrFalse
		public EnumLiteralDeclaration getTrueOrFalseEnumLiteralDeclaration_2() { return cTrueOrFalseEnumLiteralDeclaration_2; }
		
		//"TrueOrFalse"
		public Keyword getTrueOrFalseTrueOrFalseKeyword_2_0() { return cTrueOrFalseTrueOrFalseKeyword_2_0; }
	}
	public class UnitTimeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.UnitTime");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMinutesEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMinutesMinutesKeyword_0_0 = (Keyword)cMinutesEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDaysEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDaysDaysKeyword_1_0 = (Keyword)cDaysEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWeeksEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWeeksWeeksKeyword_2_0 = (Keyword)cWeeksEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cYearsEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cYearsYearsKeyword_3_0 = (Keyword)cYearsEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum UnitTime:
		//	minutes | days | weeks | years;
		public EnumRule getRule() { return rule; }
		
		//minutes | days | weeks | years
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//minutes
		public EnumLiteralDeclaration getMinutesEnumLiteralDeclaration_0() { return cMinutesEnumLiteralDeclaration_0; }
		
		//"minutes"
		public Keyword getMinutesMinutesKeyword_0_0() { return cMinutesMinutesKeyword_0_0; }
		
		//days
		public EnumLiteralDeclaration getDaysEnumLiteralDeclaration_1() { return cDaysEnumLiteralDeclaration_1; }
		
		//"days"
		public Keyword getDaysDaysKeyword_1_0() { return cDaysDaysKeyword_1_0; }
		
		//weeks
		public EnumLiteralDeclaration getWeeksEnumLiteralDeclaration_2() { return cWeeksEnumLiteralDeclaration_2; }
		
		//"weeks"
		public Keyword getWeeksWeeksKeyword_2_0() { return cWeeksWeeksKeyword_2_0; }
		
		//years
		public EnumLiteralDeclaration getYearsEnumLiteralDeclaration_3() { return cYearsEnumLiteralDeclaration_3; }
		
		//"years"
		public Keyword getYearsYearsKeyword_3_0() { return cYearsYearsKeyword_3_0; }
	}
	public class UnitCoinElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.UnitCoin");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEtherEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEtherEtherKeyword_0_0 = (Keyword)cEtherEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWeiEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWeiWeiKeyword_1_0 = (Keyword)cWeiEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPweiEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPweiPweiKeyword_2_0 = (Keyword)cPweiEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGweiEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGweiGweiKeyword_3_0 = (Keyword)cGweiEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cSzaboEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cSzaboSzaboKeyword_4_0 = (Keyword)cSzaboEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum UnitCoin:
		//	ether | wei | pwei | gwei | szabo;
		public EnumRule getRule() { return rule; }
		
		//ether | wei | pwei | gwei | szabo
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ether
		public EnumLiteralDeclaration getEtherEnumLiteralDeclaration_0() { return cEtherEnumLiteralDeclaration_0; }
		
		//"ether"
		public Keyword getEtherEtherKeyword_0_0() { return cEtherEtherKeyword_0_0; }
		
		//wei
		public EnumLiteralDeclaration getWeiEnumLiteralDeclaration_1() { return cWeiEnumLiteralDeclaration_1; }
		
		//"wei"
		public Keyword getWeiWeiKeyword_1_0() { return cWeiWeiKeyword_1_0; }
		
		//pwei
		public EnumLiteralDeclaration getPweiEnumLiteralDeclaration_2() { return cPweiEnumLiteralDeclaration_2; }
		
		//"pwei"
		public Keyword getPweiPweiKeyword_2_0() { return cPweiPweiKeyword_2_0; }
		
		//gwei
		public EnumLiteralDeclaration getGweiEnumLiteralDeclaration_3() { return cGweiEnumLiteralDeclaration_3; }
		
		//"gwei"
		public Keyword getGweiGweiKeyword_3_0() { return cGweiGweiKeyword_3_0; }
		
		//szabo
		public EnumLiteralDeclaration getSzaboEnumLiteralDeclaration_4() { return cSzaboEnumLiteralDeclaration_4; }
		
		//"szabo"
		public Keyword getSzaboSzaboKeyword_4_0() { return cSzaboSzaboKeyword_4_0; }
	}
	public class VoyagetypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.Voyagetype");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTimeEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTimeTimeKeyword_0_0 = (Keyword)cTimeEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVoyageEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVoyageVoyageKeyword_1_0 = (Keyword)cVoyageEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Voyagetype:
		//	time | voyage;
		public EnumRule getRule() { return rule; }
		
		//time | voyage
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//time
		public EnumLiteralDeclaration getTimeEnumLiteralDeclaration_0() { return cTimeEnumLiteralDeclaration_0; }
		
		//"time"
		public Keyword getTimeTimeKeyword_0_0() { return cTimeTimeKeyword_0_0; }
		
		//voyage
		public EnumLiteralDeclaration getVoyageEnumLiteralDeclaration_1() { return cVoyageEnumLiteralDeclaration_1; }
		
		//"voyage"
		public Keyword getVoyageVoyageKeyword_1_0() { return cVoyageVoyageKeyword_1_0; }
	}
	public class InspectionResultElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.inspectionResult");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFavorableEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFavorableFavorableKeyword_0_0 = (Keyword)cFavorableEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cUnfavorableEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cUnfavorableUnfavorableKeyword_1_0 = (Keyword)cUnfavorableEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum inspectionResult:
		//	favorable | unfavorable;
		public EnumRule getRule() { return rule; }
		
		//favorable | unfavorable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//favorable
		public EnumLiteralDeclaration getFavorableEnumLiteralDeclaration_0() { return cFavorableEnumLiteralDeclaration_0; }
		
		//"favorable"
		public Keyword getFavorableFavorableKeyword_0_0() { return cFavorableFavorableKeyword_0_0; }
		
		//unfavorable
		public EnumLiteralDeclaration getUnfavorableEnumLiteralDeclaration_1() { return cUnfavorableEnumLiteralDeclaration_1; }
		
		//"unfavorable"
		public Keyword getUnfavorableUnfavorableKeyword_1_0() { return cUnfavorableUnfavorableKeyword_1_0; }
	}
	public class ParticipantsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.Participants");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cActorSendEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cActorSendActorSendKeyword_0_0 = (Keyword)cActorSendEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cActorReceiptEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cActorReceiptActorReceiptKeyword_1_0 = (Keyword)cActorReceiptEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Participants:
		//	actorSend | actorReceipt;
		public EnumRule getRule() { return rule; }
		
		//actorSend | actorReceipt
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//actorSend
		public EnumLiteralDeclaration getActorSendEnumLiteralDeclaration_0() { return cActorSendEnumLiteralDeclaration_0; }
		
		//"actorSend"
		public Keyword getActorSendActorSendKeyword_0_0() { return cActorSendActorSendKeyword_0_0; }
		
		//actorReceipt
		public EnumLiteralDeclaration getActorReceiptEnumLiteralDeclaration_1() { return cActorReceiptEnumLiteralDeclaration_1; }
		
		//"actorReceipt"
		public Keyword getActorReceiptActorReceiptKeyword_1_0() { return cActorReceiptActorReceiptKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final TerminalRule tEOLINE;
	private final ValueExchangeElements pValueExchange;
	private final DataQuestionElements pDataQuestion;
	private final ShipmentQuestionElements pShipmentQuestion;
	private final InsuranceQuestionElements pInsuranceQuestion;
	private final AlimentaryQuestionElements pAlimentaryQuestion;
	private final ValueObjectQuestionElements pValueObjectQuestion;
	private final ValueObjectRightQuestionElements pValueObjectRightQuestion;
	private final ValueObjectTokenQuestionElements pValueObjectTokenQuestion;
	private final ValueObjectTangibleQuestionElements pValueObjectTangibleQuestion;
	private final TypeElements eType;
	private final UnitTimeElements eUnitTime;
	private final UnitCoinElements eUnitCoin;
	private final VoyagetypeElements eVoyagetype;
	private final InspectionResultElements eInspectionResult;
	private final ParticipantsElements eParticipants;
	private final DataRegisterElements pDataRegister;
	private final TokenElements pToken;
	private final TokenERC20Elements pTokenERC20;
	private final TokenERC223Elements pTokenERC223;
	private final TokenERC721Elements pTokenERC721;
	private final TimeValueExchangeDurationQuestionElements pTimeValueExchangeDurationQuestion;
	private final TimeStartValueExchangeQuestionElements pTimeStartValueExchangeQuestion;
	private final RepeatValueExchangeQuestionElements pRepeatValueExchangeQuestion;
	private final ConditionsValueExchangeQuestionElements pConditionsValueExchangeQuestion;
	private final LegalQuestionElements pLegalQuestion;
	private final AgeQuestionElements pAgeQuestion;
	private final TaxQuestionElements pTaxQuestion;
	private final AdditionalLegalDocumentQuestionElements pAdditionalLegalDocumentQuestion;
	private final RegulatoryComplianceQuestionElements pRegulatoryComplianceQuestion;
	private final EconomyQuestionElements pEconomyQuestion;
	private final MinimumAmountQuestionElements pMinimumAmountQuestion;
	private final ShipmentCostResponsibilityQuestionElements pShipmentCostResponsibilityQuestion;
	private final ShipmentDetailsQuestionElements pShipmentDetailsQuestion;
	private final SanitaryControlQuestionElements pSanitaryControlQuestion;
	private final CustomsQuestionElements pCustomsQuestion;
	private final ImportTaxQuestionElements pImportTaxQuestion;
	private final TaxShipmentDetailsQuestionElements pTaxShipmentDetailsQuestion;
	private final GeographicalQuestionElements pGeographicalQuestion;
	private final GeographicalRestrictionQuestionElements pGeographicalRestrictionQuestion;
	private final AddressPickupQuestionElements pAddressPickupQuestion;
	private final AddressDeliveryQuestionElements pAddressDeliveryQuestion;
	private final ShipmentTrackingNumberQuestionElements pShipmentTrackingNumberQuestion;
	private final DangerousLoadQuestionElements pDangerousLoadQuestion;
	private final SpecialMeasuresQuestionElements pSpecialMeasuresQuestion;
	private final PerishableQuestionElements pPerishableQuestion;
	private final ExpirationDateQuestionElements pExpirationDateQuestion;
	private final CargoTypeQuestionElements pCargoTypeQuestion;
	private final CargoWeightQuestionElements pCargoWeightQuestion;
	private final CargoDimensionsQuestionElements pCargoDimensionsQuestion;
	private final SeaShipmentQuestionElements pSeaShipmentQuestion;
	private final MaritimeQuestionElements pMaritimeQuestion;
	private final VoyageQuestionElements pVoyageQuestion;
	private final MeansTransportQuestionElements pMeansTransportQuestion;
	private final CompanyQuestionElements pCompanyQuestion;
	private final DeliveryDeadlineQuestionElements pDeliveryDeadlineQuestion;
	private final UpdatesAndMonitoringQuestionElements pUpdatesAndMonitoringQuestion;
	private final ExternalMediatorQuestionElements pExternalMediatorQuestion;
	private final MediatorNameQuestionElements pMediatorNameQuestion;
	private final ShipmentInsuranceQuestionElements pShipmentInsuranceQuestion;
	private final InsuranceDetailsQuestionElements pInsuranceDetailsQuestion;
	private final ReturnsOrCancellationsQuestionElements pReturnsOrCancellationsQuestion;
	private final ReturnsManagementQuestionElements pReturnsManagementQuestion;
	private final PenaltyForNeglectQuestionElements pPenaltyForNeglectQuestion;
	private final AgreedPriceQuestionElements pAgreedPriceQuestion;
	private final ProductQualityQuestionElements pProductQualityQuestion;
	private final ExpectedQualityQuestionElements pExpectedQualityQuestion;
	private final InternationalSealQuestionElements pInternationalSealQuestion;
	private final InternacionalSealNameQuestionElements pInternacionalSealNameQuestion;
	private final HealthInspectionQuestionElements pHealthInspectionQuestion;
	private final InspectionResultQuestionElements pInspectionResultQuestion;
	private final StorageConditionsQuestionElements pStorageConditionsQuestion;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmaCQAGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.tEOLINE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.SmaCQA.EOLINE");
		this.pValueExchange = new ValueExchangeElements();
		this.pDataQuestion = new DataQuestionElements();
		this.pShipmentQuestion = new ShipmentQuestionElements();
		this.pInsuranceQuestion = new InsuranceQuestionElements();
		this.pAlimentaryQuestion = new AlimentaryQuestionElements();
		this.pValueObjectQuestion = new ValueObjectQuestionElements();
		this.pValueObjectRightQuestion = new ValueObjectRightQuestionElements();
		this.pValueObjectTokenQuestion = new ValueObjectTokenQuestionElements();
		this.pValueObjectTangibleQuestion = new ValueObjectTangibleQuestionElements();
		this.eType = new TypeElements();
		this.eUnitTime = new UnitTimeElements();
		this.eUnitCoin = new UnitCoinElements();
		this.eVoyagetype = new VoyagetypeElements();
		this.eInspectionResult = new InspectionResultElements();
		this.eParticipants = new ParticipantsElements();
		this.pDataRegister = new DataRegisterElements();
		this.pToken = new TokenElements();
		this.pTokenERC20 = new TokenERC20Elements();
		this.pTokenERC223 = new TokenERC223Elements();
		this.pTokenERC721 = new TokenERC721Elements();
		this.pTimeValueExchangeDurationQuestion = new TimeValueExchangeDurationQuestionElements();
		this.pTimeStartValueExchangeQuestion = new TimeStartValueExchangeQuestionElements();
		this.pRepeatValueExchangeQuestion = new RepeatValueExchangeQuestionElements();
		this.pConditionsValueExchangeQuestion = new ConditionsValueExchangeQuestionElements();
		this.pLegalQuestion = new LegalQuestionElements();
		this.pAgeQuestion = new AgeQuestionElements();
		this.pTaxQuestion = new TaxQuestionElements();
		this.pAdditionalLegalDocumentQuestion = new AdditionalLegalDocumentQuestionElements();
		this.pRegulatoryComplianceQuestion = new RegulatoryComplianceQuestionElements();
		this.pEconomyQuestion = new EconomyQuestionElements();
		this.pMinimumAmountQuestion = new MinimumAmountQuestionElements();
		this.pShipmentCostResponsibilityQuestion = new ShipmentCostResponsibilityQuestionElements();
		this.pShipmentDetailsQuestion = new ShipmentDetailsQuestionElements();
		this.pSanitaryControlQuestion = new SanitaryControlQuestionElements();
		this.pCustomsQuestion = new CustomsQuestionElements();
		this.pImportTaxQuestion = new ImportTaxQuestionElements();
		this.pTaxShipmentDetailsQuestion = new TaxShipmentDetailsQuestionElements();
		this.pGeographicalQuestion = new GeographicalQuestionElements();
		this.pGeographicalRestrictionQuestion = new GeographicalRestrictionQuestionElements();
		this.pAddressPickupQuestion = new AddressPickupQuestionElements();
		this.pAddressDeliveryQuestion = new AddressDeliveryQuestionElements();
		this.pShipmentTrackingNumberQuestion = new ShipmentTrackingNumberQuestionElements();
		this.pDangerousLoadQuestion = new DangerousLoadQuestionElements();
		this.pSpecialMeasuresQuestion = new SpecialMeasuresQuestionElements();
		this.pPerishableQuestion = new PerishableQuestionElements();
		this.pExpirationDateQuestion = new ExpirationDateQuestionElements();
		this.pCargoTypeQuestion = new CargoTypeQuestionElements();
		this.pCargoWeightQuestion = new CargoWeightQuestionElements();
		this.pCargoDimensionsQuestion = new CargoDimensionsQuestionElements();
		this.pSeaShipmentQuestion = new SeaShipmentQuestionElements();
		this.pMaritimeQuestion = new MaritimeQuestionElements();
		this.pVoyageQuestion = new VoyageQuestionElements();
		this.pMeansTransportQuestion = new MeansTransportQuestionElements();
		this.pCompanyQuestion = new CompanyQuestionElements();
		this.pDeliveryDeadlineQuestion = new DeliveryDeadlineQuestionElements();
		this.pUpdatesAndMonitoringQuestion = new UpdatesAndMonitoringQuestionElements();
		this.pExternalMediatorQuestion = new ExternalMediatorQuestionElements();
		this.pMediatorNameQuestion = new MediatorNameQuestionElements();
		this.pShipmentInsuranceQuestion = new ShipmentInsuranceQuestionElements();
		this.pInsuranceDetailsQuestion = new InsuranceDetailsQuestionElements();
		this.pReturnsOrCancellationsQuestion = new ReturnsOrCancellationsQuestionElements();
		this.pReturnsManagementQuestion = new ReturnsManagementQuestionElements();
		this.pPenaltyForNeglectQuestion = new PenaltyForNeglectQuestionElements();
		this.pAgreedPriceQuestion = new AgreedPriceQuestionElements();
		this.pProductQualityQuestion = new ProductQualityQuestionElements();
		this.pExpectedQualityQuestion = new ExpectedQualityQuestionElements();
		this.pInternationalSealQuestion = new InternationalSealQuestionElements();
		this.pInternacionalSealNameQuestion = new InternacionalSealNameQuestionElements();
		this.pHealthInspectionQuestion = new HealthInspectionQuestionElements();
		this.pInspectionResultQuestion = new InspectionResultQuestionElements();
		this.pStorageConditionsQuestion = new StorageConditionsQuestionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.SmaCQA".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*El modelo contempla al menos un intercambio de valor */ Model:
	//	valueExchanges+=ValueExchange+;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//terminal EOLINE:
	//	"/n";
	public TerminalRule getEOLINERule() {
		return tEOLINE;
	}
	
	///*En cada value exchange:
	// * 
	// * actorSend = Actor que envía el objeto de valor negociado (bien tangible o intangible) al actorReceipt
	// * actorReceipt = Actor que recibe el objeto de valor negociado (bien tangible o intangible) por parte del actorSend
	// * valueObject = Objeto de valor negociado entre ambos actores
	// */ ValueExchange:
	//"================= Value Exchange ======================= 
	//The exchange of value in which" actorSend=ID "sends/grants" actorReceipt=ID "the following object of value"
	//	valueObject=ID "has the following associated questions and answers: " EOLINE?
	//	("--------- 1.Data Questions: -----------" EOLINE?
	//	dataQuestion=DataQuestion)? ("--------- 2.Legal Questions: -----------" EOLINE?
	//	legalQuestion=LegalQuestion)? ("--------- 3.Economy Questions: -----------" EOLINE?
	//	economyQuestion=EconomyQuestion)? ("--------- 4. Shipment Questions:-----------" EOLINE?
	//	shipmentQuestion=ShipmentQuestion)? ("--------- 5. Insurance shipment Questions:-----------" EOLINE?
	//	insuranceQuestion=InsuranceQuestion)? ("--------- 6. Alimentary Cargo Questions:-----------" EOLINE?
	//	alimentaryQuestion=AlimentaryQuestion)?
	//	"================= Completion of the question process for this value exchange =================";
	public ValueExchangeElements getValueExchangeAccess() {
		return pValueExchange;
	}
	
	public ParserRule getValueExchangeRule() {
		return getValueExchangeAccess().getRule();
	}
	
	///*DataQuestion: Son preguntas para registrar una determinada funcionalidad en el smart contract con respecto a los intercambios de valor
	// * 
	// * timeDurationValueExchange = Si el intercambio de valor esta sujeto a un determinado intervalo de tiempo
	// * timeStartValueExchange = Si el intercambio de valor esta sujeto a que empiece en  un determinado intervalo de tiempo
	// * repeatValueExchange = Si el intercambio de valor se repite durante determinado intervalo de tiempo
	// * conditionValueExchange = Si el intercambio de valor esta sujeto a las mismas condiciones
	// * valueObjectTypeValueExchange = ¿Cuál es la naturaleza del objeto de valor negociado?
	// */ DataQuestion:
	//	timeDurationValueExchange=TimeValueExchangeDurationQuestion?
	//	timeStartValueExchange=TimeStartValueExchangeQuestion?
	//	repeatValueExchange=RepeatValueExchangeQuestion?
	//	conditionValueExchange=ConditionsValueExchangeQuestion?
	//	valueObjectTypeValueExchange=ValueObjectQuestion?;
	public DataQuestionElements getDataQuestionAccess() {
		return pDataQuestion;
	}
	
	public ParserRule getDataQuestionRule() {
		return getDataQuestionAccess().getRule();
	}
	
	///*ShipmentQuestion: Son preguntas para registrar  la información de envío del objeto de valor negociado.
	// * 
	// * timeDurationValueExchange = Si el intercambio de valor esta sujeto a un determinado intervalo de tiempo
	// * timeStartValueExchange = Si el intercambio de valor esta sujeto a que empiece en  un determinado intervalo de tiempo
	// * repeatValueExchange = Si el intercambio de valor se repite durante determinado intervalo de tiempo
	// * conditionValueExchange = Si el intercambio de valor esta sujeto a las mismas condiciones
	// * valueObjectTypeValueExchange = ¿Cuál es la naturaleza del objeto de valor negociado?
	// */ ShipmentQuestion:
	//	shipmentDetails=ShipmentDetailsQuestion
	//	sanitaryControl=SanitaryControlQuestion
	//	customs=CustomsQuestion?
	//	importTax=ImportTaxQuestion?
	//	geographicalQuestion=GeographicalQuestion?
	//	addressPickup=AddressPickupQuestion
	//	addressDelivery=AddressDeliveryQuestion
	//	shipmentTrackingNumber=ShipmentTrackingNumberQuestion?
	//	dangerousLoad=DangerousLoadQuestion?
	//	perishable=PerishableQuestion?
	//	cargoType=CargoTypeQuestion
	//	cargoWeight=CargoWeightQuestion
	//	cargoDimensions=CargoDimensionsQuestion
	//	seaShipment=SeaShipmentQuestion?
	//	means=MeansTransportQuestion?
	//	company=CompanyQuestion
	//	deliveryDeadline=DeliveryDeadlineQuestion?
	//	updatesAndMonitoring=UpdatesAndMonitoringQuestion?
	//	externalMediator=ExternalMediatorQuestion?;
	public ShipmentQuestionElements getShipmentQuestionAccess() {
		return pShipmentQuestion;
	}
	
	public ParserRule getShipmentQuestionRule() {
		return getShipmentQuestionAccess().getRule();
	}
	
	//InsuranceQuestion:
	//	shipmentInsurance=ShipmentInsuranceQuestion?
	//	insuranceDetails=InsuranceDetailsQuestion
	//	returnsOrCancellations=ReturnsOrCancellationsQuestion?
	//	penaltyForNeglect=PenaltyForNeglectQuestion?;
	public InsuranceQuestionElements getInsuranceQuestionAccess() {
		return pInsuranceQuestion;
	}
	
	public ParserRule getInsuranceQuestionRule() {
		return getInsuranceQuestionAccess().getRule();
	}
	
	//AlimentaryQuestion:
	//	agreedPrice=AgreedPriceQuestion?
	//	productQuality=ProductQualityQuestion?
	//	internationalSeal=InternationalSealQuestion?
	//	healthInspection=HealthInspectionQuestion?
	//	storageConditions=StorageConditionsQuestion?;
	public AlimentaryQuestionElements getAlimentaryQuestionAccess() {
		return pAlimentaryQuestion;
	}
	
	public ParserRule getAlimentaryQuestionRule() {
		return getAlimentaryQuestionAccess().getRule();
	}
	
	///*ValueObjectQuestion:
	// * 
	// * ValueObjectTokenQuestion = Token/Criptoactivo negociado entre ambos actores
	// * ValueObjectRightQuestion = Un derecho intangible que puede ser visto como un servicio,subscripción, etc. (Por ejemplo: Subscripción a Amazón -> Activo o Inactivo
	// * ValueObjectTangibleQuestion = Bien tangible negociado entre ambos actores (Cualquier cosa física)
	// */ ValueObjectQuestion:
	//	ValueObjectTokenQuestion | ValueObjectRightQuestion | ValueObjectTangibleQuestion;
	public ValueObjectQuestionElements getValueObjectQuestionAccess() {
		return pValueObjectQuestion;
	}
	
	public ParserRule getValueObjectQuestionRule() {
		return getValueObjectQuestionAccess().getRule();
	}
	
	//ValueObjectRightQuestion:
	//	name="1.5 Is the object of value a right that can be reflected as active or inactive?" "answer = " answer=("yes" |
	//	"no");
	public ValueObjectRightQuestionElements getValueObjectRightQuestionAccess() {
		return pValueObjectRightQuestion;
	}
	
	public ParserRule getValueObjectRightQuestionRule() {
		return getValueObjectRightQuestionAccess().getRule();
	}
	
	//ValueObjectTokenQuestion:
	//	name="1.5 If the object of value traded on the value exchange is a digital token. What are the properties of said token?"
	//	answer=Token;
	public ValueObjectTokenQuestionElements getValueObjectTokenQuestionAccess() {
		return pValueObjectTokenQuestion;
	}
	
	public ParserRule getValueObjectTokenQuestionRule() {
		return getValueObjectTokenQuestionAccess().getRule();
	}
	
	//ValueObjectTangibleQuestion:
	//	name="1.5 If the object of value negotiated in the value exchange is a tangible entity that can be represented as a digital entity (not a token). What are the properties of that object?"
	//	"Data Declaration: "
	//	answer+=DataRegister+
	//	"End Data Declaration";
	public ValueObjectTangibleQuestionElements getValueObjectTangibleQuestionAccess() {
		return pValueObjectTangibleQuestion;
	}
	
	public ParserRule getValueObjectTangibleQuestionRule() {
		return getValueObjectTangibleQuestionAccess().getRule();
	}
	
	//enum Type:
	//	Number | Text | TrueOrFalse;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//enum UnitTime:
	//	minutes | days | weeks | years;
	public UnitTimeElements getUnitTimeAccess() {
		return eUnitTime;
	}
	
	public EnumRule getUnitTimeRule() {
		return getUnitTimeAccess().getRule();
	}
	
	//enum UnitCoin:
	//	ether | wei | pwei | gwei | szabo;
	public UnitCoinElements getUnitCoinAccess() {
		return eUnitCoin;
	}
	
	public EnumRule getUnitCoinRule() {
		return getUnitCoinAccess().getRule();
	}
	
	//enum Voyagetype:
	//	time | voyage;
	public VoyagetypeElements getVoyagetypeAccess() {
		return eVoyagetype;
	}
	
	public EnumRule getVoyagetypeRule() {
		return getVoyagetypeAccess().getRule();
	}
	
	//enum inspectionResult:
	//	favorable | unfavorable;
	public InspectionResultElements getInspectionResultAccess() {
		return eInspectionResult;
	}
	
	public EnumRule getInspectionResultRule() {
		return getInspectionResultAccess().getRule();
	}
	
	//enum Participants:
	//	actorSend | actorReceipt;
	public ParticipantsElements getParticipantsAccess() {
		return eParticipants;
	}
	
	public EnumRule getParticipantsRule() {
		return getParticipantsAccess().getRule();
	}
	
	///*Registro de propiedade:
	// * 
	// * name = Nombre de la propiedad
	// * type = Tipo de la propiedad
	// */ DataRegister:
	//	"Data name: " name=ID "Value: " type=Type;
	public DataRegisterElements getDataRegisterAccess() {
		return pDataRegister;
	}
	
	public ParserRule getDataRegisterRule() {
		return getDataRegisterAccess().getRule();
	}
	
	///*Tipos de tokens (si el value object negociado es un token):
	// * 
	// * TokenERC20 = Funngible
	// * TokenERC223 = Fungible
	// * TokenERC721 = No fungible
	// */ Token:
	//	TokenERC20 | TokenERC223 | TokenERC721;
	public TokenElements getTokenAccess() {
		return pToken;
	}
	
	public ParserRule getTokenRule() {
		return getTokenAccess().getRule();
	}
	
	//TokenERC20:
	//	"Data Declaration Token ERC20: "
	//	"Token ERC20 name: " name=ID "Token ERC20 Symbol: " symbol=ID "Token ERC20 decimals: " decimals=INT
	//	"Token ERC20 supply: " supply=INT
	//	"1.5.1 Is it possible to increase the total supply once it is already in circulation (mint more)?" "answer = "
	//	answerMintSentence=("yes" | "no")
	//	"1.5.2 Is it possible to remove a certain amount of token from circulation (burn token)?" "answer = "
	//	answerBurnSentence=("yes" | "no")
	//	"End Data Declaration Token ERC20";
	public TokenERC20Elements getTokenERC20Access() {
		return pTokenERC20;
	}
	
	public ParserRule getTokenERC20Rule() {
		return getTokenERC20Access().getRule();
	}
	
	//TokenERC223:
	//	"Data Declaration Token ERC223: "
	//	"Token ERC223 name: " name=ID "Token ERC223 Symbol: " symbol=ID "Token ERC223 decimals: " decimals=INT
	//	"Token ERC223 supply: " supply=INT
	//	"1.5.1 Is it possible to increase the total supply once it is already in circulation (mint more)?" "answer = "
	//	answerMintSentence=("yes" | "no")
	//	"1.5.2 Is it possible to remove a certain amount of token from circulation (burn token)?" "answer = "
	//	answerBurnSentence=("yes" | "no")
	//	"End Data Declaration Token ERC223";
	public TokenERC223Elements getTokenERC223Access() {
		return pTokenERC223;
	}
	
	public ParserRule getTokenERC223Rule() {
		return getTokenERC223Access().getRule();
	}
	
	//TokenERC721:
	//	"Data Declaration Non Fungible Token ERC721: "
	//	"Token ERC721 name: " name=ID "Token ERC721 Symbol: " symbol=ID
	//	"1.5.1 If it's possible to mint more than one NFT at a time?" "answer = " answerMintSentence=("yes" | "no")
	//	"1.5.2 Is it possible to remove/disable the token from circulation (burn token)?" "answer = "
	//	answerBurnSentence=("yes" | "no")
	//	"1.5.3 What is the price of this token?" "answer = " answerUnitPrice=INT answerUnitCoin=UnitCoin
	//	"1.5.4 Is necessary attach metadata (Information about the token, example: url image) to the token?" "answer = "
	//	answerMetadataSentence=("yes" | "no") ("1.5.5 Which data or properties are requiered for the NFT information?"
	//	"Data Declaration: "
	//	answer+=DataRegister+
	//	"End Data Declaration")?
	//	("1.5.6 If it's possible to define an amount to restrict the amount of NFTs that are minted. What is the maximum amount?"
	//	"total supply = " supply=INT)?
	//	"End Data Declaration Token ERC721";
	public TokenERC721Elements getTokenERC721Access() {
		return pTokenERC721;
	}
	
	public ParserRule getTokenERC721Rule() {
		return getTokenERC721Access().getRule();
	}
	
	//TimeValueExchangeDurationQuestion:
	//	name="1.1 If the exchange of value is subject to a duration of time. What would this be?(indicated in minutes,days,weeks or years)"
	//	"answer = " answer=INT "unitTime = " answerUnitTime=UnitTime;
	public TimeValueExchangeDurationQuestionElements getTimeValueExchangeDurationQuestionAccess() {
		return pTimeValueExchangeDurationQuestion;
	}
	
	public ParserRule getTimeValueExchangeDurationQuestionRule() {
		return getTimeValueExchangeDurationQuestionAccess().getRule();
	}
	
	//TimeStartValueExchangeQuestion:
	//	name="1.2 If the exchange of value could only take place after a certain time. What would this be?(indicated in minutes,days,weeks or years)"
	//	"answer = " answer=INT "unitTime = " answerUnitTime=UnitTime;
	public TimeStartValueExchangeQuestionElements getTimeStartValueExchangeQuestionAccess() {
		return pTimeStartValueExchangeQuestion;
	}
	
	public ParserRule getTimeStartValueExchangeQuestionRule() {
		return getTimeStartValueExchangeQuestionAccess().getRule();
	}
	
	//RepeatValueExchangeQuestion:
	//	name="1.3 Can the value exchange be repeated over time?" "answer = " answer=("yes" | "no");
	public RepeatValueExchangeQuestionElements getRepeatValueExchangeQuestionAccess() {
		return pRepeatValueExchangeQuestion;
	}
	
	public ParserRule getRepeatValueExchangeQuestionRule() {
		return getRepeatValueExchangeQuestionAccess().getRule();
	}
	
	//ConditionsValueExchangeQuestion:
	//	name="1.4 Are the same conditions always maintained when exchanging value?" "answer = " answer=("yes" | "no");
	public ConditionsValueExchangeQuestionElements getConditionsValueExchangeQuestionAccess() {
		return pConditionsValueExchangeQuestion;
	}
	
	public ParserRule getConditionsValueExchangeQuestionRule() {
		return getConditionsValueExchangeQuestionAccess().getRule();
	}
	
	///*LegalQuestion: Son preguntas sobre aspectos legales acerca de los intercambios de valor
	// * 
	// * ageQuestion = Si el intercambio de valor esta sujeto a una restricción de un mínimo de edad determinada
	// * taxQuestion = Si el intercambio de valor esta sujeto a algún tipo de impuesto/tasa
	// ****
	// * additionalLegalDocument = Si el intercambio esta sujeto a un documento legal adicional a este smart contract
	// * regulatoryCompliance = Quien es el encargado de hacerse cargo de cumplir con las regulaciones realacionadas con el intercambio
	// */ LegalQuestion:
	//	ageQuestion=AgeQuestion?
	//	taxQuestion=TaxQuestion?
	//	additionalLegalDocument=AdditionalLegalDocumentQuestion?
	//	regulatoryCompliance=RegulatoryComplianceQuestion?;
	public LegalQuestionElements getLegalQuestionAccess() {
		return pLegalQuestion;
	}
	
	public ParserRule getLegalQuestionRule() {
		return getLegalQuestionAccess().getRule();
	}
	
	//AgeQuestion:
	//	name="2.1  What would be the minimum legal age if necessary in this exchange?" "answer = " answer=INT;
	public AgeQuestionElements getAgeQuestionAccess() {
		return pAgeQuestion;
	}
	
	public ParserRule getAgeQuestionRule() {
		return getAgeQuestionAccess().getRule();
	}
	
	//TaxQuestion:
	//	name="2.2 What is the name of the tax?" "answer = " answer=ID subSentence="2.2.1 Who collects the tax?" "answer = "
	//	answerSubSentence=ID;
	public TaxQuestionElements getTaxQuestionAccess() {
		return pTaxQuestion;
	}
	
	public ParserRule getTaxQuestionRule() {
		return getTaxQuestionAccess().getRule();
	}
	
	////Las dos siguientes ya corresponden con la ampliacion de preguntas
	//AdditionalLegalDocumentQuestion:
	//	name="2.3 Is another legal document complementary to this SmartContract necessary?" "answer = " answer=("yes" |
	//	"no");
	public AdditionalLegalDocumentQuestionElements getAdditionalLegalDocumentQuestionAccess() {
		return pAdditionalLegalDocumentQuestion;
	}
	
	public ParserRule getAdditionalLegalDocumentQuestionRule() {
		return getAdditionalLegalDocumentQuestionAccess().getRule();
	}
	
	//RegulatoryComplianceQuestion:
	//	name="2.4 Who is responsible for ensuring compliance with regulations?" "answer = " answer=ID;
	public RegulatoryComplianceQuestionElements getRegulatoryComplianceQuestionAccess() {
		return pRegulatoryComplianceQuestion;
	}
	
	public ParserRule getRegulatoryComplianceQuestionRule() {
		return getRegulatoryComplianceQuestionAccess().getRule();
	}
	
	///*EconomyQuestion: Son preguntas de carácter económico acerca de los intercambios de valor
	// * 
	// * minimumAmountQuestion = Si el intercambio de valor esta sujeto a una restricción de un mínimo de cantidad determinada
	// */ EconomyQuestion:
	//	minimumAmountQuestion=MinimumAmountQuestion?
	//	shipmentCostResponsibility=ShipmentCostResponsibilityQuestion?;
	public EconomyQuestionElements getEconomyQuestionAccess() {
		return pEconomyQuestion;
	}
	
	public ParserRule getEconomyQuestionRule() {
		return getEconomyQuestionAccess().getRule();
	}
	
	//MinimumAmountQuestion:
	//	name="3.1 Which would be the minimum amount if necessary in this exchange?" "answer = " answer=INT;
	public MinimumAmountQuestionElements getMinimumAmountQuestionAccess() {
		return pMinimumAmountQuestion;
	}
	
	public ParserRule getMinimumAmountQuestionRule() {
		return getMinimumAmountQuestionAccess().getRule();
	}
	
	////Estas ya corresponden con la ampliacion de preguntas<
	//ShipmentCostResponsibilityQuestion:
	//	q1="3.2 Who is responsible for the transportation cost?" "responsible = " answer1=ID
	//	(q2="3.3 What is the freight rate?" "cost = " answer2=INT "unitCoin=" answerUnitCoinFreightRate=UnitCoin)?
	//	(q3="3.4 What is the loading fee (on the ship)?" "cost = " answer3=INT "unitCoin="
	//	loadingFeeAnswerUnitCoin=UnitCoin)? (q4="3.5 What is the unloading fee?" "cost = " answer4=INT "unitCoin="
	//	unloadingFeeAnswerUnitCoin=UnitCoin)? (q5="3.6 What is the transport rate?" "cost = " answer5=INT "unitCoin="
	//	transportRateAnswerUnitCoin=UnitCoin)?;
	public ShipmentCostResponsibilityQuestionElements getShipmentCostResponsibilityQuestionAccess() {
		return pShipmentCostResponsibilityQuestion;
	}
	
	public ParserRule getShipmentCostResponsibilityQuestionRule() {
		return getShipmentCostResponsibilityQuestionAccess().getRule();
	}
	
	//ShipmentDetailsQuestion:
	//	name="4.1 Is it an international shipment?" "internationalAnswer = " answer=("yes" | "no");
	public ShipmentDetailsQuestionElements getShipmentDetailsQuestionAccess() {
		return pShipmentDetailsQuestion;
	}
	
	public ParserRule getShipmentDetailsQuestionRule() {
		return getShipmentDetailsQuestionAccess().getRule();
	}
	
	//SanitaryControlQuestion:
	//	name="4.2 Is the product subject to any sanitary control upon arrival at the destination country?"
	//	"sanitaryAnswer = " answer=("yes" | "no");
	public SanitaryControlQuestionElements getSanitaryControlQuestionAccess() {
		return pSanitaryControlQuestion;
	}
	
	public ParserRule getSanitaryControlQuestionRule() {
		return getSanitaryControlQuestionAccess().getRule();
	}
	
	//CustomsQuestion:
	//	name="4.3 Does the shipment have to go through customs?" "customsAnswer = " answer=("yes" | "no");
	public CustomsQuestionElements getCustomsQuestionAccess() {
		return pCustomsQuestion;
	}
	
	public ParserRule getCustomsQuestionRule() {
		return getCustomsQuestionAccess().getRule();
	}
	
	//ImportTaxQuestion:
	//	name="4.4 Does it have to pay any import tax to the destination country?" "taxAnswer = " answer=("yes" | "no")
	//	subSentence=TaxShipmentDetailsQuestion?;
	public ImportTaxQuestionElements getImportTaxQuestionAccess() {
		return pImportTaxQuestion;
	}
	
	public ParserRule getImportTaxQuestionRule() {
		return getImportTaxQuestionAccess().getRule();
	}
	
	//TaxShipmentDetailsQuestion:
	//	name="4.4.1 How much does it have to pay in taxes?" "cost = " answer=INT answerUnitCoin=UnitCoin;
	public TaxShipmentDetailsQuestionElements getTaxShipmentDetailsQuestionAccess() {
		return pTaxShipmentDetailsQuestion;
	}
	
	public ParserRule getTaxShipmentDetailsQuestionRule() {
		return getTaxShipmentDetailsQuestionAccess().getRule();
	}
	
	//GeographicalQuestion:
	//	name="4.5 Are there geographical restrictions for the exchange?" "answer = " answer=("yes" | "no")
	//	subSentenceRestriction=GeographicalRestrictionQuestion?;
	public GeographicalQuestionElements getGeographicalQuestionAccess() {
		return pGeographicalQuestion;
	}
	
	public ParserRule getGeographicalQuestionRule() {
		return getGeographicalQuestionAccess().getRule();
	}
	
	//GeographicalRestrictionQuestion:
	//	name="4.5.1 What are the geographical restrictions?" "restrictions = " answer=STRING;
	public GeographicalRestrictionQuestionElements getGeographicalRestrictionQuestionAccess() {
		return pGeographicalRestrictionQuestion;
	}
	
	public ParserRule getGeographicalRestrictionQuestionRule() {
		return getGeographicalRestrictionQuestionAccess().getRule();
	}
	
	//AddressPickupQuestion:
	//	name="4.6 What is the pickup address for the cargo?" "address = " answer=STRING;
	public AddressPickupQuestionElements getAddressPickupQuestionAccess() {
		return pAddressPickupQuestion;
	}
	
	public ParserRule getAddressPickupQuestionRule() {
		return getAddressPickupQuestionAccess().getRule();
	}
	
	//AddressDeliveryQuestion:
	//	name="4.7 What is the delivery address?" "address = " answer=STRING;
	public AddressDeliveryQuestionElements getAddressDeliveryQuestionAccess() {
		return pAddressDeliveryQuestion;
	}
	
	public ParserRule getAddressDeliveryQuestionRule() {
		return getAddressDeliveryQuestionAccess().getRule();
	}
	
	//ShipmentTrackingNumberQuestion:
	//	name="4.8 What is the shipment tracking number?" "tracking number = " answer=INT;
	public ShipmentTrackingNumberQuestionElements getShipmentTrackingNumberQuestionAccess() {
		return pShipmentTrackingNumberQuestion;
	}
	
	public ParserRule getShipmentTrackingNumberQuestionRule() {
		return getShipmentTrackingNumberQuestionAccess().getRule();
	}
	
	//DangerousLoadQuestion:
	//	name="4.9 Does the physical good represent a dangerous load or have special transportation needs?" "answer = "
	//	answer=("yes" | "no") subSentenceSpecialMeasures=SpecialMeasuresQuestion?;
	public DangerousLoadQuestionElements getDangerousLoadQuestionAccess() {
		return pDangerousLoadQuestion;
	}
	
	public ParserRule getDangerousLoadQuestionRule() {
		return getDangerousLoadQuestionAccess().getRule();
	}
	
	//SpecialMeasuresQuestion:
	//	name="4.9.1 What special measures are needed for its proper transport?" "especial measures needed = " answer=STRING;
	public SpecialMeasuresQuestionElements getSpecialMeasuresQuestionAccess() {
		return pSpecialMeasuresQuestion;
	}
	
	public ParserRule getSpecialMeasuresQuestionRule() {
		return getSpecialMeasuresQuestionAccess().getRule();
	}
	
	//PerishableQuestion:
	//	name="4.10 Is it a perishable product?" "answer = " answer=("yes" | "no")
	//	subSentencePerishable=ExpirationDateQuestion?;
	public PerishableQuestionElements getPerishableQuestionAccess() {
		return pPerishableQuestion;
	}
	
	public ParserRule getPerishableQuestionRule() {
		return getPerishableQuestionAccess().getRule();
	}
	
	//ExpirationDateQuestion:
	//	name="4.10.1 What is its expiration date?" "answer = " answer=STRING;
	public ExpirationDateQuestionElements getExpirationDateQuestionAccess() {
		return pExpirationDateQuestion;
	}
	
	public ParserRule getExpirationDateQuestionRule() {
		return getExpirationDateQuestionAccess().getRule();
	}
	
	//CargoTypeQuestion:
	//	name="4.11 What is the type of cargo?" "answer = " answer=STRING;
	public CargoTypeQuestionElements getCargoTypeQuestionAccess() {
		return pCargoTypeQuestion;
	}
	
	public ParserRule getCargoTypeQuestionRule() {
		return getCargoTypeQuestionAccess().getRule();
	}
	
	//CargoWeightQuestion:
	//	name="4.12 How much does the cargo weight (kg)?" "answer = " answer=INT;
	public CargoWeightQuestionElements getCargoWeightQuestionAccess() {
		return pCargoWeightQuestion;
	}
	
	public ParserRule getCargoWeightQuestionRule() {
		return getCargoWeightQuestionAccess().getRule();
	}
	
	//CargoDimensionsQuestion:
	//	name="4.13 What are the dimensions of the cargo (length x width x depth in cm)?" "answer = " length=INT "cm x "
	//	width=INT "cm x " depth=INT "cm";
	public CargoDimensionsQuestionElements getCargoDimensionsQuestionAccess() {
		return pCargoDimensionsQuestion;
	}
	
	public ParserRule getCargoDimensionsQuestionRule() {
		return getCargoDimensionsQuestionAccess().getRule();
	}
	
	//SeaShipmentQuestion:
	//	name="4.14 Is the shipment made by sea route?" "answer = " answer=("yes" | "no") maritime=MaritimeQuestion?;
	public SeaShipmentQuestionElements getSeaShipmentQuestionAccess() {
		return pSeaShipmentQuestion;
	}
	
	public ParserRule getSeaShipmentQuestionRule() {
		return getSeaShipmentQuestionAccess().getRule();
	}
	
	//MaritimeQuestion:
	//	q1="4.14.1 What is the name of the origin port?" "Origin Port = " answer1=STRING
	//	q2="4.14.2 What is the name of the destination port?" "Destination Port = " answer2=STRING
	//	(q3="4.14.3 In case of need, does it leave the port agent the power to make key decisions?" "answer = "
	//	answer3=("yes" | "no"))?
	//	q4="4.14.4 Is it a voyage charter or time charter party?" "type of voyage = " answer4=Voyagetype
	//	subSentence=VoyageQuestion?;
	public MaritimeQuestionElements getMaritimeQuestionAccess() {
		return pMaritimeQuestion;
	}
	
	public ParserRule getMaritimeQuestionRule() {
		return getMaritimeQuestionAccess().getRule();
	}
	
	//VoyageQuestion:
	//	name="4.14.4.1 For how long is the ship rented (indicated in minutes,days,weeks or years)" "quantity = "
	//	answerSubSentence=INT "unitTime = " answerUnitTime=UnitTime;
	public VoyageQuestionElements getVoyageQuestionAccess() {
		return pVoyageQuestion;
	}
	
	public ParserRule getVoyageQuestionRule() {
		return getVoyageQuestionAccess().getRule();
	}
	
	//MeansTransportQuestion:
	//	name="4.15 What is the means of transport?" "answer = " answer=STRING;
	public MeansTransportQuestionElements getMeansTransportQuestionAccess() {
		return pMeansTransportQuestion;
	}
	
	public ParserRule getMeansTransportQuestionRule() {
		return getMeansTransportQuestionAccess().getRule();
	}
	
	//CompanyQuestion:
	//	name="4.16 What is the name of the transport company?" "name = " answer=STRING;
	public CompanyQuestionElements getCompanyQuestionAccess() {
		return pCompanyQuestion;
	}
	
	public ParserRule getCompanyQuestionRule() {
		return getCompanyQuestionAccess().getRule();
	}
	
	//DeliveryDeadlineQuestion:
	//	name="4.17 What is the deadline for delivery?" "deadline = " answer=STRING;
	public DeliveryDeadlineQuestionElements getDeliveryDeadlineQuestionAccess() {
		return pDeliveryDeadlineQuestion;
	}
	
	public ParserRule getDeliveryDeadlineQuestionRule() {
		return getDeliveryDeadlineQuestionAccess().getRule();
	}
	
	//UpdatesAndMonitoringQuestion:
	//	name="4.18 Through what means will updates and monitoring data be received?" "answer = " answer=STRING;
	public UpdatesAndMonitoringQuestionElements getUpdatesAndMonitoringQuestionAccess() {
		return pUpdatesAndMonitoringQuestion;
	}
	
	public ParserRule getUpdatesAndMonitoringQuestionRule() {
		return getUpdatesAndMonitoringQuestionAccess().getRule();
	}
	
	//ExternalMediatorQuestion:
	//	name="4.19 In case of dispute, is it considered to appoint an external mediator?" "answer = " answer=("yes" | "no")
	//	subsentence=MediatorNameQuestion?;
	public ExternalMediatorQuestionElements getExternalMediatorQuestionAccess() {
		return pExternalMediatorQuestion;
	}
	
	public ParserRule getExternalMediatorQuestionRule() {
		return getExternalMediatorQuestionAccess().getRule();
	}
	
	//MediatorNameQuestion:
	//	name="4.19.1 What is the name of the individual or company mediating external to the two parties?" "answer = "
	//	answer=ID;
	public MediatorNameQuestionElements getMediatorNameQuestionAccess() {
		return pMediatorNameQuestion;
	}
	
	public ParserRule getMediatorNameQuestionRule() {
		return getMediatorNameQuestionAccess().getRule();
	}
	
	//ShipmentInsuranceQuestion:
	//	name="5.1 Is the cargo insured?" "answer = " answer=("yes" | "no");
	public ShipmentInsuranceQuestionElements getShipmentInsuranceQuestionAccess() {
		return pShipmentInsuranceQuestion;
	}
	
	public ParserRule getShipmentInsuranceQuestionRule() {
		return getShipmentInsuranceQuestionAccess().getRule();
	}
	
	//InsuranceDetailsQuestion:
	//	(q1="5.1.1 What is the cost of insurance (per unit asset)?" "quantity = " answer1=INT "unitCoin="
	//	answerUnitCoin1=UnitCoin)? (q2="5.1.2 What cases are covered by the insurance (insurance clauses)?" "answer = "
	//	answer2=STRING)? (q3="5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?"
	//	"answer = " answer3=INT "unitCoin=" answerUnitCoin3=UnitCoin)?;
	public InsuranceDetailsQuestionElements getInsuranceDetailsQuestionAccess() {
		return pInsuranceDetailsQuestion;
	}
	
	public ParserRule getInsuranceDetailsQuestionRule() {
		return getInsuranceDetailsQuestionAccess().getRule();
	}
	
	//ReturnsOrCancellationsQuestion:
	//	name="5.2 Is the possibility of returns or cancellations in the exchange foreseen?" "answer = " answer=("yes" | "no")
	//	subsentence=ReturnsManagementQuestion?;
	public ReturnsOrCancellationsQuestionElements getReturnsOrCancellationsQuestionAccess() {
		return pReturnsOrCancellationsQuestion;
	}
	
	public ParserRule getReturnsOrCancellationsQuestionRule() {
		return getReturnsOrCancellationsQuestionAccess().getRule();
	}
	
	//ReturnsManagementQuestion:
	//	name="5.2.1 How would returns or cancellations be managed according to the terms of the contract?" "answer = "
	//	answer=STRING;
	public ReturnsManagementQuestionElements getReturnsManagementQuestionAccess() {
		return pReturnsManagementQuestion;
	}
	
	public ParserRule getReturnsManagementQuestionRule() {
		return getReturnsManagementQuestionAccess().getRule();
	}
	
	//PenaltyForNeglectQuestion:
	//	name="5.3 What is the penalty in case of neglect or abandonment of duties?" "answer = " answer=STRING;
	public PenaltyForNeglectQuestionElements getPenaltyForNeglectQuestionAccess() {
		return pPenaltyForNeglectQuestion;
	}
	
	public ParserRule getPenaltyForNeglectQuestionRule() {
		return getPenaltyForNeglectQuestionAccess().getRule();
	}
	
	//AgreedPriceQuestion:
	//	name="6.1 What is the agreed price per unit of product ?" "quanity = " answer=INT "unitCoin" answerUnitCoin=UnitCoin;
	public AgreedPriceQuestionElements getAgreedPriceQuestionAccess() {
		return pAgreedPriceQuestion;
	}
	
	public ParserRule getAgreedPriceQuestionRule() {
		return getAgreedPriceQuestionAccess().getRule();
	}
	
	//ProductQualityQuestion:
	//	name="6.2 What is the expected quality of the product?" "answer = " answer=STRING
	//	expectedQuality=ExpectedQualityQuestion?;
	public ProductQualityQuestionElements getProductQualityQuestionAccess() {
		return pProductQualityQuestion;
	}
	
	public ParserRule getProductQualityQuestionRule() {
		return getProductQualityQuestionAccess().getRule();
	}
	
	//ExpectedQualityQuestion:
	//	q1="6.2.1 How will the quality of the product be determined?" "answer = " answer1=STRING
	//	q2="6.2.2 What happens if the delivered product does not meet the agreed quality?" "answer = " answer2=STRING;
	public ExpectedQualityQuestionElements getExpectedQualityQuestionAccess() {
		return pExpectedQualityQuestion;
	}
	
	public ParserRule getExpectedQualityQuestionRule() {
		return getExpectedQualityQuestionAccess().getRule();
	}
	
	//InternationalSealQuestion:
	//	name="6.3 Does the merchandise have any international seal or distinction?" "answer = " answer=("yes" | "no")
	//	subsentence=InternacionalSealNameQuestion?;
	public InternationalSealQuestionElements getInternationalSealQuestionAccess() {
		return pInternationalSealQuestion;
	}
	
	public ParserRule getInternationalSealQuestionRule() {
		return getInternationalSealQuestionAccess().getRule();
	}
	
	//InternacionalSealNameQuestion:
	//	name="6.3.1 What international seal or distinction does the cargo have?" "answer = " answer=STRING;
	public InternacionalSealNameQuestionElements getInternacionalSealNameQuestionAccess() {
		return pInternacionalSealNameQuestion;
	}
	
	public ParserRule getInternacionalSealNameQuestionRule() {
		return getInternacionalSealNameQuestionAccess().getRule();
	}
	
	//HealthInspectionQuestion:
	//	name="6.4 Has any health check or inspection been carried out at the production or storage site?" "answer = "
	//	answer=("yes" | "no") subsentence=InspectionResultQuestion?;
	public HealthInspectionQuestionElements getHealthInspectionQuestionAccess() {
		return pHealthInspectionQuestion;
	}
	
	public ParserRule getHealthInspectionQuestionRule() {
		return getHealthInspectionQuestionAccess().getRule();
	}
	
	//InspectionResultQuestion:
	//	name="6.4.1 What was the result of the inspection?" "result of inspection = " answer=inspectionResult;
	public InspectionResultQuestionElements getInspectionResultQuestionAccess() {
		return pInspectionResultQuestion;
	}
	
	public ParserRule getInspectionResultQuestionRule() {
		return getInspectionResultQuestionAccess().getRule();
	}
	
	//StorageConditionsQuestion:
	//	name="6.5 Has the merchandise been stored at all times in optimal humidity and temperature conditions?" "answer = "
	//	answer=("yes" | "no");
	public StorageConditionsQuestionElements getStorageConditionsQuestionAccess() {
		return pStorageConditionsQuestion;
	}
	
	public ParserRule getStorageConditionsQuestionRule() {
		return getStorageConditionsQuestionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
