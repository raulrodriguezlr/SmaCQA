/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.smaCQA.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.smaCQA.SmaCQAPackage;
import org.xtext.smaCQA.TimeStartValueExchangeQuestion;
import org.xtext.smaCQA.UnitTime;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Time Start Value Exchange Question</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaCQA.impl.TimeStartValueExchangeQuestionImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.TimeStartValueExchangeQuestionImpl#getAnswer <em>Answer</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.TimeStartValueExchangeQuestionImpl#getAnswerUnitTime <em>Answer Unit Time</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimeStartValueExchangeQuestionImpl extends MinimalEObjectImpl.Container implements TimeStartValueExchangeQuestion
{
  /**
	 * The default value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
  protected static final String NAME_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getName()
	 * @generated
	 * @ordered
	 */
  protected String name = NAME_EDEFAULT;

  /**
	 * The default value of the '{@link #getAnswer() <em>Answer</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswer()
	 * @generated
	 * @ordered
	 */
  protected static final int ANSWER_EDEFAULT = 0;

  /**
	 * The cached value of the '{@link #getAnswer() <em>Answer</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswer()
	 * @generated
	 * @ordered
	 */
  protected int answer = ANSWER_EDEFAULT;

  /**
	 * The default value of the '{@link #getAnswerUnitTime() <em>Answer Unit Time</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswerUnitTime()
	 * @generated
	 * @ordered
	 */
  protected static final UnitTime ANSWER_UNIT_TIME_EDEFAULT = UnitTime.MINUTES;

  /**
	 * The cached value of the '{@link #getAnswerUnitTime() <em>Answer Unit Time</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAnswerUnitTime()
	 * @generated
	 * @ordered
	 */
  protected UnitTime answerUnitTime = ANSWER_UNIT_TIME_EDEFAULT;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected TimeStartValueExchangeQuestionImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return SmaCQAPackage.Literals.TIME_START_VALUE_EXCHANGE_QUESTION;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String getName()
  {
		return name;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setName(String newName)
  {
		String oldName = name;
		name = newName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__NAME, oldName, name));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public int getAnswer()
  {
		return answer;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setAnswer(int newAnswer)
  {
		int oldAnswer = answer;
		answer = newAnswer;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER, oldAnswer, answer));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public UnitTime getAnswerUnitTime()
  {
		return answerUnitTime;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setAnswerUnitTime(UnitTime newAnswerUnitTime)
  {
		UnitTime oldAnswerUnitTime = answerUnitTime;
		answerUnitTime = newAnswerUnitTime == null ? ANSWER_UNIT_TIME_EDEFAULT : newAnswerUnitTime;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER_UNIT_TIME, oldAnswerUnitTime, answerUnitTime));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__NAME:
				return getName();
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER:
				return getAnswer();
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER_UNIT_TIME:
				return getAnswerUnitTime();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__NAME:
				setName((String)newValue);
				return;
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER:
				setAnswer((Integer)newValue);
				return;
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER_UNIT_TIME:
				setAnswerUnitTime((UnitTime)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__NAME:
				setName(NAME_EDEFAULT);
				return;
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER:
				setAnswer(ANSWER_EDEFAULT);
				return;
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER_UNIT_TIME:
				setAnswerUnitTime(ANSWER_UNIT_TIME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__NAME:
				return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER:
				return answer != ANSWER_EDEFAULT;
			case SmaCQAPackage.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER_UNIT_TIME:
				return answerUnitTime != ANSWER_UNIT_TIME_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (name: ");
		result.append(name);
		result.append(", answer: ");
		result.append(answer);
		result.append(", answerUnitTime: ");
		result.append(answerUnitTime);
		result.append(')');
		return result.toString();
	}

} //TimeStartValueExchangeQuestionImpl
