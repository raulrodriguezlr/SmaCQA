/**
 * generated by Xtext 2.18.0.M3
 */
package org.xtext.smaCQA.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.smaCQA.AlimentaryQuestion;
import org.xtext.smaCQA.DataQuestion;
import org.xtext.smaCQA.EconomyQuestion;
import org.xtext.smaCQA.InsuranceQuestion;
import org.xtext.smaCQA.LegalQuestion;
import org.xtext.smaCQA.ShipmentQuestion;
import org.xtext.smaCQA.SmaCQAPackage;
import org.xtext.smaCQA.ValueExchange;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Value Exchange</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getActorSend <em>Actor Send</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getActorReceipt <em>Actor Receipt</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getValueObject <em>Value Object</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getDataQuestion <em>Data Question</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getLegalQuestion <em>Legal Question</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getEconomyQuestion <em>Economy Question</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getShipmentQuestion <em>Shipment Question</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getInsuranceQuestion <em>Insurance Question</em>}</li>
 *   <li>{@link org.xtext.smaCQA.impl.ValueExchangeImpl#getAlimentaryQuestion <em>Alimentary Question</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ValueExchangeImpl extends MinimalEObjectImpl.Container implements ValueExchange
{
  /**
	 * The default value of the '{@link #getActorSend() <em>Actor Send</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getActorSend()
	 * @generated
	 * @ordered
	 */
  protected static final String ACTOR_SEND_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getActorSend() <em>Actor Send</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getActorSend()
	 * @generated
	 * @ordered
	 */
  protected String actorSend = ACTOR_SEND_EDEFAULT;

  /**
	 * The default value of the '{@link #getActorReceipt() <em>Actor Receipt</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getActorReceipt()
	 * @generated
	 * @ordered
	 */
  protected static final String ACTOR_RECEIPT_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getActorReceipt() <em>Actor Receipt</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getActorReceipt()
	 * @generated
	 * @ordered
	 */
  protected String actorReceipt = ACTOR_RECEIPT_EDEFAULT;

  /**
	 * The default value of the '{@link #getValueObject() <em>Value Object</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getValueObject()
	 * @generated
	 * @ordered
	 */
  protected static final String VALUE_OBJECT_EDEFAULT = null;

  /**
	 * The cached value of the '{@link #getValueObject() <em>Value Object</em>}' attribute.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getValueObject()
	 * @generated
	 * @ordered
	 */
  protected String valueObject = VALUE_OBJECT_EDEFAULT;

  /**
	 * The cached value of the '{@link #getDataQuestion() <em>Data Question</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getDataQuestion()
	 * @generated
	 * @ordered
	 */
  protected DataQuestion dataQuestion;

  /**
	 * The cached value of the '{@link #getLegalQuestion() <em>Legal Question</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getLegalQuestion()
	 * @generated
	 * @ordered
	 */
  protected LegalQuestion legalQuestion;

  /**
	 * The cached value of the '{@link #getEconomyQuestion() <em>Economy Question</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getEconomyQuestion()
	 * @generated
	 * @ordered
	 */
  protected EconomyQuestion economyQuestion;

  /**
	 * The cached value of the '{@link #getShipmentQuestion() <em>Shipment Question</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getShipmentQuestion()
	 * @generated
	 * @ordered
	 */
  protected ShipmentQuestion shipmentQuestion;

  /**
	 * The cached value of the '{@link #getInsuranceQuestion() <em>Insurance Question</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getInsuranceQuestion()
	 * @generated
	 * @ordered
	 */
  protected InsuranceQuestion insuranceQuestion;

  /**
	 * The cached value of the '{@link #getAlimentaryQuestion() <em>Alimentary Question</em>}' containment reference.
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @see #getAlimentaryQuestion()
	 * @generated
	 * @ordered
	 */
  protected AlimentaryQuestion alimentaryQuestion;

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  protected ValueExchangeImpl()
  {
		super();
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  protected EClass eStaticClass()
  {
		return SmaCQAPackage.Literals.VALUE_EXCHANGE;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String getActorSend()
  {
		return actorSend;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setActorSend(String newActorSend)
  {
		String oldActorSend = actorSend;
		actorSend = newActorSend;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__ACTOR_SEND, oldActorSend, actorSend));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String getActorReceipt()
  {
		return actorReceipt;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setActorReceipt(String newActorReceipt)
  {
		String oldActorReceipt = actorReceipt;
		actorReceipt = newActorReceipt;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__ACTOR_RECEIPT, oldActorReceipt, actorReceipt));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String getValueObject()
  {
		return valueObject;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setValueObject(String newValueObject)
  {
		String oldValueObject = valueObject;
		valueObject = newValueObject;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__VALUE_OBJECT, oldValueObject, valueObject));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public DataQuestion getDataQuestion()
  {
		return dataQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetDataQuestion(DataQuestion newDataQuestion, NotificationChain msgs)
  {
		DataQuestion oldDataQuestion = dataQuestion;
		dataQuestion = newDataQuestion;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION, oldDataQuestion, newDataQuestion);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setDataQuestion(DataQuestion newDataQuestion)
  {
		if (newDataQuestion != dataQuestion) {
			NotificationChain msgs = null;
			if (dataQuestion != null)
				msgs = ((InternalEObject)dataQuestion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION, null, msgs);
			if (newDataQuestion != null)
				msgs = ((InternalEObject)newDataQuestion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION, null, msgs);
			msgs = basicSetDataQuestion(newDataQuestion, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION, newDataQuestion, newDataQuestion));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public LegalQuestion getLegalQuestion()
  {
		return legalQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetLegalQuestion(LegalQuestion newLegalQuestion, NotificationChain msgs)
  {
		LegalQuestion oldLegalQuestion = legalQuestion;
		legalQuestion = newLegalQuestion;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION, oldLegalQuestion, newLegalQuestion);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setLegalQuestion(LegalQuestion newLegalQuestion)
  {
		if (newLegalQuestion != legalQuestion) {
			NotificationChain msgs = null;
			if (legalQuestion != null)
				msgs = ((InternalEObject)legalQuestion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION, null, msgs);
			if (newLegalQuestion != null)
				msgs = ((InternalEObject)newLegalQuestion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION, null, msgs);
			msgs = basicSetLegalQuestion(newLegalQuestion, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION, newLegalQuestion, newLegalQuestion));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public EconomyQuestion getEconomyQuestion()
  {
		return economyQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetEconomyQuestion(EconomyQuestion newEconomyQuestion, NotificationChain msgs)
  {
		EconomyQuestion oldEconomyQuestion = economyQuestion;
		economyQuestion = newEconomyQuestion;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION, oldEconomyQuestion, newEconomyQuestion);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setEconomyQuestion(EconomyQuestion newEconomyQuestion)
  {
		if (newEconomyQuestion != economyQuestion) {
			NotificationChain msgs = null;
			if (economyQuestion != null)
				msgs = ((InternalEObject)economyQuestion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION, null, msgs);
			if (newEconomyQuestion != null)
				msgs = ((InternalEObject)newEconomyQuestion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION, null, msgs);
			msgs = basicSetEconomyQuestion(newEconomyQuestion, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION, newEconomyQuestion, newEconomyQuestion));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public ShipmentQuestion getShipmentQuestion()
  {
		return shipmentQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetShipmentQuestion(ShipmentQuestion newShipmentQuestion, NotificationChain msgs)
  {
		ShipmentQuestion oldShipmentQuestion = shipmentQuestion;
		shipmentQuestion = newShipmentQuestion;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION, oldShipmentQuestion, newShipmentQuestion);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setShipmentQuestion(ShipmentQuestion newShipmentQuestion)
  {
		if (newShipmentQuestion != shipmentQuestion) {
			NotificationChain msgs = null;
			if (shipmentQuestion != null)
				msgs = ((InternalEObject)shipmentQuestion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION, null, msgs);
			if (newShipmentQuestion != null)
				msgs = ((InternalEObject)newShipmentQuestion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION, null, msgs);
			msgs = basicSetShipmentQuestion(newShipmentQuestion, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION, newShipmentQuestion, newShipmentQuestion));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public InsuranceQuestion getInsuranceQuestion()
  {
		return insuranceQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetInsuranceQuestion(InsuranceQuestion newInsuranceQuestion, NotificationChain msgs)
  {
		InsuranceQuestion oldInsuranceQuestion = insuranceQuestion;
		insuranceQuestion = newInsuranceQuestion;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION, oldInsuranceQuestion, newInsuranceQuestion);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setInsuranceQuestion(InsuranceQuestion newInsuranceQuestion)
  {
		if (newInsuranceQuestion != insuranceQuestion) {
			NotificationChain msgs = null;
			if (insuranceQuestion != null)
				msgs = ((InternalEObject)insuranceQuestion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION, null, msgs);
			if (newInsuranceQuestion != null)
				msgs = ((InternalEObject)newInsuranceQuestion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION, null, msgs);
			msgs = basicSetInsuranceQuestion(newInsuranceQuestion, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION, newInsuranceQuestion, newInsuranceQuestion));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public AlimentaryQuestion getAlimentaryQuestion()
  {
		return alimentaryQuestion;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  public NotificationChain basicSetAlimentaryQuestion(AlimentaryQuestion newAlimentaryQuestion, NotificationChain msgs)
  {
		AlimentaryQuestion oldAlimentaryQuestion = alimentaryQuestion;
		alimentaryQuestion = newAlimentaryQuestion;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION, oldAlimentaryQuestion, newAlimentaryQuestion);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void setAlimentaryQuestion(AlimentaryQuestion newAlimentaryQuestion)
  {
		if (newAlimentaryQuestion != alimentaryQuestion) {
			NotificationChain msgs = null;
			if (alimentaryQuestion != null)
				msgs = ((InternalEObject)alimentaryQuestion).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION, null, msgs);
			if (newAlimentaryQuestion != null)
				msgs = ((InternalEObject)newAlimentaryQuestion).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION, null, msgs);
			msgs = basicSetAlimentaryQuestion(newAlimentaryQuestion, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION, newAlimentaryQuestion, newAlimentaryQuestion));
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
		switch (featureID) {
			case SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION:
				return basicSetDataQuestion(null, msgs);
			case SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION:
				return basicSetLegalQuestion(null, msgs);
			case SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION:
				return basicSetEconomyQuestion(null, msgs);
			case SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION:
				return basicSetShipmentQuestion(null, msgs);
			case SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION:
				return basicSetInsuranceQuestion(null, msgs);
			case SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION:
				return basicSetAlimentaryQuestion(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
		switch (featureID) {
			case SmaCQAPackage.VALUE_EXCHANGE__ACTOR_SEND:
				return getActorSend();
			case SmaCQAPackage.VALUE_EXCHANGE__ACTOR_RECEIPT:
				return getActorReceipt();
			case SmaCQAPackage.VALUE_EXCHANGE__VALUE_OBJECT:
				return getValueObject();
			case SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION:
				return getDataQuestion();
			case SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION:
				return getLegalQuestion();
			case SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION:
				return getEconomyQuestion();
			case SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION:
				return getShipmentQuestion();
			case SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION:
				return getInsuranceQuestion();
			case SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION:
				return getAlimentaryQuestion();
		}
		return super.eGet(featureID, resolve, coreType);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eSet(int featureID, Object newValue)
  {
		switch (featureID) {
			case SmaCQAPackage.VALUE_EXCHANGE__ACTOR_SEND:
				setActorSend((String)newValue);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__ACTOR_RECEIPT:
				setActorReceipt((String)newValue);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__VALUE_OBJECT:
				setValueObject((String)newValue);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION:
				setDataQuestion((DataQuestion)newValue);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION:
				setLegalQuestion((LegalQuestion)newValue);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION:
				setEconomyQuestion((EconomyQuestion)newValue);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION:
				setShipmentQuestion((ShipmentQuestion)newValue);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION:
				setInsuranceQuestion((InsuranceQuestion)newValue);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION:
				setAlimentaryQuestion((AlimentaryQuestion)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public void eUnset(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.VALUE_EXCHANGE__ACTOR_SEND:
				setActorSend(ACTOR_SEND_EDEFAULT);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__ACTOR_RECEIPT:
				setActorReceipt(ACTOR_RECEIPT_EDEFAULT);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__VALUE_OBJECT:
				setValueObject(VALUE_OBJECT_EDEFAULT);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION:
				setDataQuestion((DataQuestion)null);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION:
				setLegalQuestion((LegalQuestion)null);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION:
				setEconomyQuestion((EconomyQuestion)null);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION:
				setShipmentQuestion((ShipmentQuestion)null);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION:
				setInsuranceQuestion((InsuranceQuestion)null);
				return;
			case SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION:
				setAlimentaryQuestion((AlimentaryQuestion)null);
				return;
		}
		super.eUnset(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public boolean eIsSet(int featureID)
  {
		switch (featureID) {
			case SmaCQAPackage.VALUE_EXCHANGE__ACTOR_SEND:
				return ACTOR_SEND_EDEFAULT == null ? actorSend != null : !ACTOR_SEND_EDEFAULT.equals(actorSend);
			case SmaCQAPackage.VALUE_EXCHANGE__ACTOR_RECEIPT:
				return ACTOR_RECEIPT_EDEFAULT == null ? actorReceipt != null : !ACTOR_RECEIPT_EDEFAULT.equals(actorReceipt);
			case SmaCQAPackage.VALUE_EXCHANGE__VALUE_OBJECT:
				return VALUE_OBJECT_EDEFAULT == null ? valueObject != null : !VALUE_OBJECT_EDEFAULT.equals(valueObject);
			case SmaCQAPackage.VALUE_EXCHANGE__DATA_QUESTION:
				return dataQuestion != null;
			case SmaCQAPackage.VALUE_EXCHANGE__LEGAL_QUESTION:
				return legalQuestion != null;
			case SmaCQAPackage.VALUE_EXCHANGE__ECONOMY_QUESTION:
				return economyQuestion != null;
			case SmaCQAPackage.VALUE_EXCHANGE__SHIPMENT_QUESTION:
				return shipmentQuestion != null;
			case SmaCQAPackage.VALUE_EXCHANGE__INSURANCE_QUESTION:
				return insuranceQuestion != null;
			case SmaCQAPackage.VALUE_EXCHANGE__ALIMENTARY_QUESTION:
				return alimentaryQuestion != null;
		}
		return super.eIsSet(featureID);
	}

  /**
	 * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
	 * @generated
	 */
  @Override
  public String toString()
  {
		if (eIsProxy()) return super.toString();

		StringBuilder result = new StringBuilder(super.toString());
		result.append(" (actorSend: ");
		result.append(actorSend);
		result.append(", actorReceipt: ");
		result.append(actorReceipt);
		result.append(", valueObject: ");
		result.append(valueObject);
		result.append(')');
		return result.toString();
	}

} //ValueExchangeImpl
