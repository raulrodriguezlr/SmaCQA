/*
 * generated by Xtext 2.12.0
 */
package org.xtext.validation

import org.eclipse.xtext.validation.Check
import org.xtext.smaCQA.SmaCQAPackage
import org.xtext.smaCQA.impl.AgeQuestionImpl
import org.xtext.smaCQA.impl.ValueExchangeImpl
import org.xtext.smaCQA.Model
import org.xtext.smaCQA.impl.ModelImpl
import org.xtext.smaCQA.AgeQuestion
import org.xtext.smaCQA.impl.LegalQuestionImpl
import org.xtext.smaCQA.ValueExchange
import org.xtext.smaCQA.TimeStartValueExchangeQuestion
import java.time.zone.ZoneOffsetTransitionRule.TimeDefinition
import org.xtext.smaCQA.TimeValueExchangeDurationQuestion
import org.xtext.smaCQA.Token
import org.xtext.smaCQA.MinimumAmountQuestion
import org.xtext.smaCQA.ValueObjectTangibleQuestion
import org.xtext.smaCQA.TokenERC20
import org.xtext.smaCQA.TokenERC223
import org.xtext.smaCQA.TokenERC721
import org.xtext.smaCQA.impl.ShipmentCostResponsibilityQuestionImpl
import static extension java.util.Objects.*
import org.xtext.smaCQA.impl.TaxShipmentDetailsQuestionImpl
import org.xtext.smaCQA.impl.ShipmentTrackingNumberQuestionImpl
import org.xtext.smaCQA.impl.CargoWeightQuestionImpl
import org.xtext.smaCQA.impl.CargoDimensionsQuestionImpl
import org.xtext.smaCQA.impl.VoyageQuestionImpl
import org.xtext.smaCQA.impl.InsuranceDetailsQuestionImpl
import org.xtext.smaCQA.impl.AgreedPriceQuestionImpl

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class SmaCQAValidator extends AbstractSmaCQAValidator {
	
	public static val INVALID_RESPONSE_AGE = 'invalidResponseaAge'
	public static val INVALID_NAME = 'invalidName'
	public static val INVALID_RATE = 'invalidRate'
	public static val INVALID_MODEL_VALUE_EXCHANGES = 'invalidModelValueExchanges'
	public static val LEGAL_QUESTION = 'legalQuestion'
	public static val AGE_QUESTION = "ageQuestion"
	public static val INVALID_NUMBER = "invalidNumber"
	public static val TOKEN_DECIMALS_QUESTION = "token_decimals_Question"
	public static val TOKEN_SUPPLY_QUESTION = "token_supply_Question"
	public static val TOKEN_NAME_QUESTION = "token_name_Question"
	public static val TOKEN_SYMBOL_QUESTION = "token_symbol_Question"
	public static val INVALID_DATA_REGISTER = "data_register"

		//INICIO DE LOS METODOS relacionados con SmaCQA+
	@Check//3.3  3.4  3.5  3.6
	def checkAnswerShipmentCostResponsibilityQuestion(ShipmentCostResponsibilityQuestionImpl costResponsability){
		
		
		if(costResponsability.getQ2.equals("3.3 What is the freight rate?"))
            if(costResponsability.getAnswer2<1){
            error('The answer must be a valid freight rate cost(>0)', 
                        SmaCQAPackage.Literals.SHIPMENT_COST_RESPONSIBILITY_QUESTION__ANSWER2,
                        INVALID_RATE)
            }
        if(costResponsability.getQ3.equals("3.4 What is the loading fee (on the ship)?"))
            if(costResponsability.getAnswer3<1){
                error('The answer must be a valid loading fee rate(>0) ', 
                        SmaCQAPackage.Literals.SHIPMENT_COST_RESPONSIBILITY_QUESTION__ANSWER3,
                        INVALID_RATE)
            }
        
	    if(costResponsability.getQ4.equals("3.5 What is the unloading fee?"))
            if(costResponsability.getAnswer4<1){
                error('The answer must be a valid loading fee rate(>0) ', 
                        SmaCQAPackage.Literals.SHIPMENT_COST_RESPONSIBILITY_QUESTION__ANSWER4,
                        INVALID_RATE)
            }

        if(costResponsability.getQ5.equals("3.6 What is the transport rate?"))
		    if(costResponsability.getAnswer5<1){
			    error('The answer must be a valid loading fee rate(>0) ', 
				    	SmaCQAPackage.Literals.SHIPMENT_COST_RESPONSIBILITY_QUESTION__ANSWER5,
					    INVALID_RATE)
		    }
            //if(!costReponsability.answerUnitCoinFreightRate.equals("ether")||(!costReponsability.answerUnitCoinFreightRate.equals("wei"))
			//					||(!costReponsability.answerUnitCoinFreightRate.equals(pwei))||(!costReponsability.answerUnitCoinFreightRate.equals("gwei"))
				//					||(!costReponsability.answerUnitCoinFreightRate.equals("szabo"))){
			//error('The answer must be a valid unit coin =>{ether, wei,pwei,gwei,szabo}', 
				//	SmaCQAPackage.Literals.SHIPMENT_COST_RESPONSIBILITY_QUESTION__ANSWER_UNIT_COIN_FREIGHT_RATE,
				//	INVALID_RATE)						
						//			}
	}

    @Check//4.4.1
	def checkAnswerTaxShipmentDetailsQuestion(TaxShipmentDetailsQuestionImpl taxDetailsQuestion) {
        if(taxDetailsQuestion.getAnswer<1){
            error('The answer must be a valid Tax fee(>0), if there is not Tax fee, mark no in the previous question ', 
                SmaCQAPackage.Literals.TAX_SHIPMENT_DETAILS_QUESTION__ANSWER,
                INVALID_RATE)
        }
    }

    @Check//4.8
	def checkAnswerShipmentTrackingNumberQuestion(ShipmentTrackingNumberQuestionImpl trackingNumberQuestion) {
        if(trackingNumberQuestion.getAnswer<1){
            error('The Tracking number  can not be lower tan 1', 
                SmaCQAPackage.Literals.SHIPMENT_TRACKING_NUMBER_QUESTION__ANSWER,
                INVALID_RATE)
        }
        if(trackingNumberQuestion.getAnswer.toString.length<4){
            warning('The Tracking number may be too short to be a valid tracking number, consider check it', 
                SmaCQAPackage.Literals.SHIPMENT_TRACKING_NUMBER_QUESTION__ANSWER,
                INVALID_RATE)
        }
    }
	
    @Check//4.12
	def checkAnswerCargoWeightQuestion(CargoWeightQuestionImpl cargoWeightQuestion) {
        if(cargoWeightQuestion.getAnswer<1){
            error('The weight must be a valid number (>0), if not, consider skip this question ', 
                SmaCQAPackage.Literals.CARGO_WEIGHT_QUESTION__ANSWER,
                INVALID_NUMBER)
        }
    }

    @Check//4.13
	def checkAnswerCargoDimensionsQuestion(CargoDimensionsQuestionImpl cargoDimensionsQuestion) {
        if(cargoDimensionsQuestion.getLength<1){
            error('The length must be a valid number  (>0), if not, consider skip this question ', 
                SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__LENGTH,
                INVALID_NUMBER)
        }
        if(cargoDimensionsQuestion.getWidth<1){
            error('The width must be a valid number  (>0), if not, consider skip this question ', 
                SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__WIDTH,
                INVALID_NUMBER)
        }
        if(cargoDimensionsQuestion.getWidth<1){
            warning('The should must be a valid number  (>0)', 
                SmaCQAPackage.Literals.CARGO_DIMENSIONS_QUESTION__DEPTH,
                INVALID_NUMBER)
        }
    }

    @Check//4.14.4.1
    def checkAnswerVoyageQuestion(VoyageQuestionImpl voyageQuestion) {
        if(voyageQuestion.getAnswerSubSentence<1){
            error('The answer must be a valid number (>0)', 
                SmaCQAPackage.Literals.VOYAGE_QUESTION__ANSWER_SUB_SENTENCE,
                INVALID_NUMBER)
        }
    }

    @Check//5.1.1  5.1.3
    def checkInsuranceDetailsQuestion(InsuranceDetailsQuestionImpl insuranceDetailsQuestion) {
        if(insuranceDetailsQuestion.getQ1.equals("5.1.1 What is the cost of insurance (per unit asset)?"))
            if(insuranceDetailsQuestion.getAnswer1<1){
                error('The  cost of insurance must be valid (>0), if not, consider skip this question', 
                    SmaCQAPackage.Literals.INSURANCE_DETAILS_QUESTION__ANSWER1,
                    INVALID_NUMBER)
            }
        if(insuranceDetailsQuestion.getQ3.equals("5.1.3 How much would be the refund paid in case of loss or cargo delivered in poor condition?"))
            if(insuranceDetailsQuestion.getAnswer3<1){
                error('The the refund must be valid number (>0), if not, consider skip this question', 
                    SmaCQAPackage.Literals.INSURANCE_DETAILS_QUESTION__ANSWER1,
                    INVALID_NUMBER)
            }
    }

    @Check//6.1
    def checkAnswerAgreedPriceQuestion(AgreedPriceQuestionImpl agreedPriceQuestion) {
        if(agreedPriceQuestion.getAnswer<1){
            error('The agreed price must be a valid number (>0)', 
                SmaCQAPackage.Literals.AGREED_PRICE_QUESTION__ANSWER,
                INVALID_NUMBER)
        }
    }
	
	@Check
	def checkAnswerAgeSubQuestion(AgeQuestionImpl ageQuestion) {
		if (isNumeric(ageQuestion.answer.toString) == false) {
			error('The answer must be a number to represent the age of the actor carrying out the value exchange.', 
					SmaCQAPackage.Literals.AGE_QUESTION__ANSWER,
					INVALID_NUMBER)
		}
		if (ageQuestion.answer <= 16 || ageQuestion.answer >= 110) {
			error('The answer must be a valid age between 16 and 110', 
					SmaCQAPackage.Literals.AGE_QUESTION__ANSWER,
					INVALID_NUMBER)
		}
	}
	
	@Check
	def checkValueExchanges(Model model){
	 	var valueExchangesIdentified = model.valueExchanges // lists start at position 0
	 	for (var i= 0; i < valueExchangesIdentified.size ; i++){
	 		for (var j = i+1; j < valueExchangesIdentified.size ; j++){
	 			if (valueExchangesIdentified.get(i).actorReceipt.equals(valueExchangesIdentified.get(j).actorReceipt) && 
	 				valueExchangesIdentified.get(i).actorSend.equals(valueExchangesIdentified.get(j).actorSend) &&
	 				valueExchangesIdentified.get(i).valueObject.equals(valueExchangesIdentified.get(j).valueObject)
	 			) {
					 error("Double value exchange. You defined this value exchange before.",SmaCQAPackage.Literals.MODEL__VALUE_EXCHANGES,
					INVALID_RESPONSE_AGE)
	 			}
	 		}
	 	}
	}
	
	
	@Check
	def checkTime(TimeStartValueExchangeQuestion timeStartQuestion){
	 	if(timeStartQuestion.answer == 0){
	 		error("Time should be greater than 0.",SmaCQAPackage.Literals.TIME_START_VALUE_EXCHANGE_QUESTION__ANSWER,INVALID_NUMBER)
	 	}
	} 
	
	@Check
	def checkTime(TimeValueExchangeDurationQuestion timeQuestion){
	 	if(timeQuestion.answer == 0){
	 		error("Time should be greater than 0.",SmaCQAPackage.Literals.TIME_VALUE_EXCHANGE_DURATION_QUESTION__ANSWER,INVALID_NUMBER)
	 	}
	} 
	
	@Check
	def checkMinimumAmount(MinimumAmountQuestion minimumAmountQuestion){
	 	if(minimumAmountQuestion.answer == 0){
	 		error("The minimum amount should be greater than 0.",SmaCQAPackage.Literals.MINIMUM_AMOUNT_QUESTION__ANSWER,INVALID_NUMBER)
	 	}
	} 
	
	@Check
	def checkInfoToken(TokenERC20 token){
	 	if(token.supply == 0){
	 		error("Supply specification should be greater than 0.",SmaCQAPackage.Literals.TOKEN__SUPPLY,TOKEN_SUPPLY_QUESTION)
	 	}
	 	if(token.decimals == 0){
	 		error("Decimal specification should be greater than 0. Normally, the specified number is 18.",SmaCQAPackage.Literals.TOKEN_ERC20__DECIMALS,TOKEN_DECIMALS_QUESTION)
	 	}
	 	if(token.name.length < 3){
	 		info("The token name specification is too short and can make it difficult to read and understand.", SmaCQAPackage.Literals.TOKEN__NAME,TOKEN_NAME_QUESTION)
	 	}
	 	if(token.symbol.length>6){
	 		info("The token symbol specification is too long and can make it difficult to read and understand. Normally, the symbol contains 3 or 5 characters.", SmaCQAPackage.Literals.TOKEN__SYMBOL,TOKEN_SYMBOL_QUESTION)
	 	}
	} 
	
	@Check
	def checkInfoToken(TokenERC223 token){
	 	if(token.supply == 0){
	 		error("Supply specification should be greater than 0.",SmaCQAPackage.Literals.TOKEN__SUPPLY,TOKEN_SUPPLY_QUESTION)
	 	}
	 	if(token.decimals == 0){
	 		error("Decimal specification should be greater than 0. Normally, the specified number is 18.",SmaCQAPackage.Literals.TOKEN_ERC223__DECIMALS,TOKEN_DECIMALS_QUESTION)
	 	}
	 	if(token.name.length < 3){
	 		info("The token name specification is too short and can make it difficult to read and understand.", SmaCQAPackage.Literals.TOKEN__NAME,TOKEN_NAME_QUESTION)
	 	}
	 	if(token.symbol.length>6){
	 		info("The token symbol specification is too long and can make it difficult to read and understand. Normally, the symbol contains 3 or 5 characters.", SmaCQAPackage.Literals.TOKEN__SYMBOL,TOKEN_SYMBOL_QUESTION)
	 	}
	} 
	
	@Check
	def checkInfoToken(TokenERC721 token){
	 	if(token.supply == 0){
	 		error("Supply specification should be greater than 0.",SmaCQAPackage.Literals.TOKEN__SUPPLY,TOKEN_SUPPLY_QUESTION)
	 	}
	 	if(token.answerUnitPrice <= 0){
	 		error("Price ERC721 Token should be greater than 0.",SmaCQAPackage.Literals.TOKEN_ERC721__ANSWER_UNIT_PRICE,INVALID_NUMBER)
	 	}
	 	if(token.name.length < 3){
	 		info("The token name specification is too short and can make it difficult to read and understand.", SmaCQAPackage.Literals.TOKEN__NAME,TOKEN_NAME_QUESTION)
	 	}
	 	if(token.symbol.length>6){
	 		info("The token symbol specification is too long and can make it difficult to read and understand. Normally, the symbol contains 3 or 5 characters.", SmaCQAPackage.Literals.TOKEN__SYMBOL,TOKEN_SYMBOL_QUESTION)
	 	}
	} 
	
	
	@Check
	def checkDataRegister(ValueObjectTangibleQuestion valueObjectTangible){
	 	var dataRegisters = valueObjectTangible.answer // lists start at position 0
	 	for (var i= 0; i < dataRegisters.size ; i++){
	 		for (var j = i+1; j < dataRegisters.size ; j++){
	 			if (dataRegisters.get(i).type.equals(dataRegisters.get(j).type) && 
	 				dataRegisters.get(i).name.equals(dataRegisters.get(j).name) ) {
					 error("Two equal properties have been defined for the value object.",SmaCQAPackage.Literals.MODEL__VALUE_EXCHANGES,
					INVALID_DATA_REGISTER)
	 			}
	 		}
	 	}
	}
	
	
	def isNumeric(String cadena) {
        var  boolean resultado;
        try {
            Integer.parseInt(cadena);
            resultado = true;
        } catch (NumberFormatException excepcion) {
            resultado = false;
        }

        return resultado;
    }
	
	
}
